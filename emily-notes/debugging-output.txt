Args: mlir-opt out/matmul104x104-tiled-once/tiling/matmul104x104-tiled-once-before-tiling.mlir --affine-loop-tile=tile-sizes=1,1,1,1,1,13 --debug 
Load new dialect in Context builtin
ImplicitTypeIDRegistry::lookupOrInsert(mlir::ShapedType)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::MemRefLayoutAttrInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::TypedAttr)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::ElementsAttr)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::DistinctAttr)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::BytecodeOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::SymbolOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpAsmOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::RegionKindInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::ConditionallySpeculatable)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::MemoryEffectOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::ResourceBlobManagerDialectInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpAsmDialectInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::BytecodeDialectInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::detail::AffineBinaryOpExprStorage)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::detail::AffineConstantExprStorage)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::detail::AffineDimExprStorage)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::detail::AffineMapStorage)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::detail::IntegerSetStorage)
Load new dialect in Context builtin
ImplicitTypeIDRegistry::lookupOrInsert(mlir::CastOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::DestructurableTypeInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::LLVMTranslationDialectInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::ZeroOperands<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::OneRegion<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::ZeroResults<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::ZeroSuccessors<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::NoRegionArguments<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::NoTerminator<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::SingleBlock<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::OpInvariants<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::BytecodeOpInterface::Trait<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::AffineScope<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::IsIsolatedFromAbove<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::SymbolTable<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::SymbolOpInterface::Trait<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpAsmOpInterface::Trait<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::RegionKindInterface::Trait<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::HasOnlyGraphRegion<Empty>)
Load new dialect in Context memref
Load new dialect in Context arith
ImplicitTypeIDRegistry::lookupOrInsert(mlir::arith::ArithFastMathInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::VectorUnrollOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::InferTypeOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::InferIntRangeInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::arith::ArithIntegerOverflowFlagsInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::DialectInlinerInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::ConvertToLLVMPatternInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::bufferization::BufferDeallocationOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::bufferization::BufferizableOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::ValueBoundsOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::CopyOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::PromotableMemOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::DestructurableAccessorOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::PromotableAllocationOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::DestructurableAllocationOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::RegionBranchOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::RegionBranchTerminatorOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::ViewLikeOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::ShapedDimOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::SymbolUserOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OffsetSizeAndStrideOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::bufferization::AllocationOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::RuntimeVerifiableOpInterface)
Load new dialect in Context affine
Load new dialect in Context ub
ImplicitTypeIDRegistry::lookupOrInsert(mlir::ub::PoisonAttrInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::affine::AffineDmaStartOp)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::affine::AffineMapAccessInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::affine::AffineDmaWaitOp)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::LoopLikeOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::affine::AffineReadOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::affine::AffineWriteOpInterface)
Load new dialect in Context cf
ImplicitTypeIDRegistry::lookupOrInsert(mlir::BranchOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::ZeroRegions<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::memref::detail::GlobalOpGenericAdaptorBase::Properties)
Load new dialect in Context func
ImplicitTypeIDRegistry::lookupOrInsert(mlir::CallOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::CallableOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::FunctionOpInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::mesh::ShardingInterface)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::AutomaticAllocationScope<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::CallableOpInterface::Trait<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::FunctionOpInterface::Trait<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::VariadicResults<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::VariadicOperands<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::AttrSizedOperandSegments<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::ConditionallySpeculatable::Trait<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::HasRecursiveMemoryEffects<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::LoopLikeOpInterface::Trait<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::RegionBranchOpInterface::Trait<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::OneResult<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::AtLeastNOperands<1>::Impl<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::affine::AffineReadOpInterface::Trait<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::affine::AffineMapAccessInterface::Trait<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::MemRefsNormalizable<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::MemoryEffectOpInterface::Trait<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::OneOperand<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::InferIntRangeInterface::Trait<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::SameOperandsAndResultShape<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::CastOpInterface::Trait<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::VectorUnrollOpInterface::Trait<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::Elementwise<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::Scalarizable<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::Vectorizable<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::Tensorizable<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::NOperands<2>::Impl<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::IsCommutative<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::arith::ArithIntegerOverflowFlagsInterface::Trait<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::SameOperandsAndResultType<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::InferTypeOpInterface::Trait<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::AtLeastNOperands<2>::Impl<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::affine::AffineWriteOpInterface::Trait<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::IsTerminator<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::RegionBranchTerminatorOpInterface::Trait<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::ReturnLike<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::HasParent<mlir::func::FuncOp>::Impl<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::SymbolUserOpInterface::Trait<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::memref::detail::GetGlobalOpGenericAdaptorBase::Properties)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::memref::detail::AllocOpGenericAdaptorBase::Properties)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::CopyOpInterface::Trait<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::SameOperandsElementType<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::SameOperandsShape<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::ViewLikeOpInterface::Trait<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::CallOpInterface::Trait<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::func::detail::CallOpGenericAdaptorBase::Properties)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::detail::OpToOpPassAdaptor)
Checking for dependence at depth: 1 between:
ImplicitTypeIDRegistry::lookupOrInsert(mlir-asm-printermlir::detail::PreservedAnalyses::AllAnalysesType: Verifying operation: )
func.func
%0 = affine.load %arg0[%arg6, %arg8] : memref<104x104xi8, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
%0 = affine.load %arg0[%arg6, %arg8] : memref<104x104xi8, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 1 between:
mlir-asm-printer: Verifying operation: func.func
%0 = affine.load %arg0[%arg6, %arg8] : memref<104x104xi8, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
%1 = affine.load %arg1[%arg8, %arg7] : memref<104x104xi8, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 1 between:
mlir-asm-printer: Verifying operation: func.func
%0 = affine.load %arg0[%arg6, %arg8] : memref<104x104xi8, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
%2 = affine.load %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 1 between:
mlir-asm-printer: Verifying operation: func.func
%0 = affine.load %arg0[%arg6, %arg8] : memref<104x104xi8, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
affine.store %6, %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 1 between:
mlir-asm-printer: Verifying operation: func.func
%1 = affine.load %arg1[%arg8, %arg7] : memref<104x104xi8, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
%0 = affine.load %arg0[%arg6, %arg8] : memref<104x104xi8, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 1 between:
mlir-asm-printer: Verifying operation: func.func
%1 = affine.load %arg1[%arg8, %arg7] : memref<104x104xi8, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
%1 = affine.load %arg1[%arg8, %arg7] : memref<104x104xi8, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 1 between:
mlir-asm-printer: Verifying operation: func.func
%1 = affine.load %arg1[%arg8, %arg7] : memref<104x104xi8, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
%2 = affine.load %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 1 between:
mlir-asm-printer: Verifying operation: func.func
%1 = affine.load %arg1[%arg8, %arg7] : memref<104x104xi8, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
affine.store %6, %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 1 between:
mlir-asm-printer: Verifying operation: func.func
%2 = affine.load %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
%0 = affine.load %arg0[%arg6, %arg8] : memref<104x104xi8, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 1 between:
mlir-asm-printer: Verifying operation: func.func
%2 = affine.load %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
%1 = affine.load %arg1[%arg8, %arg7] : memref<104x104xi8, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 1 between:
mlir-asm-printer: Verifying operation: func.func
%2 = affine.load %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
%2 = affine.load %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 1 between:
mlir-asm-printer: Verifying operation: func.func
%2 = affine.load %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
affine.store %6, %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
FM input (eliminate pos 0):
Domain: 0, Range: 4, Symbols: 0, Locals: 6
37 constraints
 0	0	0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	0	0	-1	3	>= 0
 0	1	0	0	0	0	0	-8	0	0	0	>= 0
 0	-1	0	0	0	0	0	8	0	0	7	>= 0
 0	0	1	0	0	0	0	0	-8	0	0	>= 0
 0	0	-1	0	0	0	0	0	8	0	7	>= 0
 1	0	0	0	0	0	0	0	0	-26	0	>= 0
 -1	0	0	0	0	0	0	0	0	26	25	>= 0
 0	0	0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	1	0	0	0	0	0	0	>= 0
 0	0	0	0	-1	0	0	0	0	0	12	>= 0
 0	0	0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	1	0	0	0	0	0	>= 0
 0	0	0	0	0	-1	0	0	0	0	12	>= 0
 0	0	0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	0	1	0	0	0	0	>= 0
 0	0	0	0	0	0	-1	0	0	0	3	>= 0
 0	1	0	0	-8	0	0	0	0	0	0	>= 0
 0	-1	0	0	8	0	0	0	0	0	7	>= 0
 0	0	1	0	0	-8	0	0	0	0	0	>= 0
 0	0	-1	0	0	8	0	0	0	0	7	>= 0
 0	0	0	1	0	0	-26	0	0	0	0	>= 0
 0	0	0	-1	0	0	26	0	0	0	25	>= 0
 0	0	0	0	1	0	0	-1	0	0	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 3, Symbols: 0, Locals: 6
23 constraints
 0	0	0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	0	-1	3	>= 0
 1	0	0	0	0	0	-8	0	0	0	>= 0
 -1	0	0	0	0	0	8	0	0	7	>= 0
 0	1	0	0	0	0	0	-8	0	0	>= 0
 0	-1	0	0	0	0	0	8	0	7	>= 0
 0	0	0	1	0	0	0	0	0	0	>= 0
 0	0	0	-1	0	0	0	0	0	12	>= 0
 0	0	0	0	1	0	0	0	0	0	>= 0
 0	0	0	0	-1	0	0	0	0	12	>= 0
 0	0	0	0	0	1	0	0	0	0	>= 0
 0	0	0	0	0	-1	0	0	0	3	>= 0
 1	0	0	-8	0	0	0	0	0	0	>= 0
 -1	0	0	8	0	0	0	0	0	7	>= 0
 0	1	0	0	-8	0	0	0	0	0	>= 0
 0	-1	0	0	8	0	0	0	0	7	>= 0
 0	0	1	0	0	-26	0	0	0	0	>= 0
 0	0	-1	0	0	26	0	0	0	25	>= 0
 0	0	0	1	0	0	-1	0	0	-1	>= 0

FM input (eliminate pos 2):
Domain: 0, Range: 3, Symbols: 0, Locals: 6
23 constraints
 0	0	0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	0	-1	3	>= 0
 1	0	0	0	0	0	-8	0	0	0	>= 0
 -1	0	0	0	0	0	8	0	0	7	>= 0
 0	1	0	0	0	0	0	-8	0	0	>= 0
 0	-1	0	0	0	0	0	8	0	7	>= 0
 0	0	0	1	0	0	0	0	0	0	>= 0
 0	0	0	-1	0	0	0	0	0	12	>= 0
 0	0	0	0	1	0	0	0	0	0	>= 0
 0	0	0	0	-1	0	0	0	0	12	>= 0
 0	0	0	0	0	1	0	0	0	0	>= 0
 0	0	0	0	0	-1	0	0	0	3	>= 0
 1	0	0	-8	0	0	0	0	0	0	>= 0
 -1	0	0	8	0	0	0	0	0	7	>= 0
 0	1	0	0	-8	0	0	0	0	0	>= 0
 0	-1	0	0	8	0	0	0	0	7	>= 0
 0	0	1	0	0	-26	0	0	0	0	>= 0
 0	0	-1	0	0	26	0	0	0	25	>= 0
 0	0	0	1	0	0	-1	0	0	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 2, Symbols: 0, Locals: 6
21 constraints
 0	0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	-1	3	>= 0
 1	0	0	0	0	-8	0	0	0	>= 0
 -1	0	0	0	0	8	0	0	7	>= 0
 0	1	0	0	0	0	-8	0	0	>= 0
 0	-1	0	0	0	0	8	0	7	>= 0
 0	0	1	0	0	0	0	0	0	>= 0
 0	0	-1	0	0	0	0	0	12	>= 0
 0	0	0	1	0	0	0	0	0	>= 0
 0	0	0	-1	0	0	0	0	12	>= 0
 0	0	0	0	1	0	0	0	0	>= 0
 0	0	0	0	-1	0	0	0	3	>= 0
 1	0	-8	0	0	0	0	0	0	>= 0
 -1	0	8	0	0	0	0	0	7	>= 0
 0	1	0	-8	0	0	0	0	0	>= 0
 0	-1	0	8	0	0	0	0	7	>= 0
 0	0	1	0	0	-1	0	0	-1	>= 0

FM input (eliminate pos 4):
Domain: 0, Range: 2, Symbols: 0, Locals: 6
21 constraints
 0	0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	-1	3	>= 0
 1	0	0	0	0	-8	0	0	0	>= 0
 -1	0	0	0	0	8	0	0	7	>= 0
 0	1	0	0	0	0	-8	0	0	>= 0
 0	-1	0	0	0	0	8	0	7	>= 0
 0	0	1	0	0	0	0	0	0	>= 0
 0	0	-1	0	0	0	0	0	12	>= 0
 0	0	0	1	0	0	0	0	0	>= 0
 0	0	0	-1	0	0	0	0	12	>= 0
 0	0	0	0	1	0	0	0	0	>= 0
 0	0	0	0	-1	0	0	0	3	>= 0
 1	0	-8	0	0	0	0	0	0	>= 0
 -1	0	8	0	0	0	0	0	7	>= 0
 0	1	0	-8	0	0	0	0	0	>= 0
 0	-1	0	8	0	0	0	0	7	>= 0
 0	0	1	0	0	-1	0	0	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 2, Symbols: 0, Locals: 5
19 constraints
 0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	-1	3	>= 0
 1	0	0	0	-8	0	0	0	>= 0
 -1	0	0	0	8	0	0	7	>= 0
 0	1	0	0	0	-8	0	0	>= 0
 0	-1	0	0	0	8	0	7	>= 0
 0	0	1	0	0	0	0	0	>= 0
 0	0	-1	0	0	0	0	12	>= 0
 0	0	0	1	0	0	0	0	>= 0
 0	0	0	-1	0	0	0	12	>= 0
 1	0	-8	0	0	0	0	0	>= 0
 -1	0	8	0	0	0	0	7	>= 0
 0	1	0	-8	0	0	0	0	>= 0
 0	-1	0	8	0	0	0	7	>= 0
 0	0	1	0	-1	0	0	-1	>= 0

FM input (eliminate pos 6):
Domain: 0, Range: 2, Symbols: 0, Locals: 5
19 constraints
 0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	-1	3	>= 0
 1	0	0	0	-8	0	0	0	>= 0
 -1	0	0	0	8	0	0	7	>= 0
 0	1	0	0	0	-8	0	0	>= 0
 0	-1	0	0	0	8	0	7	>= 0
 0	0	1	0	0	0	0	0	>= 0
 0	0	-1	0	0	0	0	12	>= 0
 0	0	0	1	0	0	0	0	>= 0
 0	0	0	-1	0	0	0	12	>= 0
 1	0	-8	0	0	0	0	0	>= 0
 -1	0	8	0	0	0	0	7	>= 0
 0	1	0	-8	0	0	0	0	>= 0
 0	-1	0	8	0	0	0	7	>= 0
 0	0	1	0	-1	0	0	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 2, Symbols: 0, Locals: 4
17 constraints
 0	0	0	0	1	0	0	>= 0
 0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	-1	12	>= 0
 1	0	0	0	-8	0	0	>= 0
 -1	0	0	0	8	0	7	>= 0
 0	1	0	0	0	-8	0	>= 0
 0	-1	0	0	0	8	7	>= 0
 0	0	1	0	0	0	0	>= 0
 0	0	-1	0	0	0	12	>= 0
 0	0	0	1	0	0	0	>= 0
 0	0	0	-1	0	0	12	>= 0
 1	0	-8	0	0	0	0	>= 0
 -1	0	8	0	0	0	7	>= 0
 0	1	0	-8	0	0	0	>= 0
 0	-1	0	8	0	0	7	>= 0
 0	0	1	0	-1	0	-1	>= 0

FM input (eliminate pos 0):
Domain: 0, Range: 2, Symbols: 0, Locals: 4
17 constraints
 0	0	0	0	1	0	0	>= 0
 0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	-1	12	>= 0
 1	0	0	0	-8	0	0	>= 0
 -1	0	0	0	8	0	7	>= 0
 0	1	0	0	0	-8	0	>= 0
 0	-1	0	0	0	8	7	>= 0
 0	0	1	0	0	0	0	>= 0
 0	0	-1	0	0	0	12	>= 0
 0	0	0	1	0	0	0	>= 0
 0	0	0	-1	0	0	12	>= 0
 1	0	-8	0	0	0	0	>= 0
 -1	0	8	0	0	0	7	>= 0
 0	1	0	-8	0	0	0	>= 0
 0	-1	0	8	0	0	7	>= 0
 0	0	1	0	-1	0	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 1, Symbols: 0, Locals: 4
14 constraints
 0	-1	0	1	0	0	>= 0
 0	0	0	1	0	0	>= 0
 0	0	0	-1	0	12	>= 0
 0	0	0	0	1	0	>= 0
 0	0	0	0	-1	12	>= 0
 1	0	0	0	-8	0	>= 0
 -1	0	0	0	8	7	>= 0
 0	1	0	0	0	0	>= 0
 0	-1	0	0	0	12	>= 0
 0	0	1	0	0	0	>= 0
 0	0	-1	0	0	12	>= 0
 1	0	-8	0	0	0	>= 0
 -1	0	8	0	0	7	>= 0
 0	1	0	-1	0	-1	>= 0

FM input (eliminate pos 0):
Domain: 0, Range: 1, Symbols: 0, Locals: 4
14 constraints
 0	-1	0	1	0	0	>= 0
 0	0	0	1	0	0	>= 0
 0	0	0	-1	0	12	>= 0
 0	0	0	0	1	0	>= 0
 0	0	0	0	-1	12	>= 0
 1	0	0	0	-8	0	>= 0
 -1	0	0	0	8	7	>= 0
 0	1	0	0	0	0	>= 0
 0	-1	0	0	0	12	>= 0
 0	0	1	0	0	0	>= 0
 0	0	-1	0	0	12	>= 0
 1	0	-8	0	0	0	>= 0
 -1	0	8	0	0	7	>= 0
 0	1	0	-1	0	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 0, Symbols: 0, Locals: 4
12 constraints
 0	-1	0	1	0	>= 0
 0	1	0	-1	0	>= 0
 -1	0	1	0	0	>= 0
 0	0	1	0	0	>= 0
 0	0	-1	0	12	>= 0
 0	0	0	1	0	>= 0
 0	0	0	-1	12	>= 0
 1	0	0	0	0	>= 0
 -1	0	0	0	12	>= 0
 0	1	0	0	0	>= 0
 0	-1	0	0	12	>= 0
 1	0	-1	0	-1	>= 0

FM input (eliminate pos 0):
Domain: 0, Range: 0, Symbols: 0, Locals: 4
12 constraints
 0	-1	0	1	0	>= 0
 0	1	0	-1	0	>= 0
 -1	0	1	0	0	>= 0
 0	0	1	0	0	>= 0
 0	0	-1	0	12	>= 0
 0	0	0	1	0	>= 0
 0	0	0	-1	12	>= 0
 1	0	0	0	0	>= 0
 -1	0	0	0	12	>= 0
 0	1	0	0	0	>= 0
 0	-1	0	0	12	>= 0
 1	0	-1	0	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 0, Symbols: 0, Locals: 3
9 constraints
 0	1	0	0	>= 0
 0	0	0	-1	>= 0
 0	-1	0	11	>= 0
 -1	0	1	0	>= 0
 1	0	-1	0	>= 0
 0	0	1	0	>= 0
 0	0	-1	12	>= 0
 1	0	0	0	>= 0
 -1	0	0	12	>= 0

Checking for dependence at depth: 1 between:
mlir-asm-printer: Verifying operation: func.func
affine.store %6, %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
%0 = affine.load %arg0[%arg6, %arg8] : memref<104x104xi8, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 1 between:
mlir-asm-printer: Verifying operation: func.func
affine.store %6, %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
%1 = affine.load %arg1[%arg8, %arg7] : memref<104x104xi8, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 1 between:
mlir-asm-printer: Verifying operation: func.func
affine.store %6, %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
%2 = affine.load %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
FM input (eliminate pos 0):
Domain: 0, Range: 4, Symbols: 0, Locals: 6
37 constraints
 0	0	0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	0	0	-1	3	>= 0
 0	1	0	0	0	0	0	-8	0	0	0	>= 0
 0	-1	0	0	0	0	0	8	0	0	7	>= 0
 0	0	1	0	0	0	0	0	-8	0	0	>= 0
 0	0	-1	0	0	0	0	0	8	0	7	>= 0
 1	0	0	0	0	0	0	0	0	-26	0	>= 0
 -1	0	0	0	0	0	0	0	0	26	25	>= 0
 0	0	0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	1	0	0	0	0	0	0	>= 0
 0	0	0	0	-1	0	0	0	0	0	12	>= 0
 0	0	0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	1	0	0	0	0	0	>= 0
 0	0	0	0	0	-1	0	0	0	0	12	>= 0
 0	0	0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	0	1	0	0	0	0	>= 0
 0	0	0	0	0	0	-1	0	0	0	3	>= 0
 0	1	0	0	-8	0	0	0	0	0	0	>= 0
 0	-1	0	0	8	0	0	0	0	0	7	>= 0
 0	0	1	0	0	-8	0	0	0	0	0	>= 0
 0	0	-1	0	0	8	0	0	0	0	7	>= 0
 0	0	0	1	0	0	-26	0	0	0	0	>= 0
 0	0	0	-1	0	0	26	0	0	0	25	>= 0
 0	0	0	0	1	0	0	-1	0	0	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 3, Symbols: 0, Locals: 6
23 constraints
 0	0	0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	0	-1	3	>= 0
 1	0	0	0	0	0	-8	0	0	0	>= 0
 -1	0	0	0	0	0	8	0	0	7	>= 0
 0	1	0	0	0	0	0	-8	0	0	>= 0
 0	-1	0	0	0	0	0	8	0	7	>= 0
 0	0	0	1	0	0	0	0	0	0	>= 0
 0	0	0	-1	0	0	0	0	0	12	>= 0
 0	0	0	0	1	0	0	0	0	0	>= 0
 0	0	0	0	-1	0	0	0	0	12	>= 0
 0	0	0	0	0	1	0	0	0	0	>= 0
 0	0	0	0	0	-1	0	0	0	3	>= 0
 1	0	0	-8	0	0	0	0	0	0	>= 0
 -1	0	0	8	0	0	0	0	0	7	>= 0
 0	1	0	0	-8	0	0	0	0	0	>= 0
 0	-1	0	0	8	0	0	0	0	7	>= 0
 0	0	1	0	0	-26	0	0	0	0	>= 0
 0	0	-1	0	0	26	0	0	0	25	>= 0
 0	0	0	1	0	0	-1	0	0	-1	>= 0

FM input (eliminate pos 2):
Domain: 0, Range: 3, Symbols: 0, Locals: 6
23 constraints
 0	0	0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	0	-1	3	>= 0
 1	0	0	0	0	0	-8	0	0	0	>= 0
 -1	0	0	0	0	0	8	0	0	7	>= 0
 0	1	0	0	0	0	0	-8	0	0	>= 0
 0	-1	0	0	0	0	0	8	0	7	>= 0
 0	0	0	1	0	0	0	0	0	0	>= 0
 0	0	0	-1	0	0	0	0	0	12	>= 0
 0	0	0	0	1	0	0	0	0	0	>= 0
 0	0	0	0	-1	0	0	0	0	12	>= 0
 0	0	0	0	0	1	0	0	0	0	>= 0
 0	0	0	0	0	-1	0	0	0	3	>= 0
 1	0	0	-8	0	0	0	0	0	0	>= 0
 -1	0	0	8	0	0	0	0	0	7	>= 0
 0	1	0	0	-8	0	0	0	0	0	>= 0
 0	-1	0	0	8	0	0	0	0	7	>= 0
 0	0	1	0	0	-26	0	0	0	0	>= 0
 0	0	-1	0	0	26	0	0	0	25	>= 0
 0	0	0	1	0	0	-1	0	0	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 2, Symbols: 0, Locals: 6
21 constraints
 0	0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	-1	3	>= 0
 1	0	0	0	0	-8	0	0	0	>= 0
 -1	0	0	0	0	8	0	0	7	>= 0
 0	1	0	0	0	0	-8	0	0	>= 0
 0	-1	0	0	0	0	8	0	7	>= 0
 0	0	1	0	0	0	0	0	0	>= 0
 0	0	-1	0	0	0	0	0	12	>= 0
 0	0	0	1	0	0	0	0	0	>= 0
 0	0	0	-1	0	0	0	0	12	>= 0
 0	0	0	0	1	0	0	0	0	>= 0
 0	0	0	0	-1	0	0	0	3	>= 0
 1	0	-8	0	0	0	0	0	0	>= 0
 -1	0	8	0	0	0	0	0	7	>= 0
 0	1	0	-8	0	0	0	0	0	>= 0
 0	-1	0	8	0	0	0	0	7	>= 0
 0	0	1	0	0	-1	0	0	-1	>= 0

FM input (eliminate pos 4):
Domain: 0, Range: 2, Symbols: 0, Locals: 6
21 constraints
 0	0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	-1	3	>= 0
 1	0	0	0	0	-8	0	0	0	>= 0
 -1	0	0	0	0	8	0	0	7	>= 0
 0	1	0	0	0	0	-8	0	0	>= 0
 0	-1	0	0	0	0	8	0	7	>= 0
 0	0	1	0	0	0	0	0	0	>= 0
 0	0	-1	0	0	0	0	0	12	>= 0
 0	0	0	1	0	0	0	0	0	>= 0
 0	0	0	-1	0	0	0	0	12	>= 0
 0	0	0	0	1	0	0	0	0	>= 0
 0	0	0	0	-1	0	0	0	3	>= 0
 1	0	-8	0	0	0	0	0	0	>= 0
 -1	0	8	0	0	0	0	0	7	>= 0
 0	1	0	-8	0	0	0	0	0	>= 0
 0	-1	0	8	0	0	0	0	7	>= 0
 0	0	1	0	0	-1	0	0	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 2, Symbols: 0, Locals: 5
19 constraints
 0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	-1	3	>= 0
 1	0	0	0	-8	0	0	0	>= 0
 -1	0	0	0	8	0	0	7	>= 0
 0	1	0	0	0	-8	0	0	>= 0
 0	-1	0	0	0	8	0	7	>= 0
 0	0	1	0	0	0	0	0	>= 0
 0	0	-1	0	0	0	0	12	>= 0
 0	0	0	1	0	0	0	0	>= 0
 0	0	0	-1	0	0	0	12	>= 0
 1	0	-8	0	0	0	0	0	>= 0
 -1	0	8	0	0	0	0	7	>= 0
 0	1	0	-8	0	0	0	0	>= 0
 0	-1	0	8	0	0	0	7	>= 0
 0	0	1	0	-1	0	0	-1	>= 0

FM input (eliminate pos 6):
Domain: 0, Range: 2, Symbols: 0, Locals: 5
19 constraints
 0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	-1	3	>= 0
 1	0	0	0	-8	0	0	0	>= 0
 -1	0	0	0	8	0	0	7	>= 0
 0	1	0	0	0	-8	0	0	>= 0
 0	-1	0	0	0	8	0	7	>= 0
 0	0	1	0	0	0	0	0	>= 0
 0	0	-1	0	0	0	0	12	>= 0
 0	0	0	1	0	0	0	0	>= 0
 0	0	0	-1	0	0	0	12	>= 0
 1	0	-8	0	0	0	0	0	>= 0
 -1	0	8	0	0	0	0	7	>= 0
 0	1	0	-8	0	0	0	0	>= 0
 0	-1	0	8	0	0	0	7	>= 0
 0	0	1	0	-1	0	0	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 2, Symbols: 0, Locals: 4
17 constraints
 0	0	0	0	1	0	0	>= 0
 0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	-1	12	>= 0
 1	0	0	0	-8	0	0	>= 0
 -1	0	0	0	8	0	7	>= 0
 0	1	0	0	0	-8	0	>= 0
 0	-1	0	0	0	8	7	>= 0
 0	0	1	0	0	0	0	>= 0
 0	0	-1	0	0	0	12	>= 0
 0	0	0	1	0	0	0	>= 0
 0	0	0	-1	0	0	12	>= 0
 1	0	-8	0	0	0	0	>= 0
 -1	0	8	0	0	0	7	>= 0
 0	1	0	-8	0	0	0	>= 0
 0	-1	0	8	0	0	7	>= 0
 0	0	1	0	-1	0	-1	>= 0

FM input (eliminate pos 0):
Domain: 0, Range: 2, Symbols: 0, Locals: 4
17 constraints
 0	0	0	0	1	0	0	>= 0
 0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	-1	12	>= 0
 1	0	0	0	-8	0	0	>= 0
 -1	0	0	0	8	0	7	>= 0
 0	1	0	0	0	-8	0	>= 0
 0	-1	0	0	0	8	7	>= 0
 0	0	1	0	0	0	0	>= 0
 0	0	-1	0	0	0	12	>= 0
 0	0	0	1	0	0	0	>= 0
 0	0	0	-1	0	0	12	>= 0
 1	0	-8	0	0	0	0	>= 0
 -1	0	8	0	0	0	7	>= 0
 0	1	0	-8	0	0	0	>= 0
 0	-1	0	8	0	0	7	>= 0
 0	0	1	0	-1	0	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 1, Symbols: 0, Locals: 4
14 constraints
 0	-1	0	1	0	0	>= 0
 0	0	0	1	0	0	>= 0
 0	0	0	-1	0	12	>= 0
 0	0	0	0	1	0	>= 0
 0	0	0	0	-1	12	>= 0
 1	0	0	0	-8	0	>= 0
 -1	0	0	0	8	7	>= 0
 0	1	0	0	0	0	>= 0
 0	-1	0	0	0	12	>= 0
 0	0	1	0	0	0	>= 0
 0	0	-1	0	0	12	>= 0
 1	0	-8	0	0	0	>= 0
 -1	0	8	0	0	7	>= 0
 0	1	0	-1	0	-1	>= 0

FM input (eliminate pos 0):
Domain: 0, Range: 1, Symbols: 0, Locals: 4
14 constraints
 0	-1	0	1	0	0	>= 0
 0	0	0	1	0	0	>= 0
 0	0	0	-1	0	12	>= 0
 0	0	0	0	1	0	>= 0
 0	0	0	0	-1	12	>= 0
 1	0	0	0	-8	0	>= 0
 -1	0	0	0	8	7	>= 0
 0	1	0	0	0	0	>= 0
 0	-1	0	0	0	12	>= 0
 0	0	1	0	0	0	>= 0
 0	0	-1	0	0	12	>= 0
 1	0	-8	0	0	0	>= 0
 -1	0	8	0	0	7	>= 0
 0	1	0	-1	0	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 0, Symbols: 0, Locals: 4
12 constraints
 0	-1	0	1	0	>= 0
 0	1	0	-1	0	>= 0
 -1	0	1	0	0	>= 0
 0	0	1	0	0	>= 0
 0	0	-1	0	12	>= 0
 0	0	0	1	0	>= 0
 0	0	0	-1	12	>= 0
 1	0	0	0	0	>= 0
 -1	0	0	0	12	>= 0
 0	1	0	0	0	>= 0
 0	-1	0	0	12	>= 0
 1	0	-1	0	-1	>= 0

FM input (eliminate pos 0):
Domain: 0, Range: 0, Symbols: 0, Locals: 4
12 constraints
 0	-1	0	1	0	>= 0
 0	1	0	-1	0	>= 0
 -1	0	1	0	0	>= 0
 0	0	1	0	0	>= 0
 0	0	-1	0	12	>= 0
 0	0	0	1	0	>= 0
 0	0	0	-1	12	>= 0
 1	0	0	0	0	>= 0
 -1	0	0	0	12	>= 0
 0	1	0	0	0	>= 0
 0	-1	0	0	12	>= 0
 1	0	-1	0	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 0, Symbols: 0, Locals: 3
9 constraints
 0	1	0	0	>= 0
 0	0	0	-1	>= 0
 0	-1	0	11	>= 0
 -1	0	1	0	>= 0
 1	0	-1	0	>= 0
 0	0	1	0	>= 0
 0	0	-1	12	>= 0
 1	0	0	0	>= 0
 -1	0	0	12	>= 0

Checking for dependence at depth: 1 between:
mlir-asm-printer: Verifying operation: func.func
affine.store %6, %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
affine.store %6, %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
FM input (eliminate pos 0):
Domain: 0, Range: 4, Symbols: 0, Locals: 6
37 constraints
 0	0	0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	0	0	-1	3	>= 0
 0	1	0	0	0	0	0	-8	0	0	0	>= 0
 0	-1	0	0	0	0	0	8	0	0	7	>= 0
 0	0	1	0	0	0	0	0	-8	0	0	>= 0
 0	0	-1	0	0	0	0	0	8	0	7	>= 0
 1	0	0	0	0	0	0	0	0	-26	0	>= 0
 -1	0	0	0	0	0	0	0	0	26	25	>= 0
 0	0	0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	1	0	0	0	0	0	0	>= 0
 0	0	0	0	-1	0	0	0	0	0	12	>= 0
 0	0	0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	1	0	0	0	0	0	>= 0
 0	0	0	0	0	-1	0	0	0	0	12	>= 0
 0	0	0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	0	1	0	0	0	0	>= 0
 0	0	0	0	0	0	-1	0	0	0	3	>= 0
 0	1	0	0	-8	0	0	0	0	0	0	>= 0
 0	-1	0	0	8	0	0	0	0	0	7	>= 0
 0	0	1	0	0	-8	0	0	0	0	0	>= 0
 0	0	-1	0	0	8	0	0	0	0	7	>= 0
 0	0	0	1	0	0	-26	0	0	0	0	>= 0
 0	0	0	-1	0	0	26	0	0	0	25	>= 0
 0	0	0	0	1	0	0	-1	0	0	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 3, Symbols: 0, Locals: 6
23 constraints
 0	0	0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	0	-1	3	>= 0
 1	0	0	0	0	0	-8	0	0	0	>= 0
 -1	0	0	0	0	0	8	0	0	7	>= 0
 0	1	0	0	0	0	0	-8	0	0	>= 0
 0	-1	0	0	0	0	0	8	0	7	>= 0
 0	0	0	1	0	0	0	0	0	0	>= 0
 0	0	0	-1	0	0	0	0	0	12	>= 0
 0	0	0	0	1	0	0	0	0	0	>= 0
 0	0	0	0	-1	0	0	0	0	12	>= 0
 0	0	0	0	0	1	0	0	0	0	>= 0
 0	0	0	0	0	-1	0	0	0	3	>= 0
 1	0	0	-8	0	0	0	0	0	0	>= 0
 -1	0	0	8	0	0	0	0	0	7	>= 0
 0	1	0	0	-8	0	0	0	0	0	>= 0
 0	-1	0	0	8	0	0	0	0	7	>= 0
 0	0	1	0	0	-26	0	0	0	0	>= 0
 0	0	-1	0	0	26	0	0	0	25	>= 0
 0	0	0	1	0	0	-1	0	0	-1	>= 0

FM input (eliminate pos 2):
Domain: 0, Range: 3, Symbols: 0, Locals: 6
23 constraints
 0	0	0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	0	-1	3	>= 0
 1	0	0	0	0	0	-8	0	0	0	>= 0
 -1	0	0	0	0	0	8	0	0	7	>= 0
 0	1	0	0	0	0	0	-8	0	0	>= 0
 0	-1	0	0	0	0	0	8	0	7	>= 0
 0	0	0	1	0	0	0	0	0	0	>= 0
 0	0	0	-1	0	0	0	0	0	12	>= 0
 0	0	0	0	1	0	0	0	0	0	>= 0
 0	0	0	0	-1	0	0	0	0	12	>= 0
 0	0	0	0	0	1	0	0	0	0	>= 0
 0	0	0	0	0	-1	0	0	0	3	>= 0
 1	0	0	-8	0	0	0	0	0	0	>= 0
 -1	0	0	8	0	0	0	0	0	7	>= 0
 0	1	0	0	-8	0	0	0	0	0	>= 0
 0	-1	0	0	8	0	0	0	0	7	>= 0
 0	0	1	0	0	-26	0	0	0	0	>= 0
 0	0	-1	0	0	26	0	0	0	25	>= 0
 0	0	0	1	0	0	-1	0	0	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 2, Symbols: 0, Locals: 6
21 constraints
 0	0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	-1	3	>= 0
 1	0	0	0	0	-8	0	0	0	>= 0
 -1	0	0	0	0	8	0	0	7	>= 0
 0	1	0	0	0	0	-8	0	0	>= 0
 0	-1	0	0	0	0	8	0	7	>= 0
 0	0	1	0	0	0	0	0	0	>= 0
 0	0	-1	0	0	0	0	0	12	>= 0
 0	0	0	1	0	0	0	0	0	>= 0
 0	0	0	-1	0	0	0	0	12	>= 0
 0	0	0	0	1	0	0	0	0	>= 0
 0	0	0	0	-1	0	0	0	3	>= 0
 1	0	-8	0	0	0	0	0	0	>= 0
 -1	0	8	0	0	0	0	0	7	>= 0
 0	1	0	-8	0	0	0	0	0	>= 0
 0	-1	0	8	0	0	0	0	7	>= 0
 0	0	1	0	0	-1	0	0	-1	>= 0

FM input (eliminate pos 4):
Domain: 0, Range: 2, Symbols: 0, Locals: 6
21 constraints
 0	0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	-1	3	>= 0
 1	0	0	0	0	-8	0	0	0	>= 0
 -1	0	0	0	0	8	0	0	7	>= 0
 0	1	0	0	0	0	-8	0	0	>= 0
 0	-1	0	0	0	0	8	0	7	>= 0
 0	0	1	0	0	0	0	0	0	>= 0
 0	0	-1	0	0	0	0	0	12	>= 0
 0	0	0	1	0	0	0	0	0	>= 0
 0	0	0	-1	0	0	0	0	12	>= 0
 0	0	0	0	1	0	0	0	0	>= 0
 0	0	0	0	-1	0	0	0	3	>= 0
 1	0	-8	0	0	0	0	0	0	>= 0
 -1	0	8	0	0	0	0	0	7	>= 0
 0	1	0	-8	0	0	0	0	0	>= 0
 0	-1	0	8	0	0	0	0	7	>= 0
 0	0	1	0	0	-1	0	0	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 2, Symbols: 0, Locals: 5
19 constraints
 0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	-1	3	>= 0
 1	0	0	0	-8	0	0	0	>= 0
 -1	0	0	0	8	0	0	7	>= 0
 0	1	0	0	0	-8	0	0	>= 0
 0	-1	0	0	0	8	0	7	>= 0
 0	0	1	0	0	0	0	0	>= 0
 0	0	-1	0	0	0	0	12	>= 0
 0	0	0	1	0	0	0	0	>= 0
 0	0	0	-1	0	0	0	12	>= 0
 1	0	-8	0	0	0	0	0	>= 0
 -1	0	8	0	0	0	0	7	>= 0
 0	1	0	-8	0	0	0	0	>= 0
 0	-1	0	8	0	0	0	7	>= 0
 0	0	1	0	-1	0	0	-1	>= 0

FM input (eliminate pos 6):
Domain: 0, Range: 2, Symbols: 0, Locals: 5
19 constraints
 0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	-1	3	>= 0
 1	0	0	0	-8	0	0	0	>= 0
 -1	0	0	0	8	0	0	7	>= 0
 0	1	0	0	0	-8	0	0	>= 0
 0	-1	0	0	0	8	0	7	>= 0
 0	0	1	0	0	0	0	0	>= 0
 0	0	-1	0	0	0	0	12	>= 0
 0	0	0	1	0	0	0	0	>= 0
 0	0	0	-1	0	0	0	12	>= 0
 1	0	-8	0	0	0	0	0	>= 0
 -1	0	8	0	0	0	0	7	>= 0
 0	1	0	-8	0	0	0	0	>= 0
 0	-1	0	8	0	0	0	7	>= 0
 0	0	1	0	-1	0	0	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 2, Symbols: 0, Locals: 4
17 constraints
 0	0	0	0	1	0	0	>= 0
 0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	-1	12	>= 0
 1	0	0	0	-8	0	0	>= 0
 -1	0	0	0	8	0	7	>= 0
 0	1	0	0	0	-8	0	>= 0
 0	-1	0	0	0	8	7	>= 0
 0	0	1	0	0	0	0	>= 0
 0	0	-1	0	0	0	12	>= 0
 0	0	0	1	0	0	0	>= 0
 0	0	0	-1	0	0	12	>= 0
 1	0	-8	0	0	0	0	>= 0
 -1	0	8	0	0	0	7	>= 0
 0	1	0	-8	0	0	0	>= 0
 0	-1	0	8	0	0	7	>= 0
 0	0	1	0	-1	0	-1	>= 0

FM input (eliminate pos 0):
Domain: 0, Range: 2, Symbols: 0, Locals: 4
17 constraints
 0	0	0	0	1	0	0	>= 0
 0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	-1	12	>= 0
 1	0	0	0	-8	0	0	>= 0
 -1	0	0	0	8	0	7	>= 0
 0	1	0	0	0	-8	0	>= 0
 0	-1	0	0	0	8	7	>= 0
 0	0	1	0	0	0	0	>= 0
 0	0	-1	0	0	0	12	>= 0
 0	0	0	1	0	0	0	>= 0
 0	0	0	-1	0	0	12	>= 0
 1	0	-8	0	0	0	0	>= 0
 -1	0	8	0	0	0	7	>= 0
 0	1	0	-8	0	0	0	>= 0
 0	-1	0	8	0	0	7	>= 0
 0	0	1	0	-1	0	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 1, Symbols: 0, Locals: 4
14 constraints
 0	-1	0	1	0	0	>= 0
 0	0	0	1	0	0	>= 0
 0	0	0	-1	0	12	>= 0
 0	0	0	0	1	0	>= 0
 0	0	0	0	-1	12	>= 0
 1	0	0	0	-8	0	>= 0
 -1	0	0	0	8	7	>= 0
 0	1	0	0	0	0	>= 0
 0	-1	0	0	0	12	>= 0
 0	0	1	0	0	0	>= 0
 0	0	-1	0	0	12	>= 0
 1	0	-8	0	0	0	>= 0
 -1	0	8	0	0	7	>= 0
 0	1	0	-1	0	-1	>= 0

FM input (eliminate pos 0):
Domain: 0, Range: 1, Symbols: 0, Locals: 4
14 constraints
 0	-1	0	1	0	0	>= 0
 0	0	0	1	0	0	>= 0
 0	0	0	-1	0	12	>= 0
 0	0	0	0	1	0	>= 0
 0	0	0	0	-1	12	>= 0
 1	0	0	0	-8	0	>= 0
 -1	0	0	0	8	7	>= 0
 0	1	0	0	0	0	>= 0
 0	-1	0	0	0	12	>= 0
 0	0	1	0	0	0	>= 0
 0	0	-1	0	0	12	>= 0
 1	0	-8	0	0	0	>= 0
 -1	0	8	0	0	7	>= 0
 0	1	0	-1	0	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 0, Symbols: 0, Locals: 4
12 constraints
 0	-1	0	1	0	>= 0
 0	1	0	-1	0	>= 0
 -1	0	1	0	0	>= 0
 0	0	1	0	0	>= 0
 0	0	-1	0	12	>= 0
 0	0	0	1	0	>= 0
 0	0	0	-1	12	>= 0
 1	0	0	0	0	>= 0
 -1	0	0	0	12	>= 0
 0	1	0	0	0	>= 0
 0	-1	0	0	12	>= 0
 1	0	-1	0	-1	>= 0

FM input (eliminate pos 0):
Domain: 0, Range: 0, Symbols: 0, Locals: 4
12 constraints
 0	-1	0	1	0	>= 0
 0	1	0	-1	0	>= 0
 -1	0	1	0	0	>= 0
 0	0	1	0	0	>= 0
 0	0	-1	0	12	>= 0
 0	0	0	1	0	>= 0
 0	0	0	-1	12	>= 0
 1	0	0	0	0	>= 0
 -1	0	0	0	12	>= 0
 0	1	0	0	0	>= 0
 0	-1	0	0	12	>= 0
 1	0	-1	0	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 0, Symbols: 0, Locals: 3
9 constraints
 0	1	0	0	>= 0
 0	0	0	-1	>= 0
 0	-1	0	11	>= 0
 -1	0	1	0	>= 0
 1	0	-1	0	>= 0
 0	0	1	0	>= 0
 0	0	-1	12	>= 0
 1	0	0	0	>= 0
 -1	0	0	12	>= 0

Checking for dependence at depth: 2 between:
mlir-asm-printer: Verifying operation: func.func
%0 = affine.load %arg0[%arg6, %arg8] : memref<104x104xi8, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
%0 = affine.load %arg0[%arg6, %arg8] : memref<104x104xi8, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 2 between:
mlir-asm-printer: Verifying operation: func.func
%0 = affine.load %arg0[%arg6, %arg8] : memref<104x104xi8, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
%1 = affine.load %arg1[%arg8, %arg7] : memref<104x104xi8, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 2 between:
mlir-asm-printer: Verifying operation: func.func
%0 = affine.load %arg0[%arg6, %arg8] : memref<104x104xi8, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
%2 = affine.load %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 2 between:
mlir-asm-printer: Verifying operation: func.func
%0 = affine.load %arg0[%arg6, %arg8] : memref<104x104xi8, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
affine.store %6, %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 2 between:
mlir-asm-printer: Verifying operation: func.func
%1 = affine.load %arg1[%arg8, %arg7] : memref<104x104xi8, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
%0 = affine.load %arg0[%arg6, %arg8] : memref<104x104xi8, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 2 between:
mlir-asm-printer: Verifying operation: func.func
%1 = affine.load %arg1[%arg8, %arg7] : memref<104x104xi8, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
%1 = affine.load %arg1[%arg8, %arg7] : memref<104x104xi8, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 2 between:
mlir-asm-printer: Verifying operation: func.func
%1 = affine.load %arg1[%arg8, %arg7] : memref<104x104xi8, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
%2 = affine.load %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 2 between:
mlir-asm-printer: Verifying operation: func.func
%1 = affine.load %arg1[%arg8, %arg7] : memref<104x104xi8, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
affine.store %6, %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 2 between:
mlir-asm-printer: Verifying operation: func.func
%2 = affine.load %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
%0 = affine.load %arg0[%arg6, %arg8] : memref<104x104xi8, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 2 between:
mlir-asm-printer: Verifying operation: func.func
%2 = affine.load %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
%1 = affine.load %arg1[%arg8, %arg7] : memref<104x104xi8, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 2 between:
mlir-asm-printer: Verifying operation: func.func
%2 = affine.load %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
%2 = affine.load %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 2 between:
mlir-asm-printer: Verifying operation: func.func
%2 = affine.load %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
affine.store %6, %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
FM input (eliminate pos 0):
Domain: 0, Range: 4, Symbols: 0, Locals: 5
37 constraints
 0	0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	0	-1	3	>= 0
 0	1	0	0	0	0	-8	0	0	0	>= 0
 0	-1	0	0	0	0	8	0	0	7	>= 0
 0	0	1	0	0	0	0	-8	0	0	>= 0
 0	0	-1	0	0	0	0	8	0	7	>= 0
 1	0	0	0	0	0	0	0	-26	0	>= 0
 -1	0	0	0	0	0	0	0	26	25	>= 0
 0	0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	1	0	0	0	0	0	>= 0
 0	0	0	0	-1	0	0	0	0	12	>= 0
 0	0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	1	0	0	0	0	>= 0
 0	0	0	0	0	-1	0	0	0	3	>= 0
 0	1	0	0	0	0	-8	0	0	0	>= 0
 0	-1	0	0	0	0	8	0	0	7	>= 0
 0	0	1	0	-8	0	0	0	0	0	>= 0
 0	0	-1	0	8	0	0	0	0	7	>= 0
 0	0	0	1	0	-26	0	0	0	0	>= 0
 0	0	0	-1	0	26	0	0	0	25	>= 0
 0	0	0	0	1	0	0	-1	0	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 3, Symbols: 0, Locals: 5
19 constraints
 0	0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	-1	3	>= 0
 1	0	0	0	0	-8	0	0	0	>= 0
 -1	0	0	0	0	8	0	0	7	>= 0
 0	1	0	0	0	0	-8	0	0	>= 0
 0	-1	0	0	0	0	8	0	7	>= 0
 0	0	0	1	0	0	0	0	0	>= 0
 0	0	0	-1	0	0	0	0	12	>= 0
 0	0	0	0	1	0	0	0	0	>= 0
 0	0	0	0	-1	0	0	0	3	>= 0
 0	1	0	-8	0	0	0	0	0	>= 0
 0	-1	0	8	0	0	0	0	7	>= 0
 0	0	1	0	-26	0	0	0	0	>= 0
 0	0	-1	0	26	0	0	0	25	>= 0
 0	0	0	1	0	0	-1	0	-1	>= 0

FM input (eliminate pos 0):
Domain: 0, Range: 3, Symbols: 0, Locals: 5
19 constraints
 0	0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	-1	3	>= 0
 1	0	0	0	0	-8	0	0	0	>= 0
 -1	0	0	0	0	8	0	0	7	>= 0
 0	1	0	0	0	0	-8	0	0	>= 0
 0	-1	0	0	0	0	8	0	7	>= 0
 0	0	0	1	0	0	0	0	0	>= 0
 0	0	0	-1	0	0	0	0	12	>= 0
 0	0	0	0	1	0	0	0	0	>= 0
 0	0	0	0	-1	0	0	0	3	>= 0
 0	1	0	-8	0	0	0	0	0	>= 0
 0	-1	0	8	0	0	0	0	7	>= 0
 0	0	1	0	-26	0	0	0	0	>= 0
 0	0	-1	0	26	0	0	0	25	>= 0
 0	0	0	1	0	0	-1	0	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 2, Symbols: 0, Locals: 5
17 constraints
 0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	-1	3	>= 0
 1	0	0	0	0	-8	0	0	>= 0
 -1	0	0	0	0	8	0	7	>= 0
 0	0	1	0	0	0	0	0	>= 0
 0	0	-1	0	0	0	0	12	>= 0
 0	0	0	1	0	0	0	0	>= 0
 0	0	0	-1	0	0	0	3	>= 0
 1	0	-8	0	0	0	0	0	>= 0
 -1	0	8	0	0	0	0	7	>= 0
 0	1	0	-26	0	0	0	0	>= 0
 0	-1	0	26	0	0	0	25	>= 0
 0	0	1	0	0	-1	0	-1	>= 0

FM input (eliminate pos 1):
Domain: 0, Range: 2, Symbols: 0, Locals: 5
17 constraints
 0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	-1	3	>= 0
 1	0	0	0	0	-8	0	0	>= 0
 -1	0	0	0	0	8	0	7	>= 0
 0	0	1	0	0	0	0	0	>= 0
 0	0	-1	0	0	0	0	12	>= 0
 0	0	0	1	0	0	0	0	>= 0
 0	0	0	-1	0	0	0	3	>= 0
 1	0	-8	0	0	0	0	0	>= 0
 -1	0	8	0	0	0	0	7	>= 0
 0	1	0	-26	0	0	0	0	>= 0
 0	-1	0	26	0	0	0	25	>= 0
 0	0	1	0	0	-1	0	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 1, Symbols: 0, Locals: 5
15 constraints
 0	0	0	1	0	0	0	>= 0
 0	0	0	-1	0	0	12	>= 0
 0	0	0	0	1	0	0	>= 0
 0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	-1	3	>= 0
 1	0	0	0	-8	0	0	>= 0
 -1	0	0	0	8	0	7	>= 0
 0	1	0	0	0	0	0	>= 0
 0	-1	0	0	0	0	12	>= 0
 0	0	1	0	0	0	0	>= 0
 0	0	-1	0	0	0	3	>= 0
 1	-8	0	0	0	0	0	>= 0
 -1	8	0	0	0	0	7	>= 0
 0	1	0	0	-1	0	-1	>= 0

FM input (eliminate pos 2):
Domain: 0, Range: 1, Symbols: 0, Locals: 5
15 constraints
 0	0	0	1	0	0	0	>= 0
 0	0	0	-1	0	0	12	>= 0
 0	0	0	0	1	0	0	>= 0
 0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	-1	3	>= 0
 1	0	0	0	-8	0	0	>= 0
 -1	0	0	0	8	0	7	>= 0
 0	1	0	0	0	0	0	>= 0
 0	-1	0	0	0	0	12	>= 0
 0	0	1	0	0	0	0	>= 0
 0	0	-1	0	0	0	3	>= 0
 1	-8	0	0	0	0	0	>= 0
 -1	8	0	0	0	0	7	>= 0
 0	1	0	0	-1	0	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 1, Symbols: 0, Locals: 4
13 constraints
 0	0	1	0	0	0	>= 0
 0	0	-1	0	0	12	>= 0
 0	0	0	1	0	0	>= 0
 0	0	0	-1	0	12	>= 0
 0	0	0	0	1	0	>= 0
 0	0	0	0	-1	3	>= 0
 1	0	0	-8	0	0	>= 0
 -1	0	0	8	0	7	>= 0
 0	1	0	0	0	0	>= 0
 0	-1	0	0	0	12	>= 0
 1	-8	0	0	0	0	>= 0
 -1	8	0	0	0	7	>= 0
 0	1	0	-1	0	-1	>= 0

FM input (eliminate pos 2):
Domain: 0, Range: 1, Symbols: 0, Locals: 4
13 constraints
 0	0	1	0	0	0	>= 0
 0	0	-1	0	0	12	>= 0
 0	0	0	1	0	0	>= 0
 0	0	0	-1	0	12	>= 0
 0	0	0	0	1	0	>= 0
 0	0	0	0	-1	3	>= 0
 1	0	0	-8	0	0	>= 0
 -1	0	0	8	0	7	>= 0
 0	1	0	0	0	0	>= 0
 0	-1	0	0	0	12	>= 0
 1	-8	0	0	0	0	>= 0
 -1	8	0	0	0	7	>= 0
 0	1	0	-1	0	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 1, Symbols: 0, Locals: 3
11 constraints
 0	0	1	0	0	>= 0
 0	0	-1	0	12	>= 0
 0	0	0	1	0	>= 0
 0	0	0	-1	3	>= 0
 1	0	-8	0	0	>= 0
 -1	0	8	0	7	>= 0
 0	1	0	0	0	>= 0
 0	-1	0	0	12	>= 0
 1	-8	0	0	0	>= 0
 -1	8	0	0	7	>= 0
 0	1	-1	0	-1	>= 0

FM input (eliminate pos 3):
Domain: 0, Range: 1, Symbols: 0, Locals: 3
11 constraints
 0	0	1	0	0	>= 0
 0	0	-1	0	12	>= 0
 0	0	0	1	0	>= 0
 0	0	0	-1	3	>= 0
 1	0	-8	0	0	>= 0
 -1	0	8	0	7	>= 0
 0	1	0	0	0	>= 0
 0	-1	0	0	12	>= 0
 1	-8	0	0	0	>= 0
 -1	8	0	0	7	>= 0
 0	1	-1	0	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 1, Symbols: 0, Locals: 2
9 constraints
 0	0	1	0	>= 0
 0	0	-1	12	>= 0
 1	0	-8	0	>= 0
 -1	0	8	7	>= 0
 0	1	0	0	>= 0
 0	-1	0	12	>= 0
 1	-8	0	0	>= 0
 -1	8	0	7	>= 0
 0	1	-1	-1	>= 0

FM input (eliminate pos 0):
Domain: 0, Range: 1, Symbols: 0, Locals: 2
9 constraints
 0	0	1	0	>= 0
 0	0	-1	12	>= 0
 1	0	-8	0	>= 0
 -1	0	8	7	>= 0
 0	1	0	0	>= 0
 0	-1	0	12	>= 0
 1	-8	0	0	>= 0
 -1	8	0	7	>= 0
 0	1	-1	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 0, Symbols: 0, Locals: 2
6 constraints
 -1	1	0	>= 0
 0	1	0	>= 0
 0	-1	12	>= 0
 1	0	0	>= 0
 -1	0	12	>= 0
 1	-1	-1	>= 0

FM input (eliminate pos 0):
Domain: 0, Range: 0, Symbols: 0, Locals: 2
6 constraints
 -1	1	0	>= 0
 0	1	0	>= 0
 0	-1	12	>= 0
 1	0	0	>= 0
 -1	0	12	>= 0
 1	-1	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 0, Symbols: 0, Locals: 1
3 constraints
 1	0	>= 0
 0	-1	>= 0
 -1	11	>= 0

Checking for dependence at depth: 2 between:
mlir-asm-printer: Verifying operation: func.func
affine.store %6, %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
%0 = affine.load %arg0[%arg6, %arg8] : memref<104x104xi8, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 2 between:
mlir-asm-printer: Verifying operation: func.func
affine.store %6, %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
%1 = affine.load %arg1[%arg8, %arg7] : memref<104x104xi8, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 2 between:
mlir-asm-printer: Verifying operation: func.func
affine.store %6, %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
%2 = affine.load %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
FM input (eliminate pos 0):
Domain: 0, Range: 4, Symbols: 0, Locals: 5
37 constraints
 0	0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	0	-1	3	>= 0
 0	1	0	0	0	0	-8	0	0	0	>= 0
 0	-1	0	0	0	0	8	0	0	7	>= 0
 0	0	1	0	0	0	0	-8	0	0	>= 0
 0	0	-1	0	0	0	0	8	0	7	>= 0
 1	0	0	0	0	0	0	0	-26	0	>= 0
 -1	0	0	0	0	0	0	0	26	25	>= 0
 0	0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	1	0	0	0	0	0	>= 0
 0	0	0	0	-1	0	0	0	0	12	>= 0
 0	0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	1	0	0	0	0	>= 0
 0	0	0	0	0	-1	0	0	0	3	>= 0
 0	1	0	0	0	0	-8	0	0	0	>= 0
 0	-1	0	0	0	0	8	0	0	7	>= 0
 0	0	1	0	-8	0	0	0	0	0	>= 0
 0	0	-1	0	8	0	0	0	0	7	>= 0
 0	0	0	1	0	-26	0	0	0	0	>= 0
 0	0	0	-1	0	26	0	0	0	25	>= 0
 0	0	0	0	1	0	0	-1	0	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 3, Symbols: 0, Locals: 5
19 constraints
 0	0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	-1	3	>= 0
 1	0	0	0	0	-8	0	0	0	>= 0
 -1	0	0	0	0	8	0	0	7	>= 0
 0	1	0	0	0	0	-8	0	0	>= 0
 0	-1	0	0	0	0	8	0	7	>= 0
 0	0	0	1	0	0	0	0	0	>= 0
 0	0	0	-1	0	0	0	0	12	>= 0
 0	0	0	0	1	0	0	0	0	>= 0
 0	0	0	0	-1	0	0	0	3	>= 0
 0	1	0	-8	0	0	0	0	0	>= 0
 0	-1	0	8	0	0	0	0	7	>= 0
 0	0	1	0	-26	0	0	0	0	>= 0
 0	0	-1	0	26	0	0	0	25	>= 0
 0	0	0	1	0	0	-1	0	-1	>= 0

FM input (eliminate pos 0):
Domain: 0, Range: 3, Symbols: 0, Locals: 5
19 constraints
 0	0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	-1	3	>= 0
 1	0	0	0	0	-8	0	0	0	>= 0
 -1	0	0	0	0	8	0	0	7	>= 0
 0	1	0	0	0	0	-8	0	0	>= 0
 0	-1	0	0	0	0	8	0	7	>= 0
 0	0	0	1	0	0	0	0	0	>= 0
 0	0	0	-1	0	0	0	0	12	>= 0
 0	0	0	0	1	0	0	0	0	>= 0
 0	0	0	0	-1	0	0	0	3	>= 0
 0	1	0	-8	0	0	0	0	0	>= 0
 0	-1	0	8	0	0	0	0	7	>= 0
 0	0	1	0	-26	0	0	0	0	>= 0
 0	0	-1	0	26	0	0	0	25	>= 0
 0	0	0	1	0	0	-1	0	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 2, Symbols: 0, Locals: 5
17 constraints
 0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	-1	3	>= 0
 1	0	0	0	0	-8	0	0	>= 0
 -1	0	0	0	0	8	0	7	>= 0
 0	0	1	0	0	0	0	0	>= 0
 0	0	-1	0	0	0	0	12	>= 0
 0	0	0	1	0	0	0	0	>= 0
 0	0	0	-1	0	0	0	3	>= 0
 1	0	-8	0	0	0	0	0	>= 0
 -1	0	8	0	0	0	0	7	>= 0
 0	1	0	-26	0	0	0	0	>= 0
 0	-1	0	26	0	0	0	25	>= 0
 0	0	1	0	0	-1	0	-1	>= 0

FM input (eliminate pos 1):
Domain: 0, Range: 2, Symbols: 0, Locals: 5
17 constraints
 0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	-1	3	>= 0
 1	0	0	0	0	-8	0	0	>= 0
 -1	0	0	0	0	8	0	7	>= 0
 0	0	1	0	0	0	0	0	>= 0
 0	0	-1	0	0	0	0	12	>= 0
 0	0	0	1	0	0	0	0	>= 0
 0	0	0	-1	0	0	0	3	>= 0
 1	0	-8	0	0	0	0	0	>= 0
 -1	0	8	0	0	0	0	7	>= 0
 0	1	0	-26	0	0	0	0	>= 0
 0	-1	0	26	0	0	0	25	>= 0
 0	0	1	0	0	-1	0	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 1, Symbols: 0, Locals: 5
15 constraints
 0	0	0	1	0	0	0	>= 0
 0	0	0	-1	0	0	12	>= 0
 0	0	0	0	1	0	0	>= 0
 0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	-1	3	>= 0
 1	0	0	0	-8	0	0	>= 0
 -1	0	0	0	8	0	7	>= 0
 0	1	0	0	0	0	0	>= 0
 0	-1	0	0	0	0	12	>= 0
 0	0	1	0	0	0	0	>= 0
 0	0	-1	0	0	0	3	>= 0
 1	-8	0	0	0	0	0	>= 0
 -1	8	0	0	0	0	7	>= 0
 0	1	0	0	-1	0	-1	>= 0

FM input (eliminate pos 2):
Domain: 0, Range: 1, Symbols: 0, Locals: 5
15 constraints
 0	0	0	1	0	0	0	>= 0
 0	0	0	-1	0	0	12	>= 0
 0	0	0	0	1	0	0	>= 0
 0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	-1	3	>= 0
 1	0	0	0	-8	0	0	>= 0
 -1	0	0	0	8	0	7	>= 0
 0	1	0	0	0	0	0	>= 0
 0	-1	0	0	0	0	12	>= 0
 0	0	1	0	0	0	0	>= 0
 0	0	-1	0	0	0	3	>= 0
 1	-8	0	0	0	0	0	>= 0
 -1	8	0	0	0	0	7	>= 0
 0	1	0	0	-1	0	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 1, Symbols: 0, Locals: 4
13 constraints
 0	0	1	0	0	0	>= 0
 0	0	-1	0	0	12	>= 0
 0	0	0	1	0	0	>= 0
 0	0	0	-1	0	12	>= 0
 0	0	0	0	1	0	>= 0
 0	0	0	0	-1	3	>= 0
 1	0	0	-8	0	0	>= 0
 -1	0	0	8	0	7	>= 0
 0	1	0	0	0	0	>= 0
 0	-1	0	0	0	12	>= 0
 1	-8	0	0	0	0	>= 0
 -1	8	0	0	0	7	>= 0
 0	1	0	-1	0	-1	>= 0

FM input (eliminate pos 2):
Domain: 0, Range: 1, Symbols: 0, Locals: 4
13 constraints
 0	0	1	0	0	0	>= 0
 0	0	-1	0	0	12	>= 0
 0	0	0	1	0	0	>= 0
 0	0	0	-1	0	12	>= 0
 0	0	0	0	1	0	>= 0
 0	0	0	0	-1	3	>= 0
 1	0	0	-8	0	0	>= 0
 -1	0	0	8	0	7	>= 0
 0	1	0	0	0	0	>= 0
 0	-1	0	0	0	12	>= 0
 1	-8	0	0	0	0	>= 0
 -1	8	0	0	0	7	>= 0
 0	1	0	-1	0	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 1, Symbols: 0, Locals: 3
11 constraints
 0	0	1	0	0	>= 0
 0	0	-1	0	12	>= 0
 0	0	0	1	0	>= 0
 0	0	0	-1	3	>= 0
 1	0	-8	0	0	>= 0
 -1	0	8	0	7	>= 0
 0	1	0	0	0	>= 0
 0	-1	0	0	12	>= 0
 1	-8	0	0	0	>= 0
 -1	8	0	0	7	>= 0
 0	1	-1	0	-1	>= 0

FM input (eliminate pos 3):
Domain: 0, Range: 1, Symbols: 0, Locals: 3
11 constraints
 0	0	1	0	0	>= 0
 0	0	-1	0	12	>= 0
 0	0	0	1	0	>= 0
 0	0	0	-1	3	>= 0
 1	0	-8	0	0	>= 0
 -1	0	8	0	7	>= 0
 0	1	0	0	0	>= 0
 0	-1	0	0	12	>= 0
 1	-8	0	0	0	>= 0
 -1	8	0	0	7	>= 0
 0	1	-1	0	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 1, Symbols: 0, Locals: 2
9 constraints
 0	0	1	0	>= 0
 0	0	-1	12	>= 0
 1	0	-8	0	>= 0
 -1	0	8	7	>= 0
 0	1	0	0	>= 0
 0	-1	0	12	>= 0
 1	-8	0	0	>= 0
 -1	8	0	7	>= 0
 0	1	-1	-1	>= 0

FM input (eliminate pos 0):
Domain: 0, Range: 1, Symbols: 0, Locals: 2
9 constraints
 0	0	1	0	>= 0
 0	0	-1	12	>= 0
 1	0	-8	0	>= 0
 -1	0	8	7	>= 0
 0	1	0	0	>= 0
 0	-1	0	12	>= 0
 1	-8	0	0	>= 0
 -1	8	0	7	>= 0
 0	1	-1	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 0, Symbols: 0, Locals: 2
6 constraints
 -1	1	0	>= 0
 0	1	0	>= 0
 0	-1	12	>= 0
 1	0	0	>= 0
 -1	0	12	>= 0
 1	-1	-1	>= 0

FM input (eliminate pos 0):
Domain: 0, Range: 0, Symbols: 0, Locals: 2
6 constraints
 -1	1	0	>= 0
 0	1	0	>= 0
 0	-1	12	>= 0
 1	0	0	>= 0
 -1	0	12	>= 0
 1	-1	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 0, Symbols: 0, Locals: 1
3 constraints
 1	0	>= 0
 0	-1	>= 0
 -1	11	>= 0

Checking for dependence at depth: 2 between:
mlir-asm-printer: Verifying operation: func.func
affine.store %6, %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
affine.store %6, %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
FM input (eliminate pos 0):
Domain: 0, Range: 4, Symbols: 0, Locals: 5
37 constraints
 0	0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	0	-1	3	>= 0
 0	1	0	0	0	0	-8	0	0	0	>= 0
 0	-1	0	0	0	0	8	0	0	7	>= 0
 0	0	1	0	0	0	0	-8	0	0	>= 0
 0	0	-1	0	0	0	0	8	0	7	>= 0
 1	0	0	0	0	0	0	0	-26	0	>= 0
 -1	0	0	0	0	0	0	0	26	25	>= 0
 0	0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	1	0	0	0	0	0	>= 0
 0	0	0	0	-1	0	0	0	0	12	>= 0
 0	0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	1	0	0	0	0	>= 0
 0	0	0	0	0	-1	0	0	0	3	>= 0
 0	1	0	0	0	0	-8	0	0	0	>= 0
 0	-1	0	0	0	0	8	0	0	7	>= 0
 0	0	1	0	-8	0	0	0	0	0	>= 0
 0	0	-1	0	8	0	0	0	0	7	>= 0
 0	0	0	1	0	-26	0	0	0	0	>= 0
 0	0	0	-1	0	26	0	0	0	25	>= 0
 0	0	0	0	1	0	0	-1	0	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 3, Symbols: 0, Locals: 5
19 constraints
 0	0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	-1	3	>= 0
 1	0	0	0	0	-8	0	0	0	>= 0
 -1	0	0	0	0	8	0	0	7	>= 0
 0	1	0	0	0	0	-8	0	0	>= 0
 0	-1	0	0	0	0	8	0	7	>= 0
 0	0	0	1	0	0	0	0	0	>= 0
 0	0	0	-1	0	0	0	0	12	>= 0
 0	0	0	0	1	0	0	0	0	>= 0
 0	0	0	0	-1	0	0	0	3	>= 0
 0	1	0	-8	0	0	0	0	0	>= 0
 0	-1	0	8	0	0	0	0	7	>= 0
 0	0	1	0	-26	0	0	0	0	>= 0
 0	0	-1	0	26	0	0	0	25	>= 0
 0	0	0	1	0	0	-1	0	-1	>= 0

FM input (eliminate pos 0):
Domain: 0, Range: 3, Symbols: 0, Locals: 5
19 constraints
 0	0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	-1	3	>= 0
 1	0	0	0	0	-8	0	0	0	>= 0
 -1	0	0	0	0	8	0	0	7	>= 0
 0	1	0	0	0	0	-8	0	0	>= 0
 0	-1	0	0	0	0	8	0	7	>= 0
 0	0	0	1	0	0	0	0	0	>= 0
 0	0	0	-1	0	0	0	0	12	>= 0
 0	0	0	0	1	0	0	0	0	>= 0
 0	0	0	0	-1	0	0	0	3	>= 0
 0	1	0	-8	0	0	0	0	0	>= 0
 0	-1	0	8	0	0	0	0	7	>= 0
 0	0	1	0	-26	0	0	0	0	>= 0
 0	0	-1	0	26	0	0	0	25	>= 0
 0	0	0	1	0	0	-1	0	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 2, Symbols: 0, Locals: 5
17 constraints
 0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	-1	3	>= 0
 1	0	0	0	0	-8	0	0	>= 0
 -1	0	0	0	0	8	0	7	>= 0
 0	0	1	0	0	0	0	0	>= 0
 0	0	-1	0	0	0	0	12	>= 0
 0	0	0	1	0	0	0	0	>= 0
 0	0	0	-1	0	0	0	3	>= 0
 1	0	-8	0	0	0	0	0	>= 0
 -1	0	8	0	0	0	0	7	>= 0
 0	1	0	-26	0	0	0	0	>= 0
 0	-1	0	26	0	0	0	25	>= 0
 0	0	1	0	0	-1	0	-1	>= 0

FM input (eliminate pos 1):
Domain: 0, Range: 2, Symbols: 0, Locals: 5
17 constraints
 0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	-1	3	>= 0
 1	0	0	0	0	-8	0	0	>= 0
 -1	0	0	0	0	8	0	7	>= 0
 0	0	1	0	0	0	0	0	>= 0
 0	0	-1	0	0	0	0	12	>= 0
 0	0	0	1	0	0	0	0	>= 0
 0	0	0	-1	0	0	0	3	>= 0
 1	0	-8	0	0	0	0	0	>= 0
 -1	0	8	0	0	0	0	7	>= 0
 0	1	0	-26	0	0	0	0	>= 0
 0	-1	0	26	0	0	0	25	>= 0
 0	0	1	0	0	-1	0	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 1, Symbols: 0, Locals: 5
15 constraints
 0	0	0	1	0	0	0	>= 0
 0	0	0	-1	0	0	12	>= 0
 0	0	0	0	1	0	0	>= 0
 0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	-1	3	>= 0
 1	0	0	0	-8	0	0	>= 0
 -1	0	0	0	8	0	7	>= 0
 0	1	0	0	0	0	0	>= 0
 0	-1	0	0	0	0	12	>= 0
 0	0	1	0	0	0	0	>= 0
 0	0	-1	0	0	0	3	>= 0
 1	-8	0	0	0	0	0	>= 0
 -1	8	0	0	0	0	7	>= 0
 0	1	0	0	-1	0	-1	>= 0

FM input (eliminate pos 2):
Domain: 0, Range: 1, Symbols: 0, Locals: 5
15 constraints
 0	0	0	1	0	0	0	>= 0
 0	0	0	-1	0	0	12	>= 0
 0	0	0	0	1	0	0	>= 0
 0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	-1	3	>= 0
 1	0	0	0	-8	0	0	>= 0
 -1	0	0	0	8	0	7	>= 0
 0	1	0	0	0	0	0	>= 0
 0	-1	0	0	0	0	12	>= 0
 0	0	1	0	0	0	0	>= 0
 0	0	-1	0	0	0	3	>= 0
 1	-8	0	0	0	0	0	>= 0
 -1	8	0	0	0	0	7	>= 0
 0	1	0	0	-1	0	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 1, Symbols: 0, Locals: 4
13 constraints
 0	0	1	0	0	0	>= 0
 0	0	-1	0	0	12	>= 0
 0	0	0	1	0	0	>= 0
 0	0	0	-1	0	12	>= 0
 0	0	0	0	1	0	>= 0
 0	0	0	0	-1	3	>= 0
 1	0	0	-8	0	0	>= 0
 -1	0	0	8	0	7	>= 0
 0	1	0	0	0	0	>= 0
 0	-1	0	0	0	12	>= 0
 1	-8	0	0	0	0	>= 0
 -1	8	0	0	0	7	>= 0
 0	1	0	-1	0	-1	>= 0

FM input (eliminate pos 2):
Domain: 0, Range: 1, Symbols: 0, Locals: 4
13 constraints
 0	0	1	0	0	0	>= 0
 0	0	-1	0	0	12	>= 0
 0	0	0	1	0	0	>= 0
 0	0	0	-1	0	12	>= 0
 0	0	0	0	1	0	>= 0
 0	0	0	0	-1	3	>= 0
 1	0	0	-8	0	0	>= 0
 -1	0	0	8	0	7	>= 0
 0	1	0	0	0	0	>= 0
 0	-1	0	0	0	12	>= 0
 1	-8	0	0	0	0	>= 0
 -1	8	0	0	0	7	>= 0
 0	1	0	-1	0	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 1, Symbols: 0, Locals: 3
11 constraints
 0	0	1	0	0	>= 0
 0	0	-1	0	12	>= 0
 0	0	0	1	0	>= 0
 0	0	0	-1	3	>= 0
 1	0	-8	0	0	>= 0
 -1	0	8	0	7	>= 0
 0	1	0	0	0	>= 0
 0	-1	0	0	12	>= 0
 1	-8	0	0	0	>= 0
 -1	8	0	0	7	>= 0
 0	1	-1	0	-1	>= 0

FM input (eliminate pos 3):
Domain: 0, Range: 1, Symbols: 0, Locals: 3
11 constraints
 0	0	1	0	0	>= 0
 0	0	-1	0	12	>= 0
 0	0	0	1	0	>= 0
 0	0	0	-1	3	>= 0
 1	0	-8	0	0	>= 0
 -1	0	8	0	7	>= 0
 0	1	0	0	0	>= 0
 0	-1	0	0	12	>= 0
 1	-8	0	0	0	>= 0
 -1	8	0	0	7	>= 0
 0	1	-1	0	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 1, Symbols: 0, Locals: 2
9 constraints
 0	0	1	0	>= 0
 0	0	-1	12	>= 0
 1	0	-8	0	>= 0
 -1	0	8	7	>= 0
 0	1	0	0	>= 0
 0	-1	0	12	>= 0
 1	-8	0	0	>= 0
 -1	8	0	7	>= 0
 0	1	-1	-1	>= 0

FM input (eliminate pos 0):
Domain: 0, Range: 1, Symbols: 0, Locals: 2
9 constraints
 0	0	1	0	>= 0
 0	0	-1	12	>= 0
 1	0	-8	0	>= 0
 -1	0	8	7	>= 0
 0	1	0	0	>= 0
 0	-1	0	12	>= 0
 1	-8	0	0	>= 0
 -1	8	0	7	>= 0
 0	1	-1	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 0, Symbols: 0, Locals: 2
6 constraints
 -1	1	0	>= 0
 0	1	0	>= 0
 0	-1	12	>= 0
 1	0	0	>= 0
 -1	0	12	>= 0
 1	-1	-1	>= 0

FM input (eliminate pos 0):
Domain: 0, Range: 0, Symbols: 0, Locals: 2
6 constraints
 -1	1	0	>= 0
 0	1	0	>= 0
 0	-1	12	>= 0
 1	0	0	>= 0
 -1	0	12	>= 0
 1	-1	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 0, Symbols: 0, Locals: 1
3 constraints
 1	0	>= 0
 0	-1	>= 0
 -1	11	>= 0

Checking for dependence at depth: 3 between:
mlir-asm-printer: Verifying operation: func.func
%0 = affine.load %arg0[%arg6, %arg8] : memref<104x104xi8, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
%0 = affine.load %arg0[%arg6, %arg8] : memref<104x104xi8, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 3 between:
mlir-asm-printer: Verifying operation: func.func
%0 = affine.load %arg0[%arg6, %arg8] : memref<104x104xi8, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
%1 = affine.load %arg1[%arg8, %arg7] : memref<104x104xi8, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 3 between:
mlir-asm-printer: Verifying operation: func.func
%0 = affine.load %arg0[%arg6, %arg8] : memref<104x104xi8, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
%2 = affine.load %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 3 between:
mlir-asm-printer: Verifying operation: func.func
%0 = affine.load %arg0[%arg6, %arg8] : memref<104x104xi8, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
affine.store %6, %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 3 between:
mlir-asm-printer: Verifying operation: func.func
%1 = affine.load %arg1[%arg8, %arg7] : memref<104x104xi8, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
%0 = affine.load %arg0[%arg6, %arg8] : memref<104x104xi8, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 3 between:
mlir-asm-printer: Verifying operation: func.func
%1 = affine.load %arg1[%arg8, %arg7] : memref<104x104xi8, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
%1 = affine.load %arg1[%arg8, %arg7] : memref<104x104xi8, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 3 between:
mlir-asm-printer: Verifying operation: func.func
%1 = affine.load %arg1[%arg8, %arg7] : memref<104x104xi8, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
%2 = affine.load %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 3 between:
mlir-asm-printer: Verifying operation: func.func
%1 = affine.load %arg1[%arg8, %arg7] : memref<104x104xi8, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
affine.store %6, %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 3 between:
mlir-asm-printer: Verifying operation: func.func
%2 = affine.load %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
%0 = affine.load %arg0[%arg6, %arg8] : memref<104x104xi8, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 3 between:
mlir-asm-printer: Verifying operation: func.func
%2 = affine.load %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
%1 = affine.load %arg1[%arg8, %arg7] : memref<104x104xi8, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 3 between:
mlir-asm-printer: Verifying operation: func.func
%2 = affine.load %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
%2 = affine.load %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 3 between:
mlir-asm-printer: Verifying operation: func.func
%2 = affine.load %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
affine.store %6, %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
FM input (eliminate pos 0):
Domain: 0, Range: 4, Symbols: 0, Locals: 4
37 constraints
 0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	-1	3	>= 0
 0	1	0	0	0	-8	0	0	0	>= 0
 0	-1	0	0	0	8	0	0	7	>= 0
 0	0	1	0	0	0	-8	0	0	>= 0
 0	0	-1	0	0	0	8	0	7	>= 0
 1	0	0	0	0	0	0	-26	0	>= 0
 -1	0	0	0	0	0	0	26	25	>= 0
 0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	1	0	0	0	0	>= 0
 0	0	0	0	-1	0	0	0	3	>= 0
 0	1	0	0	0	-8	0	0	0	>= 0
 0	-1	0	0	0	8	0	0	7	>= 0
 0	0	1	0	0	0	-8	0	0	>= 0
 0	0	-1	0	0	0	8	0	7	>= 0
 0	0	0	1	-26	0	0	0	0	>= 0
 0	0	0	-1	26	0	0	0	25	>= 0
 0	0	0	0	1	0	0	-1	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 3, Symbols: 0, Locals: 4
15 constraints
 0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	-1	3	>= 0
 1	0	0	0	-8	0	0	0	>= 0
 -1	0	0	0	8	0	0	7	>= 0
 0	1	0	0	0	-8	0	0	>= 0
 0	-1	0	0	0	8	0	7	>= 0
 0	0	0	1	0	0	0	0	>= 0
 0	0	0	-1	0	0	0	3	>= 0
 0	0	1	-26	0	0	0	0	>= 0
 0	0	-1	26	0	0	0	25	>= 0
 0	0	0	1	0	0	-1	-1	>= 0

FM input (eliminate pos 0):
Domain: 0, Range: 3, Symbols: 0, Locals: 4
15 constraints
 0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	-1	3	>= 0
 1	0	0	0	-8	0	0	0	>= 0
 -1	0	0	0	8	0	0	7	>= 0
 0	1	0	0	0	-8	0	0	>= 0
 0	-1	0	0	0	8	0	7	>= 0
 0	0	0	1	0	0	0	0	>= 0
 0	0	0	-1	0	0	0	3	>= 0
 0	0	1	-26	0	0	0	0	>= 0
 0	0	-1	26	0	0	0	25	>= 0
 0	0	0	1	0	0	-1	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 2, Symbols: 0, Locals: 4
13 constraints
 0	0	0	1	0	0	0	>= 0
 0	0	0	-1	0	0	12	>= 0
 0	0	0	0	1	0	0	>= 0
 0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	-1	3	>= 0
 1	0	0	0	-8	0	0	>= 0
 -1	0	0	0	8	0	7	>= 0
 0	0	1	0	0	0	0	>= 0
 0	0	-1	0	0	0	3	>= 0
 0	1	-26	0	0	0	0	>= 0
 0	-1	26	0	0	0	25	>= 0
 0	0	1	0	0	-1	-1	>= 0

FM input (eliminate pos 0):
Domain: 0, Range: 2, Symbols: 0, Locals: 4
13 constraints
 0	0	0	1	0	0	0	>= 0
 0	0	0	-1	0	0	12	>= 0
 0	0	0	0	1	0	0	>= 0
 0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	-1	3	>= 0
 1	0	0	0	-8	0	0	>= 0
 -1	0	0	0	8	0	7	>= 0
 0	0	1	0	0	0	0	>= 0
 0	0	-1	0	0	0	3	>= 0
 0	1	-26	0	0	0	0	>= 0
 0	-1	26	0	0	0	25	>= 0
 0	0	1	0	0	-1	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 1, Symbols: 0, Locals: 4
11 constraints
 0	0	1	0	0	0	>= 0
 0	0	-1	0	0	12	>= 0
 0	0	0	1	0	0	>= 0
 0	0	0	-1	0	12	>= 0
 0	0	0	0	1	0	>= 0
 0	0	0	0	-1	3	>= 0
 0	1	0	0	0	0	>= 0
 0	-1	0	0	0	3	>= 0
 1	-26	0	0	0	0	>= 0
 -1	26	0	0	0	25	>= 0
 0	1	0	0	-1	-1	>= 0

FM input (eliminate pos 0):
Domain: 0, Range: 1, Symbols: 0, Locals: 4
11 constraints
 0	0	1	0	0	0	>= 0
 0	0	-1	0	0	12	>= 0
 0	0	0	1	0	0	>= 0
 0	0	0	-1	0	12	>= 0
 0	0	0	0	1	0	>= 0
 0	0	0	0	-1	3	>= 0
 0	1	0	0	0	0	>= 0
 0	-1	0	0	0	3	>= 0
 1	-26	0	0	0	0	>= 0
 -1	26	0	0	0	25	>= 0
 0	1	0	0	-1	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 0, Symbols: 0, Locals: 4
9 constraints
 0	1	0	0	0	>= 0
 0	-1	0	0	12	>= 0
 0	0	1	0	0	>= 0
 0	0	-1	0	12	>= 0
 0	0	0	1	0	>= 0
 0	0	0	-1	3	>= 0
 1	0	0	0	0	>= 0
 -1	0	0	0	3	>= 0
 1	0	0	-1	-1	>= 0

FM input (eliminate pos 1):
Domain: 0, Range: 0, Symbols: 0, Locals: 4
9 constraints
 0	1	0	0	0	>= 0
 0	-1	0	0	12	>= 0
 0	0	1	0	0	>= 0
 0	0	-1	0	12	>= 0
 0	0	0	1	0	>= 0
 0	0	0	-1	3	>= 0
 1	0	0	0	0	>= 0
 -1	0	0	0	3	>= 0
 1	0	0	-1	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 0, Symbols: 0, Locals: 3
7 constraints
 0	1	0	0	>= 0
 0	-1	0	12	>= 0
 0	0	1	0	>= 0
 0	0	-1	3	>= 0
 1	0	0	0	>= 0
 -1	0	0	3	>= 0
 1	0	-1	-1	>= 0

FM input (eliminate pos 1):
Domain: 0, Range: 0, Symbols: 0, Locals: 3
7 constraints
 0	1	0	0	>= 0
 0	-1	0	12	>= 0
 0	0	1	0	>= 0
 0	0	-1	3	>= 0
 1	0	0	0	>= 0
 -1	0	0	3	>= 0
 1	0	-1	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 0, Symbols: 0, Locals: 2
5 constraints
 0	1	0	>= 0
 0	-1	3	>= 0
 1	0	0	>= 0
 -1	0	3	>= 0
 1	-1	-1	>= 0

FM input (eliminate pos 0):
Domain: 0, Range: 0, Symbols: 0, Locals: 2
5 constraints
 0	1	0	>= 0
 0	-1	3	>= 0
 1	0	0	>= 0
 -1	0	3	>= 0
 1	-1	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 0, Symbols: 0, Locals: 1
2 constraints
 -1	2	>= 0
 1	0	>= 0

FM input (eliminate pos 0):
Domain: 0, Range: 0, Symbols: 0, Locals: 1
2 constraints
 -1	2	>= 0
 1	0	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 0, Symbols: 0, Locals: 0
0 constraints

FM input (eliminate pos 6):
Domain: 0, Range: 9, Symbols: 0, Locals: 3
41 constraints
(None	None	None	None	None	None	Value	Value	Value	Local	Local	Local	const)
 1	0	0	0	0	0	0	0	0	0	0	0	0	= 0
 0	1	0	0	0	0	0	0	0	0	0	0	0	= 0
 0	0	0	1	0	0	0	0	0	0	0	0	0	= 0
 0	0	0	0	1	0	0	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	0	0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	0	0	0	0	-1	3	>= 0
 0	0	0	0	0	0	1	0	0	-8	0	0	0	>= 0
 0	0	0	0	0	0	-1	0	0	8	0	0	7	>= 0
 0	0	0	0	0	0	0	1	0	0	-8	0	0	>= 0
 0	0	0	0	0	0	0	-1	0	0	8	0	7	>= 0
 0	0	0	0	0	-1	0	0	1	0	0	-26	0	>= 0
 0	0	0	0	0	1	0	0	-1	0	0	26	25	>= 0
 0	0	0	0	0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	0	0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	0	0	0	0	>= 0
 0	0	1	0	0	0	0	0	0	0	0	26	0	>= 0
 0	0	-1	0	0	0	0	0	0	0	0	-26	78	>= 0
 0	0	0	0	0	0	1	0	0	-8	0	0	0	>= 0
 0	0	0	0	0	0	-1	0	0	8	0	0	7	>= 0
 0	0	0	0	0	0	0	1	0	0	-8	0	0	>= 0
 0	0	0	0	0	0	0	-1	0	0	8	0	7	>= 0
 0	0	-1	0	0	0	0	0	1	0	0	-26	0	>= 0
 0	0	1	0	0	0	0	0	-1	0	0	26	25	>= 0
 0	0	1	0	0	0	0	0	0	0	0	0	-26	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 8, Symbols: 0, Locals: 3
19 constraints
(None	None	None	None	None	None	None	None	Local	Local	Local	const)
 1	0	0	0	0	0	0	0	0	0	0	0	= 0
 0	1	0	0	0	0	0	0	0	0	0	0	= 0
 0	0	0	1	0	0	0	0	0	0	0	0	= 0
 0	0	0	0	1	0	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	0	0	0	-1	3	>= 0
 0	0	0	0	0	0	1	0	0	-8	0	0	>= 0
 0	0	0	0	0	0	-1	0	0	8	0	7	>= 0
 0	0	0	0	0	-1	0	1	0	0	-26	0	>= 0
 0	0	0	0	0	1	0	-1	0	0	26	25	>= 0
 0	0	1	0	0	0	0	0	0	0	26	0	>= 0
 0	0	-1	0	0	0	0	0	0	0	-26	78	>= 0
 0	0	-1	0	0	0	0	1	0	0	-26	0	>= 0
 0	0	1	0	0	0	0	-1	0	0	26	25	>= 0
 0	0	1	0	0	0	0	0	0	0	0	-26	>= 0

FM input (eliminate pos 6):
Domain: 0, Range: 8, Symbols: 0, Locals: 3
19 constraints
(None	None	None	None	None	None	Value	Value	Local	Local	Local	const)
 1	0	0	0	0	0	0	0	0	0	0	0	= 0
 0	1	0	0	0	0	0	0	0	0	0	0	= 0
 0	0	0	1	0	0	0	0	0	0	0	0	= 0
 0	0	0	0	1	0	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	0	0	0	-1	3	>= 0
 0	0	0	0	0	0	1	0	0	-8	0	0	>= 0
 0	0	0	0	0	0	-1	0	0	8	0	7	>= 0
 0	0	0	0	0	-1	0	1	0	0	-26	0	>= 0
 0	0	0	0	0	1	0	-1	0	0	26	25	>= 0
 0	0	1	0	0	0	0	0	0	0	26	0	>= 0
 0	0	-1	0	0	0	0	0	0	0	-26	78	>= 0
 0	0	-1	0	0	0	0	1	0	0	-26	0	>= 0
 0	0	1	0	0	0	0	-1	0	0	26	25	>= 0
 0	0	1	0	0	0	0	0	0	0	0	-26	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 7, Symbols: 0, Locals: 3
17 constraints
(None	None	None	None	None	None	None	Local	Local	Local	const)
 1	0	0	0	0	0	0	0	0	0	0	= 0
 0	1	0	0	0	0	0	0	0	0	0	= 0
 0	0	0	1	0	0	0	0	0	0	0	= 0
 0	0	0	0	1	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	0	0	-1	3	>= 0
 0	0	0	0	0	-1	1	0	0	-26	0	>= 0
 0	0	0	0	0	1	-1	0	0	26	25	>= 0
 0	0	1	0	0	0	0	0	0	26	0	>= 0
 0	0	-1	0	0	0	0	0	0	-26	78	>= 0
 0	0	-1	0	0	0	1	0	0	-26	0	>= 0
 0	0	1	0	0	0	-1	0	0	26	25	>= 0
 0	0	1	0	0	0	0	0	0	0	-26	>= 0

FM input (eliminate pos 7):
Domain: 0, Range: 7, Symbols: 0, Locals: 3
17 constraints
(None	None	None	None	None	None	Value	Local	Local	Local	const)
 1	0	0	0	0	0	0	0	0	0	0	= 0
 0	1	0	0	0	0	0	0	0	0	0	= 0
 0	0	0	1	0	0	0	0	0	0	0	= 0
 0	0	0	0	1	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	0	0	-1	3	>= 0
 0	0	0	0	0	-1	1	0	0	-26	0	>= 0
 0	0	0	0	0	1	-1	0	0	26	25	>= 0
 0	0	1	0	0	0	0	0	0	26	0	>= 0
 0	0	-1	0	0	0	0	0	0	-26	78	>= 0
 0	0	-1	0	0	0	1	0	0	-26	0	>= 0
 0	0	1	0	0	0	-1	0	0	26	25	>= 0
 0	0	1	0	0	0	0	0	0	0	-26	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 7, Symbols: 0, Locals: 2
15 constraints
(None	None	None	None	None	None	None	Local	Local	const)
 1	0	0	0	0	0	0	0	0	0	= 0
 0	1	0	0	0	0	0	0	0	0	= 0
 0	0	0	1	0	0	0	0	0	0	= 0
 0	0	0	0	1	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	0	-1	3	>= 0
 0	0	0	0	0	-1	1	0	-26	0	>= 0
 0	0	0	0	0	1	-1	0	26	25	>= 0
 0	0	1	0	0	0	0	0	26	0	>= 0
 0	0	-1	0	0	0	0	0	-26	78	>= 0
 0	0	-1	0	0	0	1	0	-26	0	>= 0
 0	0	1	0	0	0	-1	0	26	25	>= 0
 0	0	1	0	0	0	0	0	0	-26	>= 0

FM input (eliminate pos 7):
Domain: 0, Range: 7, Symbols: 0, Locals: 2
15 constraints
(None	None	None	None	None	None	Value	Local	Local	const)
 1	0	0	0	0	0	0	0	0	0	= 0
 0	1	0	0	0	0	0	0	0	0	= 0
 0	0	0	1	0	0	0	0	0	0	= 0
 0	0	0	0	1	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	0	-1	3	>= 0
 0	0	0	0	0	-1	1	0	-26	0	>= 0
 0	0	0	0	0	1	-1	0	26	25	>= 0
 0	0	1	0	0	0	0	0	26	0	>= 0
 0	0	-1	0	0	0	0	0	-26	78	>= 0
 0	0	-1	0	0	0	1	0	-26	0	>= 0
 0	0	1	0	0	0	-1	0	26	25	>= 0
 0	0	1	0	0	0	0	0	0	-26	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 7, Symbols: 0, Locals: 1
13 constraints
(None	None	None	None	None	None	None	Local	const)
 1	0	0	0	0	0	0	0	0	= 0
 0	1	0	0	0	0	0	0	0	= 0
 0	0	0	1	0	0	0	0	0	= 0
 0	0	0	0	1	0	0	0	0	= 0
 0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	-1	3	>= 0
 0	0	0	0	0	-1	1	-26	0	>= 0
 0	0	0	0	0	1	-1	26	25	>= 0
 0	0	1	0	0	0	0	26	0	>= 0
 0	0	-1	0	0	0	0	-26	78	>= 0
 0	0	-1	0	0	0	1	-26	0	>= 0
 0	0	1	0	0	0	-1	26	25	>= 0
 0	0	1	0	0	0	0	0	-26	>= 0

FM input (eliminate pos 6):
Domain: 0, Range: 7, Symbols: 0, Locals: 1
13 constraints
(None	None	None	None	None	None	Value	Local	const)
 1	0	0	0	0	0	0	0	0	= 0
 0	1	0	0	0	0	0	0	0	= 0
 0	0	0	1	0	0	0	0	0	= 0
 0	0	0	0	1	0	0	0	0	= 0
 0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	-1	3	>= 0
 0	0	0	0	0	-1	1	-26	0	>= 0
 0	0	0	0	0	1	-1	26	25	>= 0
 0	0	1	0	0	0	0	26	0	>= 0
 0	0	-1	0	0	0	0	-26	78	>= 0
 0	0	-1	0	0	0	1	-26	0	>= 0
 0	0	1	0	0	0	-1	26	25	>= 0
 0	0	1	0	0	0	0	0	-26	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 6, Symbols: 0, Locals: 1
11 constraints
(None	None	None	None	None	None	Local	const)
 1	0	0	0	0	0	0	0	= 0
 0	1	0	0	0	0	0	0	= 0
 0	0	0	1	0	0	0	0	= 0
 0	0	0	0	1	0	0	0	= 0
 0	0	-1	0	0	1	0	25	>= 0
 0	0	1	0	0	-1	0	25	>= 0
 0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	-1	3	>= 0
 0	0	1	0	0	0	26	0	>= 0
 0	0	-1	0	0	0	-26	78	>= 0
 0	0	1	0	0	0	0	-26	>= 0

FM input (eliminate pos 6):
Domain: 0, Range: 6, Symbols: 0, Locals: 1
11 constraints
(None	None	None	None	None	None	Local	const)
 1	0	0	0	0	0	0	0	= 0
 0	1	0	0	0	0	0	0	= 0
 0	0	0	1	0	0	0	0	= 0
 0	0	0	0	1	0	0	0	= 0
 0	0	-1	0	0	1	0	25	>= 0
 0	0	1	0	0	-1	0	25	>= 0
 0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	-1	3	>= 0
 0	0	1	0	0	0	26	0	>= 0
 0	0	-1	0	0	0	-26	78	>= 0
 0	0	1	0	0	0	0	-26	>= 0

FM isResultIntegerExact: 0
FM output:
Domain: 0, Range: 6, Symbols: 0, Locals: 0
8 constraints
(None	None	None	None	None	None	const)
 1	0	0	0	0	0	0	= 0
 0	1	0	0	0	0	0	= 0
 0	0	0	1	0	0	0	= 0
 0	0	0	0	1	0	0	= 0
 0	0	-1	0	0	0	78	>= 0
 0	0	-1	0	0	1	25	>= 0
 0	0	1	0	0	-1	25	>= 0
 0	0	1	0	0	0	-26	>= 0

FM input (eliminate pos 2):
Domain: 0, Range: 3, Symbols: 0, Locals: 0
5 constraints
 1	0	0	0	= 0
 0	-1	0	78	>= 0
 0	-1	1	25	>= 0
 0	1	-1	25	>= 0
 0	1	0	-26	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 2, Symbols: 0, Locals: 0
3 constraints
 1	0	0	= 0
 0	-1	78	>= 0
 0	1	-26	>= 0

FM input (eliminate pos 1):
Domain: 0, Range: 2, Symbols: 0, Locals: 0
3 constraints
 1	0	0	= 0
 0	-1	78	>= 0
 0	1	-26	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 1, Symbols: 0, Locals: 0
1 constraints
 1	0	= 0

FM input (eliminate pos 2):
Domain: 0, Range: 3, Symbols: 0, Locals: 0
5 constraints
 1	0	0	0	= 0
 0	-1	0	78	>= 0
 0	-1	1	25	>= 0
 0	1	-1	25	>= 0
 0	1	0	-26	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 2, Symbols: 0, Locals: 0
3 constraints
 1	0	0	= 0
 0	-1	78	>= 0
 0	1	-26	>= 0

FM input (eliminate pos 1):
Domain: 0, Range: 2, Symbols: 0, Locals: 0
3 constraints
 1	0	0	= 0
 0	-1	78	>= 0
 0	1	-26	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 1, Symbols: 0, Locals: 0
1 constraints
 1	0	= 0

FM input (eliminate pos 2):
Domain: 0, Range: 3, Symbols: 0, Locals: 0
5 constraints
 1	0	0	0	= 0
 0	-1	0	78	>= 0
 0	-1	1	25	>= 0
 0	1	-1	25	>= 0
 0	1	0	-26	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 2, Symbols: 0, Locals: 0
3 constraints
 1	0	0	= 0
 0	-1	78	>= 0
 0	1	-26	>= 0

FM input (eliminate pos 1):
Domain: 0, Range: 2, Symbols: 0, Locals: 0
3 constraints
 1	0	0	= 0
 0	-1	78	>= 0
 0	1	-26	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 1, Symbols: 0, Locals: 0
1 constraints
 1	0	= 0

FM input (eliminate pos 2):
Domain: 0, Range: 3, Symbols: 0, Locals: 0
5 constraints
 1	0	0	0	= 0
 0	-1	0	78	>= 0
 0	-1	1	25	>= 0
 0	1	-1	25	>= 0
 0	1	0	-26	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 2, Symbols: 0, Locals: 0
3 constraints
 1	0	0	= 0
 0	-1	78	>= 0
 0	1	-26	>= 0

FM input (eliminate pos 1):
Domain: 0, Range: 2, Symbols: 0, Locals: 0
3 constraints
 1	0	0	= 0
 0	-1	78	>= 0
 0	1	-26	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 1, Symbols: 0, Locals: 0
1 constraints
 1	0	= 0

FM input (eliminate pos 1):
Domain: 0, Range: 2, Symbols: 0, Locals: 0
4 constraints
 -1	0	78	>= 0
 -1	1	25	>= 0
 1	-1	25	>= 0
 1	0	-26	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 1, Symbols: 0, Locals: 0
2 constraints
 -1	78	>= 0
 1	-26	>= 0

FM input (eliminate pos 1):
Domain: 0, Range: 2, Symbols: 0, Locals: 0
4 constraints
 -1	0	78	>= 0
 -1	1	25	>= 0
 1	-1	25	>= 0
 1	0	-26	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 1, Symbols: 0, Locals: 0
2 constraints
 -1	78	>= 0
 1	-26	>= 0

FM input (eliminate pos 0):
Domain: 0, Range: 4, Symbols: 0, Locals: 0
6 constraints
 0	1	0	0	0	= 0
 0	0	1	0	0	= 0
 -1	0	0	0	78	>= 0
 -1	0	0	1	25	>= 0
 1	0	0	-1	25	>= 0
 1	0	0	0	-26	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 3, Symbols: 0, Locals: 0
4 constraints
 1	0	0	0	= 0
 0	1	0	0	= 0
 0	0	-1	103	>= 0
 0	0	1	-1	>= 0

FM input (eliminate pos 1):
Domain: 0, Range: 2, Symbols: 0, Locals: 0
3 constraints
 1	0	0	= 0
 0	-1	103	>= 0
 0	1	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 1, Symbols: 0, Locals: 0
1 constraints
 1	0	= 0

FM input (eliminate pos 0):
Domain: 0, Range: 4, Symbols: 0, Locals: 0
6 constraints
 0	1	0	0	0	= 0
 0	0	1	0	0	= 0
 -1	0	0	0	78	>= 0
 -1	0	0	1	25	>= 0
 1	0	0	-1	25	>= 0
 1	0	0	0	-26	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 3, Symbols: 0, Locals: 0
4 constraints
 1	0	0	0	= 0
 0	1	0	0	= 0
 0	0	-1	103	>= 0
 0	0	1	-1	>= 0

FM input (eliminate pos 1):
Domain: 0, Range: 2, Symbols: 0, Locals: 0
3 constraints
 1	0	0	= 0
 0	-1	103	>= 0
 0	1	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 1, Symbols: 0, Locals: 0
1 constraints
 1	0	= 0

FM input (eliminate pos 0):
Domain: 0, Range: 3, Symbols: 0, Locals: 0
5 constraints
 0	1	0	0	= 0
 -1	0	0	78	>= 0
 -1	0	1	25	>= 0
 1	0	-1	25	>= 0
 1	0	0	-26	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 2, Symbols: 0, Locals: 0
3 constraints
 1	0	0	= 0
 0	-1	103	>= 0
 0	1	-1	>= 0

FM input (eliminate pos 1):
Domain: 0, Range: 2, Symbols: 0, Locals: 0
3 constraints
 1	0	0	= 0
 0	-1	103	>= 0
 0	1	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 1, Symbols: 0, Locals: 0
1 constraints
 1	0	= 0

FM input (eliminate pos 0):
Domain: 0, Range: 3, Symbols: 0, Locals: 0
5 constraints
 0	1	0	0	= 0
 -1	0	0	78	>= 0
 -1	0	1	25	>= 0
 1	0	-1	25	>= 0
 1	0	0	-26	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 2, Symbols: 0, Locals: 0
3 constraints
 1	0	0	= 0
 0	-1	103	>= 0
 0	1	-1	>= 0

FM input (eliminate pos 1):
Domain: 0, Range: 2, Symbols: 0, Locals: 0
3 constraints
 1	0	0	= 0
 0	-1	103	>= 0
 0	1	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 1, Symbols: 0, Locals: 0
1 constraints
 1	0	= 0

FM input (eliminate pos 0):
Domain: 0, Range: 2, Symbols: 0, Locals: 0
4 constraints
 -1	0	78	>= 0
 -1	1	25	>= 0
 1	-1	25	>= 0
 1	0	-26	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 1, Symbols: 0, Locals: 0
2 constraints
 -1	103	>= 0
 1	-1	>= 0

FM input (eliminate pos 0):
Domain: 0, Range: 2, Symbols: 0, Locals: 0
4 constraints
 -1	0	78	>= 0
 -1	1	25	>= 0
 1	-1	25	>= 0
 1	0	-26	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 1, Symbols: 0, Locals: 0
2 constraints
 -1	103	>= 0
 1	-1	>= 0

Dependence polyhedron:
Domain: 0, Range: 6, Symbols: 0, Locals: 0
8 constraints
(None	None	None	None	None	None	const)
 1	0	0	0	0	0	0	= 0
 0	1	0	0	0	0	0	= 0
 0	0	0	1	0	0	0	= 0
 0	0	0	0	1	0	0	= 0
 0	0	-1	0	0	0	78	>= 0
 0	0	-1	0	0	1	25	>= 0
 0	0	1	0	0	-1	25	>= 0
 0	0	1	0	0	0	-26	>= 0

Checking whether tiling legality violated for dependence at depth: 3 between:
mlir-asm-printer: Verifying operation: func.func
%2 = affine.load %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
affine.store %6, %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 3 between:
mlir-asm-printer: Verifying operation: func.func
affine.store %6, %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
%0 = affine.load %arg0[%arg6, %arg8] : memref<104x104xi8, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 3 between:
mlir-asm-printer: Verifying operation: func.func
affine.store %6, %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
%1 = affine.load %arg1[%arg8, %arg7] : memref<104x104xi8, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 3 between:
mlir-asm-printer: Verifying operation: func.func
affine.store %6, %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
%2 = affine.load %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
FM input (eliminate pos 0):
Domain: 0, Range: 4, Symbols: 0, Locals: 4
37 constraints
 0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	-1	3	>= 0
 0	1	0	0	0	-8	0	0	0	>= 0
 0	-1	0	0	0	8	0	0	7	>= 0
 0	0	1	0	0	0	-8	0	0	>= 0
 0	0	-1	0	0	0	8	0	7	>= 0
 1	0	0	0	0	0	0	-26	0	>= 0
 -1	0	0	0	0	0	0	26	25	>= 0
 0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	1	0	0	0	0	>= 0
 0	0	0	0	-1	0	0	0	3	>= 0
 0	1	0	0	0	-8	0	0	0	>= 0
 0	-1	0	0	0	8	0	0	7	>= 0
 0	0	1	0	0	0	-8	0	0	>= 0
 0	0	-1	0	0	0	8	0	7	>= 0
 0	0	0	1	-26	0	0	0	0	>= 0
 0	0	0	-1	26	0	0	0	25	>= 0
 0	0	0	0	1	0	0	-1	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 3, Symbols: 0, Locals: 4
15 constraints
 0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	-1	3	>= 0
 1	0	0	0	-8	0	0	0	>= 0
 -1	0	0	0	8	0	0	7	>= 0
 0	1	0	0	0	-8	0	0	>= 0
 0	-1	0	0	0	8	0	7	>= 0
 0	0	0	1	0	0	0	0	>= 0
 0	0	0	-1	0	0	0	3	>= 0
 0	0	1	-26	0	0	0	0	>= 0
 0	0	-1	26	0	0	0	25	>= 0
 0	0	0	1	0	0	-1	-1	>= 0

FM input (eliminate pos 0):
Domain: 0, Range: 3, Symbols: 0, Locals: 4
15 constraints
 0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	-1	3	>= 0
 1	0	0	0	-8	0	0	0	>= 0
 -1	0	0	0	8	0	0	7	>= 0
 0	1	0	0	0	-8	0	0	>= 0
 0	-1	0	0	0	8	0	7	>= 0
 0	0	0	1	0	0	0	0	>= 0
 0	0	0	-1	0	0	0	3	>= 0
 0	0	1	-26	0	0	0	0	>= 0
 0	0	-1	26	0	0	0	25	>= 0
 0	0	0	1	0	0	-1	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 2, Symbols: 0, Locals: 4
13 constraints
 0	0	0	1	0	0	0	>= 0
 0	0	0	-1	0	0	12	>= 0
 0	0	0	0	1	0	0	>= 0
 0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	-1	3	>= 0
 1	0	0	0	-8	0	0	>= 0
 -1	0	0	0	8	0	7	>= 0
 0	0	1	0	0	0	0	>= 0
 0	0	-1	0	0	0	3	>= 0
 0	1	-26	0	0	0	0	>= 0
 0	-1	26	0	0	0	25	>= 0
 0	0	1	0	0	-1	-1	>= 0

FM input (eliminate pos 0):
Domain: 0, Range: 2, Symbols: 0, Locals: 4
13 constraints
 0	0	0	1	0	0	0	>= 0
 0	0	0	-1	0	0	12	>= 0
 0	0	0	0	1	0	0	>= 0
 0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	-1	3	>= 0
 1	0	0	0	-8	0	0	>= 0
 -1	0	0	0	8	0	7	>= 0
 0	0	1	0	0	0	0	>= 0
 0	0	-1	0	0	0	3	>= 0
 0	1	-26	0	0	0	0	>= 0
 0	-1	26	0	0	0	25	>= 0
 0	0	1	0	0	-1	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 1, Symbols: 0, Locals: 4
11 constraints
 0	0	1	0	0	0	>= 0
 0	0	-1	0	0	12	>= 0
 0	0	0	1	0	0	>= 0
 0	0	0	-1	0	12	>= 0
 0	0	0	0	1	0	>= 0
 0	0	0	0	-1	3	>= 0
 0	1	0	0	0	0	>= 0
 0	-1	0	0	0	3	>= 0
 1	-26	0	0	0	0	>= 0
 -1	26	0	0	0	25	>= 0
 0	1	0	0	-1	-1	>= 0

FM input (eliminate pos 0):
Domain: 0, Range: 1, Symbols: 0, Locals: 4
11 constraints
 0	0	1	0	0	0	>= 0
 0	0	-1	0	0	12	>= 0
 0	0	0	1	0	0	>= 0
 0	0	0	-1	0	12	>= 0
 0	0	0	0	1	0	>= 0
 0	0	0	0	-1	3	>= 0
 0	1	0	0	0	0	>= 0
 0	-1	0	0	0	3	>= 0
 1	-26	0	0	0	0	>= 0
 -1	26	0	0	0	25	>= 0
 0	1	0	0	-1	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 0, Symbols: 0, Locals: 4
9 constraints
 0	1	0	0	0	>= 0
 0	-1	0	0	12	>= 0
 0	0	1	0	0	>= 0
 0	0	-1	0	12	>= 0
 0	0	0	1	0	>= 0
 0	0	0	-1	3	>= 0
 1	0	0	0	0	>= 0
 -1	0	0	0	3	>= 0
 1	0	0	-1	-1	>= 0

FM input (eliminate pos 1):
Domain: 0, Range: 0, Symbols: 0, Locals: 4
9 constraints
 0	1	0	0	0	>= 0
 0	-1	0	0	12	>= 0
 0	0	1	0	0	>= 0
 0	0	-1	0	12	>= 0
 0	0	0	1	0	>= 0
 0	0	0	-1	3	>= 0
 1	0	0	0	0	>= 0
 -1	0	0	0	3	>= 0
 1	0	0	-1	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 0, Symbols: 0, Locals: 3
7 constraints
 0	1	0	0	>= 0
 0	-1	0	12	>= 0
 0	0	1	0	>= 0
 0	0	-1	3	>= 0
 1	0	0	0	>= 0
 -1	0	0	3	>= 0
 1	0	-1	-1	>= 0

FM input (eliminate pos 1):
Domain: 0, Range: 0, Symbols: 0, Locals: 3
7 constraints
 0	1	0	0	>= 0
 0	-1	0	12	>= 0
 0	0	1	0	>= 0
 0	0	-1	3	>= 0
 1	0	0	0	>= 0
 -1	0	0	3	>= 0
 1	0	-1	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 0, Symbols: 0, Locals: 2
5 constraints
 0	1	0	>= 0
 0	-1	3	>= 0
 1	0	0	>= 0
 -1	0	3	>= 0
 1	-1	-1	>= 0

FM input (eliminate pos 0):
Domain: 0, Range: 0, Symbols: 0, Locals: 2
5 constraints
 0	1	0	>= 0
 0	-1	3	>= 0
 1	0	0	>= 0
 -1	0	3	>= 0
 1	-1	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 0, Symbols: 0, Locals: 1
2 constraints
 -1	2	>= 0
 1	0	>= 0

FM input (eliminate pos 0):
Domain: 0, Range: 0, Symbols: 0, Locals: 1
2 constraints
 -1	2	>= 0
 1	0	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 0, Symbols: 0, Locals: 0
0 constraints

FM input (eliminate pos 6):
Domain: 0, Range: 9, Symbols: 0, Locals: 3
41 constraints
(None	None	None	None	None	None	Value	Value	Value	Local	Local	Local	const)
 1	0	0	0	0	0	0	0	0	0	0	0	0	= 0
 0	1	0	0	0	0	0	0	0	0	0	0	0	= 0
 0	0	0	1	0	0	0	0	0	0	0	0	0	= 0
 0	0	0	0	1	0	0	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	0	0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	0	0	0	0	-1	3	>= 0
 0	0	0	0	0	0	1	0	0	-8	0	0	0	>= 0
 0	0	0	0	0	0	-1	0	0	8	0	0	7	>= 0
 0	0	0	0	0	0	0	1	0	0	-8	0	0	>= 0
 0	0	0	0	0	0	0	-1	0	0	8	0	7	>= 0
 0	0	0	0	0	-1	0	0	1	0	0	-26	0	>= 0
 0	0	0	0	0	1	0	0	-1	0	0	26	25	>= 0
 0	0	0	0	0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	0	0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	0	0	0	0	>= 0
 0	0	1	0	0	0	0	0	0	0	0	26	0	>= 0
 0	0	-1	0	0	0	0	0	0	0	0	-26	78	>= 0
 0	0	0	0	0	0	1	0	0	-8	0	0	0	>= 0
 0	0	0	0	0	0	-1	0	0	8	0	0	7	>= 0
 0	0	0	0	0	0	0	1	0	0	-8	0	0	>= 0
 0	0	0	0	0	0	0	-1	0	0	8	0	7	>= 0
 0	0	-1	0	0	0	0	0	1	0	0	-26	0	>= 0
 0	0	1	0	0	0	0	0	-1	0	0	26	25	>= 0
 0	0	1	0	0	0	0	0	0	0	0	0	-26	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 8, Symbols: 0, Locals: 3
19 constraints
(None	None	None	None	None	None	None	None	Local	Local	Local	const)
 1	0	0	0	0	0	0	0	0	0	0	0	= 0
 0	1	0	0	0	0	0	0	0	0	0	0	= 0
 0	0	0	1	0	0	0	0	0	0	0	0	= 0
 0	0	0	0	1	0	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	0	0	0	-1	3	>= 0
 0	0	0	0	0	0	1	0	0	-8	0	0	>= 0
 0	0	0	0	0	0	-1	0	0	8	0	7	>= 0
 0	0	0	0	0	-1	0	1	0	0	-26	0	>= 0
 0	0	0	0	0	1	0	-1	0	0	26	25	>= 0
 0	0	1	0	0	0	0	0	0	0	26	0	>= 0
 0	0	-1	0	0	0	0	0	0	0	-26	78	>= 0
 0	0	-1	0	0	0	0	1	0	0	-26	0	>= 0
 0	0	1	0	0	0	0	-1	0	0	26	25	>= 0
 0	0	1	0	0	0	0	0	0	0	0	-26	>= 0

FM input (eliminate pos 6):
Domain: 0, Range: 8, Symbols: 0, Locals: 3
19 constraints
(None	None	None	None	None	None	Value	Value	Local	Local	Local	const)
 1	0	0	0	0	0	0	0	0	0	0	0	= 0
 0	1	0	0	0	0	0	0	0	0	0	0	= 0
 0	0	0	1	0	0	0	0	0	0	0	0	= 0
 0	0	0	0	1	0	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	0	0	0	-1	3	>= 0
 0	0	0	0	0	0	1	0	0	-8	0	0	>= 0
 0	0	0	0	0	0	-1	0	0	8	0	7	>= 0
 0	0	0	0	0	-1	0	1	0	0	-26	0	>= 0
 0	0	0	0	0	1	0	-1	0	0	26	25	>= 0
 0	0	1	0	0	0	0	0	0	0	26	0	>= 0
 0	0	-1	0	0	0	0	0	0	0	-26	78	>= 0
 0	0	-1	0	0	0	0	1	0	0	-26	0	>= 0
 0	0	1	0	0	0	0	-1	0	0	26	25	>= 0
 0	0	1	0	0	0	0	0	0	0	0	-26	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 7, Symbols: 0, Locals: 3
17 constraints
(None	None	None	None	None	None	None	Local	Local	Local	const)
 1	0	0	0	0	0	0	0	0	0	0	= 0
 0	1	0	0	0	0	0	0	0	0	0	= 0
 0	0	0	1	0	0	0	0	0	0	0	= 0
 0	0	0	0	1	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	0	0	-1	3	>= 0
 0	0	0	0	0	-1	1	0	0	-26	0	>= 0
 0	0	0	0	0	1	-1	0	0	26	25	>= 0
 0	0	1	0	0	0	0	0	0	26	0	>= 0
 0	0	-1	0	0	0	0	0	0	-26	78	>= 0
 0	0	-1	0	0	0	1	0	0	-26	0	>= 0
 0	0	1	0	0	0	-1	0	0	26	25	>= 0
 0	0	1	0	0	0	0	0	0	0	-26	>= 0

FM input (eliminate pos 7):
Domain: 0, Range: 7, Symbols: 0, Locals: 3
17 constraints
(None	None	None	None	None	None	Value	Local	Local	Local	const)
 1	0	0	0	0	0	0	0	0	0	0	= 0
 0	1	0	0	0	0	0	0	0	0	0	= 0
 0	0	0	1	0	0	0	0	0	0	0	= 0
 0	0	0	0	1	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	0	0	-1	3	>= 0
 0	0	0	0	0	-1	1	0	0	-26	0	>= 0
 0	0	0	0	0	1	-1	0	0	26	25	>= 0
 0	0	1	0	0	0	0	0	0	26	0	>= 0
 0	0	-1	0	0	0	0	0	0	-26	78	>= 0
 0	0	-1	0	0	0	1	0	0	-26	0	>= 0
 0	0	1	0	0	0	-1	0	0	26	25	>= 0
 0	0	1	0	0	0	0	0	0	0	-26	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 7, Symbols: 0, Locals: 2
15 constraints
(None	None	None	None	None	None	None	Local	Local	const)
 1	0	0	0	0	0	0	0	0	0	= 0
 0	1	0	0	0	0	0	0	0	0	= 0
 0	0	0	1	0	0	0	0	0	0	= 0
 0	0	0	0	1	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	0	-1	3	>= 0
 0	0	0	0	0	-1	1	0	-26	0	>= 0
 0	0	0	0	0	1	-1	0	26	25	>= 0
 0	0	1	0	0	0	0	0	26	0	>= 0
 0	0	-1	0	0	0	0	0	-26	78	>= 0
 0	0	-1	0	0	0	1	0	-26	0	>= 0
 0	0	1	0	0	0	-1	0	26	25	>= 0
 0	0	1	0	0	0	0	0	0	-26	>= 0

FM input (eliminate pos 7):
Domain: 0, Range: 7, Symbols: 0, Locals: 2
15 constraints
(None	None	None	None	None	None	Value	Local	Local	const)
 1	0	0	0	0	0	0	0	0	0	= 0
 0	1	0	0	0	0	0	0	0	0	= 0
 0	0	0	1	0	0	0	0	0	0	= 0
 0	0	0	0	1	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	0	-1	3	>= 0
 0	0	0	0	0	-1	1	0	-26	0	>= 0
 0	0	0	0	0	1	-1	0	26	25	>= 0
 0	0	1	0	0	0	0	0	26	0	>= 0
 0	0	-1	0	0	0	0	0	-26	78	>= 0
 0	0	-1	0	0	0	1	0	-26	0	>= 0
 0	0	1	0	0	0	-1	0	26	25	>= 0
 0	0	1	0	0	0	0	0	0	-26	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 7, Symbols: 0, Locals: 1
13 constraints
(None	None	None	None	None	None	None	Local	const)
 1	0	0	0	0	0	0	0	0	= 0
 0	1	0	0	0	0	0	0	0	= 0
 0	0	0	1	0	0	0	0	0	= 0
 0	0	0	0	1	0	0	0	0	= 0
 0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	-1	3	>= 0
 0	0	0	0	0	-1	1	-26	0	>= 0
 0	0	0	0	0	1	-1	26	25	>= 0
 0	0	1	0	0	0	0	26	0	>= 0
 0	0	-1	0	0	0	0	-26	78	>= 0
 0	0	-1	0	0	0	1	-26	0	>= 0
 0	0	1	0	0	0	-1	26	25	>= 0
 0	0	1	0	0	0	0	0	-26	>= 0

FM input (eliminate pos 6):
Domain: 0, Range: 7, Symbols: 0, Locals: 1
13 constraints
(None	None	None	None	None	None	Value	Local	const)
 1	0	0	0	0	0	0	0	0	= 0
 0	1	0	0	0	0	0	0	0	= 0
 0	0	0	1	0	0	0	0	0	= 0
 0	0	0	0	1	0	0	0	0	= 0
 0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	-1	3	>= 0
 0	0	0	0	0	-1	1	-26	0	>= 0
 0	0	0	0	0	1	-1	26	25	>= 0
 0	0	1	0	0	0	0	26	0	>= 0
 0	0	-1	0	0	0	0	-26	78	>= 0
 0	0	-1	0	0	0	1	-26	0	>= 0
 0	0	1	0	0	0	-1	26	25	>= 0
 0	0	1	0	0	0	0	0	-26	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 6, Symbols: 0, Locals: 1
11 constraints
(None	None	None	None	None	None	Local	const)
 1	0	0	0	0	0	0	0	= 0
 0	1	0	0	0	0	0	0	= 0
 0	0	0	1	0	0	0	0	= 0
 0	0	0	0	1	0	0	0	= 0
 0	0	-1	0	0	1	0	25	>= 0
 0	0	1	0	0	-1	0	25	>= 0
 0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	-1	3	>= 0
 0	0	1	0	0	0	26	0	>= 0
 0	0	-1	0	0	0	-26	78	>= 0
 0	0	1	0	0	0	0	-26	>= 0

FM input (eliminate pos 6):
Domain: 0, Range: 6, Symbols: 0, Locals: 1
11 constraints
(None	None	None	None	None	None	Local	const)
 1	0	0	0	0	0	0	0	= 0
 0	1	0	0	0	0	0	0	= 0
 0	0	0	1	0	0	0	0	= 0
 0	0	0	0	1	0	0	0	= 0
 0	0	-1	0	0	1	0	25	>= 0
 0	0	1	0	0	-1	0	25	>= 0
 0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	-1	3	>= 0
 0	0	1	0	0	0	26	0	>= 0
 0	0	-1	0	0	0	-26	78	>= 0
 0	0	1	0	0	0	0	-26	>= 0

FM isResultIntegerExact: 0
FM output:
Domain: 0, Range: 6, Symbols: 0, Locals: 0
8 constraints
(None	None	None	None	None	None	const)
 1	0	0	0	0	0	0	= 0
 0	1	0	0	0	0	0	= 0
 0	0	0	1	0	0	0	= 0
 0	0	0	0	1	0	0	= 0
 0	0	-1	0	0	0	78	>= 0
 0	0	-1	0	0	1	25	>= 0
 0	0	1	0	0	-1	25	>= 0
 0	0	1	0	0	0	-26	>= 0

FM input (eliminate pos 2):
Domain: 0, Range: 3, Symbols: 0, Locals: 0
5 constraints
 1	0	0	0	= 0
 0	-1	0	78	>= 0
 0	-1	1	25	>= 0
 0	1	-1	25	>= 0
 0	1	0	-26	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 2, Symbols: 0, Locals: 0
3 constraints
 1	0	0	= 0
 0	-1	78	>= 0
 0	1	-26	>= 0

FM input (eliminate pos 1):
Domain: 0, Range: 2, Symbols: 0, Locals: 0
3 constraints
 1	0	0	= 0
 0	-1	78	>= 0
 0	1	-26	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 1, Symbols: 0, Locals: 0
1 constraints
 1	0	= 0

FM input (eliminate pos 2):
Domain: 0, Range: 3, Symbols: 0, Locals: 0
5 constraints
 1	0	0	0	= 0
 0	-1	0	78	>= 0
 0	-1	1	25	>= 0
 0	1	-1	25	>= 0
 0	1	0	-26	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 2, Symbols: 0, Locals: 0
3 constraints
 1	0	0	= 0
 0	-1	78	>= 0
 0	1	-26	>= 0

FM input (eliminate pos 1):
Domain: 0, Range: 2, Symbols: 0, Locals: 0
3 constraints
 1	0	0	= 0
 0	-1	78	>= 0
 0	1	-26	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 1, Symbols: 0, Locals: 0
1 constraints
 1	0	= 0

FM input (eliminate pos 2):
Domain: 0, Range: 3, Symbols: 0, Locals: 0
5 constraints
 1	0	0	0	= 0
 0	-1	0	78	>= 0
 0	-1	1	25	>= 0
 0	1	-1	25	>= 0
 0	1	0	-26	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 2, Symbols: 0, Locals: 0
3 constraints
 1	0	0	= 0
 0	-1	78	>= 0
 0	1	-26	>= 0

FM input (eliminate pos 1):
Domain: 0, Range: 2, Symbols: 0, Locals: 0
3 constraints
 1	0	0	= 0
 0	-1	78	>= 0
 0	1	-26	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 1, Symbols: 0, Locals: 0
1 constraints
 1	0	= 0

FM input (eliminate pos 2):
Domain: 0, Range: 3, Symbols: 0, Locals: 0
5 constraints
 1	0	0	0	= 0
 0	-1	0	78	>= 0
 0	-1	1	25	>= 0
 0	1	-1	25	>= 0
 0	1	0	-26	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 2, Symbols: 0, Locals: 0
3 constraints
 1	0	0	= 0
 0	-1	78	>= 0
 0	1	-26	>= 0

FM input (eliminate pos 1):
Domain: 0, Range: 2, Symbols: 0, Locals: 0
3 constraints
 1	0	0	= 0
 0	-1	78	>= 0
 0	1	-26	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 1, Symbols: 0, Locals: 0
1 constraints
 1	0	= 0

FM input (eliminate pos 1):
Domain: 0, Range: 2, Symbols: 0, Locals: 0
4 constraints
 -1	0	78	>= 0
 -1	1	25	>= 0
 1	-1	25	>= 0
 1	0	-26	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 1, Symbols: 0, Locals: 0
2 constraints
 -1	78	>= 0
 1	-26	>= 0

FM input (eliminate pos 1):
Domain: 0, Range: 2, Symbols: 0, Locals: 0
4 constraints
 -1	0	78	>= 0
 -1	1	25	>= 0
 1	-1	25	>= 0
 1	0	-26	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 1, Symbols: 0, Locals: 0
2 constraints
 -1	78	>= 0
 1	-26	>= 0

FM input (eliminate pos 0):
Domain: 0, Range: 4, Symbols: 0, Locals: 0
6 constraints
 0	1	0	0	0	= 0
 0	0	1	0	0	= 0
 -1	0	0	0	78	>= 0
 -1	0	0	1	25	>= 0
 1	0	0	-1	25	>= 0
 1	0	0	0	-26	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 3, Symbols: 0, Locals: 0
4 constraints
 1	0	0	0	= 0
 0	1	0	0	= 0
 0	0	-1	103	>= 0
 0	0	1	-1	>= 0

FM input (eliminate pos 1):
Domain: 0, Range: 2, Symbols: 0, Locals: 0
3 constraints
 1	0	0	= 0
 0	-1	103	>= 0
 0	1	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 1, Symbols: 0, Locals: 0
1 constraints
 1	0	= 0

FM input (eliminate pos 0):
Domain: 0, Range: 4, Symbols: 0, Locals: 0
6 constraints
 0	1	0	0	0	= 0
 0	0	1	0	0	= 0
 -1	0	0	0	78	>= 0
 -1	0	0	1	25	>= 0
 1	0	0	-1	25	>= 0
 1	0	0	0	-26	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 3, Symbols: 0, Locals: 0
4 constraints
 1	0	0	0	= 0
 0	1	0	0	= 0
 0	0	-1	103	>= 0
 0	0	1	-1	>= 0

FM input (eliminate pos 1):
Domain: 0, Range: 2, Symbols: 0, Locals: 0
3 constraints
 1	0	0	= 0
 0	-1	103	>= 0
 0	1	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 1, Symbols: 0, Locals: 0
1 constraints
 1	0	= 0

FM input (eliminate pos 0):
Domain: 0, Range: 3, Symbols: 0, Locals: 0
5 constraints
 0	1	0	0	= 0
 -1	0	0	78	>= 0
 -1	0	1	25	>= 0
 1	0	-1	25	>= 0
 1	0	0	-26	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 2, Symbols: 0, Locals: 0
3 constraints
 1	0	0	= 0
 0	-1	103	>= 0
 0	1	-1	>= 0

FM input (eliminate pos 1):
Domain: 0, Range: 2, Symbols: 0, Locals: 0
3 constraints
 1	0	0	= 0
 0	-1	103	>= 0
 0	1	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 1, Symbols: 0, Locals: 0
1 constraints
 1	0	= 0

FM input (eliminate pos 0):
Domain: 0, Range: 3, Symbols: 0, Locals: 0
5 constraints
 0	1	0	0	= 0
 -1	0	0	78	>= 0
 -1	0	1	25	>= 0
 1	0	-1	25	>= 0
 1	0	0	-26	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 2, Symbols: 0, Locals: 0
3 constraints
 1	0	0	= 0
 0	-1	103	>= 0
 0	1	-1	>= 0

FM input (eliminate pos 1):
Domain: 0, Range: 2, Symbols: 0, Locals: 0
3 constraints
 1	0	0	= 0
 0	-1	103	>= 0
 0	1	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 1, Symbols: 0, Locals: 0
1 constraints
 1	0	= 0

FM input (eliminate pos 0):
Domain: 0, Range: 2, Symbols: 0, Locals: 0
4 constraints
 -1	0	78	>= 0
 -1	1	25	>= 0
 1	-1	25	>= 0
 1	0	-26	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 1, Symbols: 0, Locals: 0
2 constraints
 -1	103	>= 0
 1	-1	>= 0

FM input (eliminate pos 0):
Domain: 0, Range: 2, Symbols: 0, Locals: 0
4 constraints
 -1	0	78	>= 0
 -1	1	25	>= 0
 1	-1	25	>= 0
 1	0	-26	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 1, Symbols: 0, Locals: 0
2 constraints
 -1	103	>= 0
 1	-1	>= 0

Dependence polyhedron:
Domain: 0, Range: 6, Symbols: 0, Locals: 0
8 constraints
(None	None	None	None	None	None	const)
 1	0	0	0	0	0	0	= 0
 0	1	0	0	0	0	0	= 0
 0	0	0	1	0	0	0	= 0
 0	0	0	0	1	0	0	= 0
 0	0	-1	0	0	0	78	>= 0
 0	0	-1	0	0	1	25	>= 0
 0	0	1	0	0	-1	25	>= 0
 0	0	1	0	0	0	-26	>= 0

Checking whether tiling legality violated for dependence at depth: 3 between:
mlir-asm-printer: Verifying operation: func.func
affine.store %6, %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
%2 = affine.load %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 3 between:
mlir-asm-printer: Verifying operation: func.func
affine.store %6, %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
affine.store %6, %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
FM input (eliminate pos 0):
Domain: 0, Range: 4, Symbols: 0, Locals: 4
37 constraints
 0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	-1	3	>= 0
 0	1	0	0	0	-8	0	0	0	>= 0
 0	-1	0	0	0	8	0	0	7	>= 0
 0	0	1	0	0	0	-8	0	0	>= 0
 0	0	-1	0	0	0	8	0	7	>= 0
 1	0	0	0	0	0	0	-26	0	>= 0
 -1	0	0	0	0	0	0	26	25	>= 0
 0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	1	0	0	0	0	>= 0
 0	0	0	0	-1	0	0	0	3	>= 0
 0	1	0	0	0	-8	0	0	0	>= 0
 0	-1	0	0	0	8	0	0	7	>= 0
 0	0	1	0	0	0	-8	0	0	>= 0
 0	0	-1	0	0	0	8	0	7	>= 0
 0	0	0	1	-26	0	0	0	0	>= 0
 0	0	0	-1	26	0	0	0	25	>= 0
 0	0	0	0	1	0	0	-1	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 3, Symbols: 0, Locals: 4
15 constraints
 0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	-1	3	>= 0
 1	0	0	0	-8	0	0	0	>= 0
 -1	0	0	0	8	0	0	7	>= 0
 0	1	0	0	0	-8	0	0	>= 0
 0	-1	0	0	0	8	0	7	>= 0
 0	0	0	1	0	0	0	0	>= 0
 0	0	0	-1	0	0	0	3	>= 0
 0	0	1	-26	0	0	0	0	>= 0
 0	0	-1	26	0	0	0	25	>= 0
 0	0	0	1	0	0	-1	-1	>= 0

FM input (eliminate pos 0):
Domain: 0, Range: 3, Symbols: 0, Locals: 4
15 constraints
 0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	-1	3	>= 0
 1	0	0	0	-8	0	0	0	>= 0
 -1	0	0	0	8	0	0	7	>= 0
 0	1	0	0	0	-8	0	0	>= 0
 0	-1	0	0	0	8	0	7	>= 0
 0	0	0	1	0	0	0	0	>= 0
 0	0	0	-1	0	0	0	3	>= 0
 0	0	1	-26	0	0	0	0	>= 0
 0	0	-1	26	0	0	0	25	>= 0
 0	0	0	1	0	0	-1	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 2, Symbols: 0, Locals: 4
13 constraints
 0	0	0	1	0	0	0	>= 0
 0	0	0	-1	0	0	12	>= 0
 0	0	0	0	1	0	0	>= 0
 0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	-1	3	>= 0
 1	0	0	0	-8	0	0	>= 0
 -1	0	0	0	8	0	7	>= 0
 0	0	1	0	0	0	0	>= 0
 0	0	-1	0	0	0	3	>= 0
 0	1	-26	0	0	0	0	>= 0
 0	-1	26	0	0	0	25	>= 0
 0	0	1	0	0	-1	-1	>= 0

FM input (eliminate pos 0):
Domain: 0, Range: 2, Symbols: 0, Locals: 4
13 constraints
 0	0	0	1	0	0	0	>= 0
 0	0	0	-1	0	0	12	>= 0
 0	0	0	0	1	0	0	>= 0
 0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	-1	3	>= 0
 1	0	0	0	-8	0	0	>= 0
 -1	0	0	0	8	0	7	>= 0
 0	0	1	0	0	0	0	>= 0
 0	0	-1	0	0	0	3	>= 0
 0	1	-26	0	0	0	0	>= 0
 0	-1	26	0	0	0	25	>= 0
 0	0	1	0	0	-1	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 1, Symbols: 0, Locals: 4
11 constraints
 0	0	1	0	0	0	>= 0
 0	0	-1	0	0	12	>= 0
 0	0	0	1	0	0	>= 0
 0	0	0	-1	0	12	>= 0
 0	0	0	0	1	0	>= 0
 0	0	0	0	-1	3	>= 0
 0	1	0	0	0	0	>= 0
 0	-1	0	0	0	3	>= 0
 1	-26	0	0	0	0	>= 0
 -1	26	0	0	0	25	>= 0
 0	1	0	0	-1	-1	>= 0

FM input (eliminate pos 0):
Domain: 0, Range: 1, Symbols: 0, Locals: 4
11 constraints
 0	0	1	0	0	0	>= 0
 0	0	-1	0	0	12	>= 0
 0	0	0	1	0	0	>= 0
 0	0	0	-1	0	12	>= 0
 0	0	0	0	1	0	>= 0
 0	0	0	0	-1	3	>= 0
 0	1	0	0	0	0	>= 0
 0	-1	0	0	0	3	>= 0
 1	-26	0	0	0	0	>= 0
 -1	26	0	0	0	25	>= 0
 0	1	0	0	-1	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 0, Symbols: 0, Locals: 4
9 constraints
 0	1	0	0	0	>= 0
 0	-1	0	0	12	>= 0
 0	0	1	0	0	>= 0
 0	0	-1	0	12	>= 0
 0	0	0	1	0	>= 0
 0	0	0	-1	3	>= 0
 1	0	0	0	0	>= 0
 -1	0	0	0	3	>= 0
 1	0	0	-1	-1	>= 0

FM input (eliminate pos 1):
Domain: 0, Range: 0, Symbols: 0, Locals: 4
9 constraints
 0	1	0	0	0	>= 0
 0	-1	0	0	12	>= 0
 0	0	1	0	0	>= 0
 0	0	-1	0	12	>= 0
 0	0	0	1	0	>= 0
 0	0	0	-1	3	>= 0
 1	0	0	0	0	>= 0
 -1	0	0	0	3	>= 0
 1	0	0	-1	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 0, Symbols: 0, Locals: 3
7 constraints
 0	1	0	0	>= 0
 0	-1	0	12	>= 0
 0	0	1	0	>= 0
 0	0	-1	3	>= 0
 1	0	0	0	>= 0
 -1	0	0	3	>= 0
 1	0	-1	-1	>= 0

FM input (eliminate pos 1):
Domain: 0, Range: 0, Symbols: 0, Locals: 3
7 constraints
 0	1	0	0	>= 0
 0	-1	0	12	>= 0
 0	0	1	0	>= 0
 0	0	-1	3	>= 0
 1	0	0	0	>= 0
 -1	0	0	3	>= 0
 1	0	-1	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 0, Symbols: 0, Locals: 2
5 constraints
 0	1	0	>= 0
 0	-1	3	>= 0
 1	0	0	>= 0
 -1	0	3	>= 0
 1	-1	-1	>= 0

FM input (eliminate pos 0):
Domain: 0, Range: 0, Symbols: 0, Locals: 2
5 constraints
 0	1	0	>= 0
 0	-1	3	>= 0
 1	0	0	>= 0
 -1	0	3	>= 0
 1	-1	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 0, Symbols: 0, Locals: 1
2 constraints
 -1	2	>= 0
 1	0	>= 0

FM input (eliminate pos 0):
Domain: 0, Range: 0, Symbols: 0, Locals: 1
2 constraints
 -1	2	>= 0
 1	0	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 0, Symbols: 0, Locals: 0
0 constraints

FM input (eliminate pos 6):
Domain: 0, Range: 9, Symbols: 0, Locals: 3
41 constraints
(None	None	None	None	None	None	Value	Value	Value	Local	Local	Local	const)
 1	0	0	0	0	0	0	0	0	0	0	0	0	= 0
 0	1	0	0	0	0	0	0	0	0	0	0	0	= 0
 0	0	0	1	0	0	0	0	0	0	0	0	0	= 0
 0	0	0	0	1	0	0	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	0	0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	0	0	0	0	-1	3	>= 0
 0	0	0	0	0	0	1	0	0	-8	0	0	0	>= 0
 0	0	0	0	0	0	-1	0	0	8	0	0	7	>= 0
 0	0	0	0	0	0	0	1	0	0	-8	0	0	>= 0
 0	0	0	0	0	0	0	-1	0	0	8	0	7	>= 0
 0	0	0	0	0	-1	0	0	1	0	0	-26	0	>= 0
 0	0	0	0	0	1	0	0	-1	0	0	26	25	>= 0
 0	0	0	0	0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	0	0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	0	0	0	0	>= 0
 0	0	1	0	0	0	0	0	0	0	0	26	0	>= 0
 0	0	-1	0	0	0	0	0	0	0	0	-26	78	>= 0
 0	0	0	0	0	0	1	0	0	-8	0	0	0	>= 0
 0	0	0	0	0	0	-1	0	0	8	0	0	7	>= 0
 0	0	0	0	0	0	0	1	0	0	-8	0	0	>= 0
 0	0	0	0	0	0	0	-1	0	0	8	0	7	>= 0
 0	0	-1	0	0	0	0	0	1	0	0	-26	0	>= 0
 0	0	1	0	0	0	0	0	-1	0	0	26	25	>= 0
 0	0	1	0	0	0	0	0	0	0	0	0	-26	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 8, Symbols: 0, Locals: 3
19 constraints
(None	None	None	None	None	None	None	None	Local	Local	Local	const)
 1	0	0	0	0	0	0	0	0	0	0	0	= 0
 0	1	0	0	0	0	0	0	0	0	0	0	= 0
 0	0	0	1	0	0	0	0	0	0	0	0	= 0
 0	0	0	0	1	0	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	0	0	0	-1	3	>= 0
 0	0	0	0	0	0	1	0	0	-8	0	0	>= 0
 0	0	0	0	0	0	-1	0	0	8	0	7	>= 0
 0	0	0	0	0	-1	0	1	0	0	-26	0	>= 0
 0	0	0	0	0	1	0	-1	0	0	26	25	>= 0
 0	0	1	0	0	0	0	0	0	0	26	0	>= 0
 0	0	-1	0	0	0	0	0	0	0	-26	78	>= 0
 0	0	-1	0	0	0	0	1	0	0	-26	0	>= 0
 0	0	1	0	0	0	0	-1	0	0	26	25	>= 0
 0	0	1	0	0	0	0	0	0	0	0	-26	>= 0

FM input (eliminate pos 6):
Domain: 0, Range: 8, Symbols: 0, Locals: 3
19 constraints
(None	None	None	None	None	None	Value	Value	Local	Local	Local	const)
 1	0	0	0	0	0	0	0	0	0	0	0	= 0
 0	1	0	0	0	0	0	0	0	0	0	0	= 0
 0	0	0	1	0	0	0	0	0	0	0	0	= 0
 0	0	0	0	1	0	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	0	0	0	-1	3	>= 0
 0	0	0	0	0	0	1	0	0	-8	0	0	>= 0
 0	0	0	0	0	0	-1	0	0	8	0	7	>= 0
 0	0	0	0	0	-1	0	1	0	0	-26	0	>= 0
 0	0	0	0	0	1	0	-1	0	0	26	25	>= 0
 0	0	1	0	0	0	0	0	0	0	26	0	>= 0
 0	0	-1	0	0	0	0	0	0	0	-26	78	>= 0
 0	0	-1	0	0	0	0	1	0	0	-26	0	>= 0
 0	0	1	0	0	0	0	-1	0	0	26	25	>= 0
 0	0	1	0	0	0	0	0	0	0	0	-26	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 7, Symbols: 0, Locals: 3
17 constraints
(None	None	None	None	None	None	None	Local	Local	Local	const)
 1	0	0	0	0	0	0	0	0	0	0	= 0
 0	1	0	0	0	0	0	0	0	0	0	= 0
 0	0	0	1	0	0	0	0	0	0	0	= 0
 0	0	0	0	1	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	0	0	-1	3	>= 0
 0	0	0	0	0	-1	1	0	0	-26	0	>= 0
 0	0	0	0	0	1	-1	0	0	26	25	>= 0
 0	0	1	0	0	0	0	0	0	26	0	>= 0
 0	0	-1	0	0	0	0	0	0	-26	78	>= 0
 0	0	-1	0	0	0	1	0	0	-26	0	>= 0
 0	0	1	0	0	0	-1	0	0	26	25	>= 0
 0	0	1	0	0	0	0	0	0	0	-26	>= 0

FM input (eliminate pos 7):
Domain: 0, Range: 7, Symbols: 0, Locals: 3
17 constraints
(None	None	None	None	None	None	Value	Local	Local	Local	const)
 1	0	0	0	0	0	0	0	0	0	0	= 0
 0	1	0	0	0	0	0	0	0	0	0	= 0
 0	0	0	1	0	0	0	0	0	0	0	= 0
 0	0	0	0	1	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	0	0	-1	3	>= 0
 0	0	0	0	0	-1	1	0	0	-26	0	>= 0
 0	0	0	0	0	1	-1	0	0	26	25	>= 0
 0	0	1	0	0	0	0	0	0	26	0	>= 0
 0	0	-1	0	0	0	0	0	0	-26	78	>= 0
 0	0	-1	0	0	0	1	0	0	-26	0	>= 0
 0	0	1	0	0	0	-1	0	0	26	25	>= 0
 0	0	1	0	0	0	0	0	0	0	-26	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 7, Symbols: 0, Locals: 2
15 constraints
(None	None	None	None	None	None	None	Local	Local	const)
 1	0	0	0	0	0	0	0	0	0	= 0
 0	1	0	0	0	0	0	0	0	0	= 0
 0	0	0	1	0	0	0	0	0	0	= 0
 0	0	0	0	1	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	0	-1	3	>= 0
 0	0	0	0	0	-1	1	0	-26	0	>= 0
 0	0	0	0	0	1	-1	0	26	25	>= 0
 0	0	1	0	0	0	0	0	26	0	>= 0
 0	0	-1	0	0	0	0	0	-26	78	>= 0
 0	0	-1	0	0	0	1	0	-26	0	>= 0
 0	0	1	0	0	0	-1	0	26	25	>= 0
 0	0	1	0	0	0	0	0	0	-26	>= 0

FM input (eliminate pos 7):
Domain: 0, Range: 7, Symbols: 0, Locals: 2
15 constraints
(None	None	None	None	None	None	Value	Local	Local	const)
 1	0	0	0	0	0	0	0	0	0	= 0
 0	1	0	0	0	0	0	0	0	0	= 0
 0	0	0	1	0	0	0	0	0	0	= 0
 0	0	0	0	1	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	0	-1	3	>= 0
 0	0	0	0	0	-1	1	0	-26	0	>= 0
 0	0	0	0	0	1	-1	0	26	25	>= 0
 0	0	1	0	0	0	0	0	26	0	>= 0
 0	0	-1	0	0	0	0	0	-26	78	>= 0
 0	0	-1	0	0	0	1	0	-26	0	>= 0
 0	0	1	0	0	0	-1	0	26	25	>= 0
 0	0	1	0	0	0	0	0	0	-26	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 7, Symbols: 0, Locals: 1
13 constraints
(None	None	None	None	None	None	None	Local	const)
 1	0	0	0	0	0	0	0	0	= 0
 0	1	0	0	0	0	0	0	0	= 0
 0	0	0	1	0	0	0	0	0	= 0
 0	0	0	0	1	0	0	0	0	= 0
 0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	-1	3	>= 0
 0	0	0	0	0	-1	1	-26	0	>= 0
 0	0	0	0	0	1	-1	26	25	>= 0
 0	0	1	0	0	0	0	26	0	>= 0
 0	0	-1	0	0	0	0	-26	78	>= 0
 0	0	-1	0	0	0	1	-26	0	>= 0
 0	0	1	0	0	0	-1	26	25	>= 0
 0	0	1	0	0	0	0	0	-26	>= 0

FM input (eliminate pos 6):
Domain: 0, Range: 7, Symbols: 0, Locals: 1
13 constraints
(None	None	None	None	None	None	Value	Local	const)
 1	0	0	0	0	0	0	0	0	= 0
 0	1	0	0	0	0	0	0	0	= 0
 0	0	0	1	0	0	0	0	0	= 0
 0	0	0	0	1	0	0	0	0	= 0
 0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	-1	3	>= 0
 0	0	0	0	0	-1	1	-26	0	>= 0
 0	0	0	0	0	1	-1	26	25	>= 0
 0	0	1	0	0	0	0	26	0	>= 0
 0	0	-1	0	0	0	0	-26	78	>= 0
 0	0	-1	0	0	0	1	-26	0	>= 0
 0	0	1	0	0	0	-1	26	25	>= 0
 0	0	1	0	0	0	0	0	-26	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 6, Symbols: 0, Locals: 1
11 constraints
(None	None	None	None	None	None	Local	const)
 1	0	0	0	0	0	0	0	= 0
 0	1	0	0	0	0	0	0	= 0
 0	0	0	1	0	0	0	0	= 0
 0	0	0	0	1	0	0	0	= 0
 0	0	-1	0	0	1	0	25	>= 0
 0	0	1	0	0	-1	0	25	>= 0
 0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	-1	3	>= 0
 0	0	1	0	0	0	26	0	>= 0
 0	0	-1	0	0	0	-26	78	>= 0
 0	0	1	0	0	0	0	-26	>= 0

FM input (eliminate pos 6):
Domain: 0, Range: 6, Symbols: 0, Locals: 1
11 constraints
(None	None	None	None	None	None	Local	const)
 1	0	0	0	0	0	0	0	= 0
 0	1	0	0	0	0	0	0	= 0
 0	0	0	1	0	0	0	0	= 0
 0	0	0	0	1	0	0	0	= 0
 0	0	-1	0	0	1	0	25	>= 0
 0	0	1	0	0	-1	0	25	>= 0
 0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	-1	3	>= 0
 0	0	1	0	0	0	26	0	>= 0
 0	0	-1	0	0	0	-26	78	>= 0
 0	0	1	0	0	0	0	-26	>= 0

FM isResultIntegerExact: 0
FM output:
Domain: 0, Range: 6, Symbols: 0, Locals: 0
8 constraints
(None	None	None	None	None	None	const)
 1	0	0	0	0	0	0	= 0
 0	1	0	0	0	0	0	= 0
 0	0	0	1	0	0	0	= 0
 0	0	0	0	1	0	0	= 0
 0	0	-1	0	0	0	78	>= 0
 0	0	-1	0	0	1	25	>= 0
 0	0	1	0	0	-1	25	>= 0
 0	0	1	0	0	0	-26	>= 0

FM input (eliminate pos 2):
Domain: 0, Range: 3, Symbols: 0, Locals: 0
5 constraints
 1	0	0	0	= 0
 0	-1	0	78	>= 0
 0	-1	1	25	>= 0
 0	1	-1	25	>= 0
 0	1	0	-26	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 2, Symbols: 0, Locals: 0
3 constraints
 1	0	0	= 0
 0	-1	78	>= 0
 0	1	-26	>= 0

FM input (eliminate pos 1):
Domain: 0, Range: 2, Symbols: 0, Locals: 0
3 constraints
 1	0	0	= 0
 0	-1	78	>= 0
 0	1	-26	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 1, Symbols: 0, Locals: 0
1 constraints
 1	0	= 0

FM input (eliminate pos 2):
Domain: 0, Range: 3, Symbols: 0, Locals: 0
5 constraints
 1	0	0	0	= 0
 0	-1	0	78	>= 0
 0	-1	1	25	>= 0
 0	1	-1	25	>= 0
 0	1	0	-26	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 2, Symbols: 0, Locals: 0
3 constraints
 1	0	0	= 0
 0	-1	78	>= 0
 0	1	-26	>= 0

FM input (eliminate pos 1):
Domain: 0, Range: 2, Symbols: 0, Locals: 0
3 constraints
 1	0	0	= 0
 0	-1	78	>= 0
 0	1	-26	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 1, Symbols: 0, Locals: 0
1 constraints
 1	0	= 0

FM input (eliminate pos 2):
Domain: 0, Range: 3, Symbols: 0, Locals: 0
5 constraints
 1	0	0	0	= 0
 0	-1	0	78	>= 0
 0	-1	1	25	>= 0
 0	1	-1	25	>= 0
 0	1	0	-26	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 2, Symbols: 0, Locals: 0
3 constraints
 1	0	0	= 0
 0	-1	78	>= 0
 0	1	-26	>= 0

FM input (eliminate pos 1):
Domain: 0, Range: 2, Symbols: 0, Locals: 0
3 constraints
 1	0	0	= 0
 0	-1	78	>= 0
 0	1	-26	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 1, Symbols: 0, Locals: 0
1 constraints
 1	0	= 0

FM input (eliminate pos 2):
Domain: 0, Range: 3, Symbols: 0, Locals: 0
5 constraints
 1	0	0	0	= 0
 0	-1	0	78	>= 0
 0	-1	1	25	>= 0
 0	1	-1	25	>= 0
 0	1	0	-26	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 2, Symbols: 0, Locals: 0
3 constraints
 1	0	0	= 0
 0	-1	78	>= 0
 0	1	-26	>= 0

FM input (eliminate pos 1):
Domain: 0, Range: 2, Symbols: 0, Locals: 0
3 constraints
 1	0	0	= 0
 0	-1	78	>= 0
 0	1	-26	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 1, Symbols: 0, Locals: 0
1 constraints
 1	0	= 0

FM input (eliminate pos 1):
Domain: 0, Range: 2, Symbols: 0, Locals: 0
4 constraints
 -1	0	78	>= 0
 -1	1	25	>= 0
 1	-1	25	>= 0
 1	0	-26	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 1, Symbols: 0, Locals: 0
2 constraints
 -1	78	>= 0
 1	-26	>= 0

FM input (eliminate pos 1):
Domain: 0, Range: 2, Symbols: 0, Locals: 0
4 constraints
 -1	0	78	>= 0
 -1	1	25	>= 0
 1	-1	25	>= 0
 1	0	-26	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 1, Symbols: 0, Locals: 0
2 constraints
 -1	78	>= 0
 1	-26	>= 0

FM input (eliminate pos 0):
Domain: 0, Range: 4, Symbols: 0, Locals: 0
6 constraints
 0	1	0	0	0	= 0
 0	0	1	0	0	= 0
 -1	0	0	0	78	>= 0
 -1	0	0	1	25	>= 0
 1	0	0	-1	25	>= 0
 1	0	0	0	-26	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 3, Symbols: 0, Locals: 0
4 constraints
 1	0	0	0	= 0
 0	1	0	0	= 0
 0	0	-1	103	>= 0
 0	0	1	-1	>= 0

FM input (eliminate pos 1):
Domain: 0, Range: 2, Symbols: 0, Locals: 0
3 constraints
 1	0	0	= 0
 0	-1	103	>= 0
 0	1	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 1, Symbols: 0, Locals: 0
1 constraints
 1	0	= 0

FM input (eliminate pos 0):
Domain: 0, Range: 4, Symbols: 0, Locals: 0
6 constraints
 0	1	0	0	0	= 0
 0	0	1	0	0	= 0
 -1	0	0	0	78	>= 0
 -1	0	0	1	25	>= 0
 1	0	0	-1	25	>= 0
 1	0	0	0	-26	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 3, Symbols: 0, Locals: 0
4 constraints
 1	0	0	0	= 0
 0	1	0	0	= 0
 0	0	-1	103	>= 0
 0	0	1	-1	>= 0

FM input (eliminate pos 1):
Domain: 0, Range: 2, Symbols: 0, Locals: 0
3 constraints
 1	0	0	= 0
 0	-1	103	>= 0
 0	1	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 1, Symbols: 0, Locals: 0
1 constraints
 1	0	= 0

FM input (eliminate pos 0):
Domain: 0, Range: 3, Symbols: 0, Locals: 0
5 constraints
 0	1	0	0	= 0
 -1	0	0	78	>= 0
 -1	0	1	25	>= 0
 1	0	-1	25	>= 0
 1	0	0	-26	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 2, Symbols: 0, Locals: 0
3 constraints
 1	0	0	= 0
 0	-1	103	>= 0
 0	1	-1	>= 0

FM input (eliminate pos 1):
Domain: 0, Range: 2, Symbols: 0, Locals: 0
3 constraints
 1	0	0	= 0
 0	-1	103	>= 0
 0	1	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 1, Symbols: 0, Locals: 0
1 constraints
 1	0	= 0

FM input (eliminate pos 0):
Domain: 0, Range: 3, Symbols: 0, Locals: 0
5 constraints
 0	1	0	0	= 0
 -1	0	0	78	>= 0
 -1	0	1	25	>= 0
 1	0	-1	25	>= 0
 1	0	0	-26	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 2, Symbols: 0, Locals: 0
3 constraints
 1	0	0	= 0
 0	-1	103	>= 0
 0	1	-1	>= 0

FM input (eliminate pos 1):
Domain: 0, Range: 2, Symbols: 0, Locals: 0
3 constraints
 1	0	0	= 0
 0	-1	103	>= 0
 0	1	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 1, Symbols: 0, Locals: 0
1 constraints
 1	0	= 0

FM input (eliminate pos 0):
Domain: 0, Range: 2, Symbols: 0, Locals: 0
4 constraints
 -1	0	78	>= 0
 -1	1	25	>= 0
 1	-1	25	>= 0
 1	0	-26	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 1, Symbols: 0, Locals: 0
2 constraints
 -1	103	>= 0
 1	-1	>= 0

FM input (eliminate pos 0):
Domain: 0, Range: 2, Symbols: 0, Locals: 0
4 constraints
 -1	0	78	>= 0
 -1	1	25	>= 0
 1	-1	25	>= 0
 1	0	-26	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 1, Symbols: 0, Locals: 0
2 constraints
 -1	103	>= 0
 1	-1	>= 0

Dependence polyhedron:
Domain: 0, Range: 6, Symbols: 0, Locals: 0
8 constraints
(None	None	None	None	None	None	const)
 1	0	0	0	0	0	0	= 0
 0	1	0	0	0	0	0	= 0
 0	0	0	1	0	0	0	= 0
 0	0	0	0	1	0	0	= 0
 0	0	-1	0	0	0	78	>= 0
 0	0	-1	0	0	1	25	>= 0
 0	0	1	0	0	-1	25	>= 0
 0	0	1	0	0	0	-26	>= 0

Checking whether tiling legality violated for dependence at depth: 3 between:
mlir-asm-printer: Verifying operation: func.func
affine.store %6, %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
affine.store %6, %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 4 between:
mlir-asm-printer: Verifying operation: func.func
%0 = affine.load %arg0[%arg6, %arg8] : memref<104x104xi8, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
%0 = affine.load %arg0[%arg6, %arg8] : memref<104x104xi8, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 4 between:
mlir-asm-printer: Verifying operation: func.func
%0 = affine.load %arg0[%arg6, %arg8] : memref<104x104xi8, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
%1 = affine.load %arg1[%arg8, %arg7] : memref<104x104xi8, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 4 between:
mlir-asm-printer: Verifying operation: func.func
%0 = affine.load %arg0[%arg6, %arg8] : memref<104x104xi8, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
%2 = affine.load %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 4 between:
mlir-asm-printer: Verifying operation: func.func
%0 = affine.load %arg0[%arg6, %arg8] : memref<104x104xi8, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
affine.store %6, %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 4 between:
mlir-asm-printer: Verifying operation: func.func
%1 = affine.load %arg1[%arg8, %arg7] : memref<104x104xi8, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
%0 = affine.load %arg0[%arg6, %arg8] : memref<104x104xi8, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 4 between:
mlir-asm-printer: Verifying operation: func.func
%1 = affine.load %arg1[%arg8, %arg7] : memref<104x104xi8, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
%1 = affine.load %arg1[%arg8, %arg7] : memref<104x104xi8, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 4 between:
mlir-asm-printer: Verifying operation: func.func
%1 = affine.load %arg1[%arg8, %arg7] : memref<104x104xi8, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
%2 = affine.load %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 4 between:
mlir-asm-printer: Verifying operation: func.func
%1 = affine.load %arg1[%arg8, %arg7] : memref<104x104xi8, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
affine.store %6, %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 4 between:
mlir-asm-printer: Verifying operation: func.func
%2 = affine.load %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
%0 = affine.load %arg0[%arg6, %arg8] : memref<104x104xi8, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 4 between:
mlir-asm-printer: Verifying operation: func.func
%2 = affine.load %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
%1 = affine.load %arg1[%arg8, %arg7] : memref<104x104xi8, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 4 between:
mlir-asm-printer: Verifying operation: func.func
%2 = affine.load %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
%2 = affine.load %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 4 between:
mlir-asm-printer: Verifying operation: func.func
%2 = affine.load %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
affine.store %6, %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 4 between:
mlir-asm-printer: Verifying operation: func.func
affine.store %6, %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
%0 = affine.load %arg0[%arg6, %arg8] : memref<104x104xi8, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 4 between:
mlir-asm-printer: Verifying operation: func.func
affine.store %6, %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
%1 = affine.load %arg1[%arg8, %arg7] : memref<104x104xi8, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 4 between:
mlir-asm-printer: Verifying operation: func.func
affine.store %6, %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
%2 = affine.load %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 4 between:
mlir-asm-printer: Verifying operation: func.func
affine.store %6, %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
affine.store %6, %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 5 between:
mlir-asm-printer: Verifying operation: func.func
%0 = affine.load %arg0[%arg6, %arg8] : memref<104x104xi8, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
%0 = affine.load %arg0[%arg6, %arg8] : memref<104x104xi8, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 5 between:
mlir-asm-printer: Verifying operation: func.func
%0 = affine.load %arg0[%arg6, %arg8] : memref<104x104xi8, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
%1 = affine.load %arg1[%arg8, %arg7] : memref<104x104xi8, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 5 between:
mlir-asm-printer: Verifying operation: func.func
%0 = affine.load %arg0[%arg6, %arg8] : memref<104x104xi8, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
%2 = affine.load %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 5 between:
mlir-asm-printer: Verifying operation: func.func
%0 = affine.load %arg0[%arg6, %arg8] : memref<104x104xi8, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
affine.store %6, %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 5 between:
mlir-asm-printer: Verifying operation: func.func
%1 = affine.load %arg1[%arg8, %arg7] : memref<104x104xi8, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
%0 = affine.load %arg0[%arg6, %arg8] : memref<104x104xi8, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 5 between:
mlir-asm-printer: Verifying operation: func.func
%1 = affine.load %arg1[%arg8, %arg7] : memref<104x104xi8, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
%1 = affine.load %arg1[%arg8, %arg7] : memref<104x104xi8, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 5 between:
mlir-asm-printer: Verifying operation: func.func
%1 = affine.load %arg1[%arg8, %arg7] : memref<104x104xi8, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
%2 = affine.load %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 5 between:
mlir-asm-printer: Verifying operation: func.func
%1 = affine.load %arg1[%arg8, %arg7] : memref<104x104xi8, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
affine.store %6, %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 5 between:
mlir-asm-printer: Verifying operation: func.func
%2 = affine.load %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
%0 = affine.load %arg0[%arg6, %arg8] : memref<104x104xi8, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 5 between:
mlir-asm-printer: Verifying operation: func.func
%2 = affine.load %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
%1 = affine.load %arg1[%arg8, %arg7] : memref<104x104xi8, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 5 between:
mlir-asm-printer: Verifying operation: func.func
%2 = affine.load %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
%2 = affine.load %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 5 between:
mlir-asm-printer: Verifying operation: func.func
%2 = affine.load %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
affine.store %6, %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 5 between:
mlir-asm-printer: Verifying operation: func.func
affine.store %6, %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
%0 = affine.load %arg0[%arg6, %arg8] : memref<104x104xi8, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 5 between:
mlir-asm-printer: Verifying operation: func.func
affine.store %6, %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
%1 = affine.load %arg1[%arg8, %arg7] : memref<104x104xi8, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 5 between:
mlir-asm-printer: Verifying operation: func.func
affine.store %6, %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
%2 = affine.load %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 5 between:
mlir-asm-printer: Verifying operation: func.func
affine.store %6, %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
affine.store %6, %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 6 between:
mlir-asm-printer: Verifying operation: func.func
%0 = affine.load %arg0[%arg6, %arg8] : memref<104x104xi8, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
%0 = affine.load %arg0[%arg6, %arg8] : memref<104x104xi8, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 6 between:
mlir-asm-printer: Verifying operation: func.func
%0 = affine.load %arg0[%arg6, %arg8] : memref<104x104xi8, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
%1 = affine.load %arg1[%arg8, %arg7] : memref<104x104xi8, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 6 between:
mlir-asm-printer: Verifying operation: func.func
%0 = affine.load %arg0[%arg6, %arg8] : memref<104x104xi8, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
%2 = affine.load %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 6 between:
mlir-asm-printer: Verifying operation: func.func
%0 = affine.load %arg0[%arg6, %arg8] : memref<104x104xi8, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
affine.store %6, %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 6 between:
mlir-asm-printer: Verifying operation: func.func
%1 = affine.load %arg1[%arg8, %arg7] : memref<104x104xi8, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
%0 = affine.load %arg0[%arg6, %arg8] : memref<104x104xi8, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 6 between:
mlir-asm-printer: Verifying operation: func.func
%1 = affine.load %arg1[%arg8, %arg7] : memref<104x104xi8, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
%1 = affine.load %arg1[%arg8, %arg7] : memref<104x104xi8, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 6 between:
mlir-asm-printer: Verifying operation: func.func
%1 = affine.load %arg1[%arg8, %arg7] : memref<104x104xi8, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
%2 = affine.load %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 6 between:
mlir-asm-printer: Verifying operation: func.func
%1 = affine.load %arg1[%arg8, %arg7] : memref<104x104xi8, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
affine.store %6, %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 6 between:
mlir-asm-printer: Verifying operation: func.func
%2 = affine.load %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
%0 = affine.load %arg0[%arg6, %arg8] : memref<104x104xi8, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 6 between:
mlir-asm-printer: Verifying operation: func.func
%2 = affine.load %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
%1 = affine.load %arg1[%arg8, %arg7] : memref<104x104xi8, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 6 between:
mlir-asm-printer: Verifying operation: func.func
%2 = affine.load %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
%2 = affine.load %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 6 between:
mlir-asm-printer: Verifying operation: func.func
%2 = affine.load %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
affine.store %6, %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
FM input (eliminate pos 0):
Domain: 0, Range: 4, Symbols: 0, Locals: 3
39 constraints
 0	0	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	-1	3	>= 0
 0	1	0	0	-8	0	0	0	>= 0
 0	-1	0	0	8	0	0	7	>= 0
 0	0	1	0	0	-8	0	0	>= 0
 0	0	-1	0	0	8	0	7	>= 0
 1	0	0	0	0	0	-26	0	>= 0
 -1	0	0	0	0	0	26	25	>= 0
 0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	-1	3	>= 0
 0	1	0	0	-8	0	0	0	>= 0
 0	-1	0	0	8	0	0	7	>= 0
 0	0	1	0	0	-8	0	0	>= 0
 0	0	-1	0	0	8	0	7	>= 0
 0	0	0	1	0	0	-26	0	>= 0
 0	0	0	-1	0	0	26	25	>= 0
 -1	0	0	1	0	0	0	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 3, Symbols: 0, Locals: 3
14 constraints
 0	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	= 0
 0	0	1	0	0	-26	-1	>= 0
 0	0	0	1	0	0	0	>= 0
 0	0	0	-1	0	0	12	>= 0
 0	0	0	0	1	0	0	>= 0
 0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	-1	3	>= 0
 1	0	0	-8	0	0	0	>= 0
 -1	0	0	8	0	0	7	>= 0
 0	1	0	0	-8	0	0	>= 0
 0	-1	0	0	8	0	7	>= 0
 0	0	-1	0	0	26	25	>= 0

FM input (eliminate pos 0):
Domain: 0, Range: 3, Symbols: 0, Locals: 3
14 constraints
 0	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	= 0
 0	0	1	0	0	-26	-1	>= 0
 0	0	0	1	0	0	0	>= 0
 0	0	0	-1	0	0	12	>= 0
 0	0	0	0	1	0	0	>= 0
 0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	-1	3	>= 0
 1	0	0	-8	0	0	0	>= 0
 -1	0	0	8	0	0	7	>= 0
 0	1	0	0	-8	0	0	>= 0
 0	-1	0	0	8	0	7	>= 0
 0	0	-1	0	0	26	25	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 2, Symbols: 0, Locals: 3
12 constraints
 0	0	0	0	0	0	= 0
 0	0	0	0	0	0	= 0
 0	1	0	0	-26	-1	>= 0
 0	0	1	0	0	0	>= 0
 0	0	-1	0	0	12	>= 0
 0	0	0	1	0	0	>= 0
 0	0	0	-1	0	12	>= 0
 0	0	0	0	1	0	>= 0
 0	0	0	0	-1	3	>= 0
 1	0	0	-8	0	0	>= 0
 -1	0	0	8	0	7	>= 0
 0	-1	0	0	26	25	>= 0

FM input (eliminate pos 0):
Domain: 0, Range: 2, Symbols: 0, Locals: 3
12 constraints
 0	0	0	0	0	0	= 0
 0	0	0	0	0	0	= 0
 0	1	0	0	-26	-1	>= 0
 0	0	1	0	0	0	>= 0
 0	0	-1	0	0	12	>= 0
 0	0	0	1	0	0	>= 0
 0	0	0	-1	0	12	>= 0
 0	0	0	0	1	0	>= 0
 0	0	0	0	-1	3	>= 0
 1	0	0	-8	0	0	>= 0
 -1	0	0	8	0	7	>= 0
 0	-1	0	0	26	25	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 1, Symbols: 0, Locals: 3
10 constraints
 0	0	0	0	0	= 0
 0	0	0	0	0	= 0
 1	0	0	-26	-1	>= 0
 0	1	0	0	0	>= 0
 0	-1	0	0	12	>= 0
 0	0	1	0	0	>= 0
 0	0	-1	0	12	>= 0
 0	0	0	1	0	>= 0
 0	0	0	-1	3	>= 0
 -1	0	0	26	25	>= 0

FM input (eliminate pos 0):
Domain: 0, Range: 1, Symbols: 0, Locals: 3
10 constraints
 0	0	0	0	0	= 0
 0	0	0	0	0	= 0
 1	0	0	-26	-1	>= 0
 0	1	0	0	0	>= 0
 0	-1	0	0	12	>= 0
 0	0	1	0	0	>= 0
 0	0	-1	0	12	>= 0
 0	0	0	1	0	>= 0
 0	0	0	-1	3	>= 0
 -1	0	0	26	25	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 0, Symbols: 0, Locals: 3
8 constraints
 0	0	0	0	= 0
 0	0	0	0	= 0
 1	0	0	0	>= 0
 -1	0	0	12	>= 0
 0	1	0	0	>= 0
 0	-1	0	12	>= 0
 0	0	1	0	>= 0
 0	0	-1	3	>= 0

FM input (eliminate pos 0):
Domain: 0, Range: 0, Symbols: 0, Locals: 3
8 constraints
 0	0	0	0	= 0
 0	0	0	0	= 0
 1	0	0	0	>= 0
 -1	0	0	12	>= 0
 0	1	0	0	>= 0
 0	-1	0	12	>= 0
 0	0	1	0	>= 0
 0	0	-1	3	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 0, Symbols: 0, Locals: 2
6 constraints
 0	0	0	= 0
 0	0	0	= 0
 1	0	0	>= 0
 -1	0	12	>= 0
 0	1	0	>= 0
 0	-1	3	>= 0

FM input (eliminate pos 0):
Domain: 0, Range: 0, Symbols: 0, Locals: 2
6 constraints
 0	0	0	= 0
 0	0	0	= 0
 1	0	0	>= 0
 -1	0	12	>= 0
 0	1	0	>= 0
 0	-1	3	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 0, Symbols: 0, Locals: 1
4 constraints
 0	0	= 0
 0	0	= 0
 1	0	>= 0
 -1	3	>= 0

FM input (eliminate pos 0):
Domain: 0, Range: 0, Symbols: 0, Locals: 1
4 constraints
 0	0	= 0
 0	0	= 0
 1	0	>= 0
 -1	3	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 0, Symbols: 0, Locals: 0
2 constraints
 0	= 0
 0	= 0

FM input (eliminate pos 6):
Domain: 0, Range: 9, Symbols: 0, Locals: 3
44 constraints
(None	None	None	None	None	None	Value	Value	Value	Local	Local	Local	const)
 0	0	0	0	0	0	0	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	0	0	0	0	0	0	= 0
 1	0	0	0	0	0	0	0	0	0	0	0	0	= 0
 0	1	0	0	0	0	0	0	0	0	0	0	0	= 0
 0	0	1	0	0	0	0	0	0	0	0	0	0	= 0
 0	0	0	1	0	0	0	0	0	0	0	0	0	= 0
 0	0	0	0	1	0	0	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	0	0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	0	0	0	0	-1	3	>= 0
 0	0	0	0	0	0	1	0	0	-8	0	0	0	>= 0
 0	0	0	0	0	0	-1	0	0	8	0	0	7	>= 0
 0	0	0	0	0	0	0	1	0	0	-8	0	0	>= 0
 0	0	0	0	0	0	0	-1	0	0	8	0	7	>= 0
 0	0	0	0	0	-1	0	0	1	0	0	-26	0	>= 0
 0	0	0	0	0	1	0	0	-1	0	0	26	25	>= 0
 0	0	0	0	0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	0	0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	0	0	0	0	-1	3	>= 0
 0	0	0	0	0	0	1	0	0	-8	0	0	0	>= 0
 0	0	0	0	0	0	-1	0	0	8	0	0	7	>= 0
 0	0	0	0	0	0	0	1	0	0	-8	0	0	>= 0
 0	0	0	0	0	0	0	-1	0	0	8	0	7	>= 0
 0	0	0	0	0	0	0	0	1	0	0	-26	0	>= 0
 0	0	0	0	0	0	0	0	-1	0	0	26	25	>= 0
 0	0	0	0	0	1	0	0	0	0	0	0	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 8, Symbols: 0, Locals: 3
20 constraints
(None	None	None	None	None	None	None	None	Local	Local	Local	const)
 0	0	0	0	0	0	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	0	0	0	0	0	= 0
 1	0	0	0	0	0	0	0	0	0	0	0	= 0
 0	1	0	0	0	0	0	0	0	0	0	0	= 0
 0	0	1	0	0	0	0	0	0	0	0	0	= 0
 0	0	0	1	0	0	0	0	0	0	0	0	= 0
 0	0	0	0	1	0	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	0	0	0	-1	3	>= 0
 0	0	0	0	0	0	1	0	0	-8	0	0	>= 0
 0	0	0	0	0	0	-1	0	0	8	0	7	>= 0
 0	0	0	0	0	-1	0	1	0	0	-26	0	>= 0
 0	0	0	0	0	1	0	-1	0	0	26	25	>= 0
 0	0	0	0	0	0	0	1	0	0	-26	0	>= 0
 0	0	0	0	0	0	0	-1	0	0	26	25	>= 0
 0	0	0	0	0	1	0	0	0	0	0	-1	>= 0

FM input (eliminate pos 6):
Domain: 0, Range: 8, Symbols: 0, Locals: 3
20 constraints
(None	None	None	None	None	None	Value	Value	Local	Local	Local	const)
 0	0	0	0	0	0	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	0	0	0	0	0	= 0
 1	0	0	0	0	0	0	0	0	0	0	0	= 0
 0	1	0	0	0	0	0	0	0	0	0	0	= 0
 0	0	1	0	0	0	0	0	0	0	0	0	= 0
 0	0	0	1	0	0	0	0	0	0	0	0	= 0
 0	0	0	0	1	0	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	0	0	0	-1	3	>= 0
 0	0	0	0	0	0	1	0	0	-8	0	0	>= 0
 0	0	0	0	0	0	-1	0	0	8	0	7	>= 0
 0	0	0	0	0	-1	0	1	0	0	-26	0	>= 0
 0	0	0	0	0	1	0	-1	0	0	26	25	>= 0
 0	0	0	0	0	0	0	1	0	0	-26	0	>= 0
 0	0	0	0	0	0	0	-1	0	0	26	25	>= 0
 0	0	0	0	0	1	0	0	0	0	0	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 7, Symbols: 0, Locals: 3
18 constraints
(None	None	None	None	None	None	None	Local	Local	Local	const)
 0	0	0	0	0	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	0	0	0	0	= 0
 1	0	0	0	0	0	0	0	0	0	0	= 0
 0	1	0	0	0	0	0	0	0	0	0	= 0
 0	0	1	0	0	0	0	0	0	0	0	= 0
 0	0	0	1	0	0	0	0	0	0	0	= 0
 0	0	0	0	1	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	0	0	-1	3	>= 0
 0	0	0	0	0	-1	1	0	0	-26	0	>= 0
 0	0	0	0	0	1	-1	0	0	26	25	>= 0
 0	0	0	0	0	0	1	0	0	-26	0	>= 0
 0	0	0	0	0	0	-1	0	0	26	25	>= 0
 0	0	0	0	0	1	0	0	0	0	-1	>= 0

FM input (eliminate pos 7):
Domain: 0, Range: 7, Symbols: 0, Locals: 3
18 constraints
(None	None	None	None	None	None	Value	Local	Local	Local	const)
 0	0	0	0	0	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	0	0	0	0	= 0
 1	0	0	0	0	0	0	0	0	0	0	= 0
 0	1	0	0	0	0	0	0	0	0	0	= 0
 0	0	1	0	0	0	0	0	0	0	0	= 0
 0	0	0	1	0	0	0	0	0	0	0	= 0
 0	0	0	0	1	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	0	0	-1	3	>= 0
 0	0	0	0	0	-1	1	0	0	-26	0	>= 0
 0	0	0	0	0	1	-1	0	0	26	25	>= 0
 0	0	0	0	0	0	1	0	0	-26	0	>= 0
 0	0	0	0	0	0	-1	0	0	26	25	>= 0
 0	0	0	0	0	1	0	0	0	0	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 7, Symbols: 0, Locals: 2
16 constraints
(None	None	None	None	None	None	None	Local	Local	const)
 0	0	0	0	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	0	0	0	= 0
 1	0	0	0	0	0	0	0	0	0	= 0
 0	1	0	0	0	0	0	0	0	0	= 0
 0	0	1	0	0	0	0	0	0	0	= 0
 0	0	0	1	0	0	0	0	0	0	= 0
 0	0	0	0	1	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	0	-1	3	>= 0
 0	0	0	0	0	-1	1	0	-26	0	>= 0
 0	0	0	0	0	1	-1	0	26	25	>= 0
 0	0	0	0	0	0	1	0	-26	0	>= 0
 0	0	0	0	0	0	-1	0	26	25	>= 0
 0	0	0	0	0	1	0	0	0	-1	>= 0

FM input (eliminate pos 7):
Domain: 0, Range: 7, Symbols: 0, Locals: 2
16 constraints
(None	None	None	None	None	None	Value	Local	Local	const)
 0	0	0	0	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	0	0	0	= 0
 1	0	0	0	0	0	0	0	0	0	= 0
 0	1	0	0	0	0	0	0	0	0	= 0
 0	0	1	0	0	0	0	0	0	0	= 0
 0	0	0	1	0	0	0	0	0	0	= 0
 0	0	0	0	1	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	0	-1	3	>= 0
 0	0	0	0	0	-1	1	0	-26	0	>= 0
 0	0	0	0	0	1	-1	0	26	25	>= 0
 0	0	0	0	0	0	1	0	-26	0	>= 0
 0	0	0	0	0	0	-1	0	26	25	>= 0
 0	0	0	0	0	1	0	0	0	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 7, Symbols: 0, Locals: 1
14 constraints
(None	None	None	None	None	None	None	Local	const)
 0	0	0	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	0	0	= 0
 1	0	0	0	0	0	0	0	0	= 0
 0	1	0	0	0	0	0	0	0	= 0
 0	0	1	0	0	0	0	0	0	= 0
 0	0	0	1	0	0	0	0	0	= 0
 0	0	0	0	1	0	0	0	0	= 0
 0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	-1	3	>= 0
 0	0	0	0	0	-1	1	-26	0	>= 0
 0	0	0	0	0	1	-1	26	25	>= 0
 0	0	0	0	0	0	1	-26	0	>= 0
 0	0	0	0	0	0	-1	26	25	>= 0
 0	0	0	0	0	1	0	0	-1	>= 0

FM input (eliminate pos 6):
Domain: 0, Range: 7, Symbols: 0, Locals: 1
14 constraints
(None	None	None	None	None	None	Value	Local	const)
 0	0	0	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	0	0	= 0
 1	0	0	0	0	0	0	0	0	= 0
 0	1	0	0	0	0	0	0	0	= 0
 0	0	1	0	0	0	0	0	0	= 0
 0	0	0	1	0	0	0	0	0	= 0
 0	0	0	0	1	0	0	0	0	= 0
 0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	-1	3	>= 0
 0	0	0	0	0	-1	1	-26	0	>= 0
 0	0	0	0	0	1	-1	26	25	>= 0
 0	0	0	0	0	0	1	-26	0	>= 0
 0	0	0	0	0	0	-1	26	25	>= 0
 0	0	0	0	0	1	0	0	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 6, Symbols: 0, Locals: 1
11 constraints
(None	None	None	None	None	None	Local	const)
 0	0	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	0	= 0
 1	0	0	0	0	0	0	0	= 0
 0	1	0	0	0	0	0	0	= 0
 0	0	1	0	0	0	0	0	= 0
 0	0	0	1	0	0	0	0	= 0
 0	0	0	0	1	0	0	0	= 0
 0	0	0	0	0	-1	0	25	>= 0
 0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	-1	3	>= 0
 0	0	0	0	0	1	0	-1	>= 0

FM input (eliminate pos 6):
Domain: 0, Range: 6, Symbols: 0, Locals: 1
11 constraints
(None	None	None	None	None	None	Local	const)
 0	0	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	0	= 0
 1	0	0	0	0	0	0	0	= 0
 0	1	0	0	0	0	0	0	= 0
 0	0	1	0	0	0	0	0	= 0
 0	0	0	1	0	0	0	0	= 0
 0	0	0	0	1	0	0	0	= 0
 0	0	0	0	0	-1	0	25	>= 0
 0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	-1	3	>= 0
 0	0	0	0	0	1	0	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 6, Symbols: 0, Locals: 0
9 constraints
(None	None	None	None	None	None	const)
 0	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	= 0
 1	0	0	0	0	0	0	= 0
 0	1	0	0	0	0	0	= 0
 0	0	1	0	0	0	0	= 0
 0	0	0	1	0	0	0	= 0
 0	0	0	0	1	0	0	= 0
 0	0	0	0	0	-1	25	>= 0
 0	0	0	0	0	1	-1	>= 0

FM input (eliminate pos 1):
Domain: 0, Range: 2, Symbols: 0, Locals: 0
5 constraints
 0	0	0	= 0
 0	0	0	= 0
 1	0	0	= 0
 0	-1	25	>= 0
 0	1	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 1, Symbols: 0, Locals: 0
3 constraints
 0	0	= 0
 0	0	= 0
 1	0	= 0

FM input (eliminate pos 1):
Domain: 0, Range: 2, Symbols: 0, Locals: 0
5 constraints
 0	0	0	= 0
 0	0	0	= 0
 1	0	0	= 0
 0	-1	25	>= 0
 0	1	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 1, Symbols: 0, Locals: 0
3 constraints
 0	0	= 0
 0	0	= 0
 1	0	= 0

FM input (eliminate pos 1):
Domain: 0, Range: 2, Symbols: 0, Locals: 0
5 constraints
 0	0	0	= 0
 0	0	0	= 0
 1	0	0	= 0
 0	-1	25	>= 0
 0	1	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 1, Symbols: 0, Locals: 0
3 constraints
 0	0	= 0
 0	0	= 0
 1	0	= 0

FM input (eliminate pos 1):
Domain: 0, Range: 2, Symbols: 0, Locals: 0
5 constraints
 0	0	0	= 0
 0	0	0	= 0
 1	0	0	= 0
 0	-1	25	>= 0
 0	1	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 1, Symbols: 0, Locals: 0
3 constraints
 0	0	= 0
 0	0	= 0
 1	0	= 0

FM input (eliminate pos 1):
Domain: 0, Range: 2, Symbols: 0, Locals: 0
5 constraints
 0	0	0	= 0
 0	0	0	= 0
 1	0	0	= 0
 0	-1	25	>= 0
 0	1	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 1, Symbols: 0, Locals: 0
3 constraints
 0	0	= 0
 0	0	= 0
 1	0	= 0

FM input (eliminate pos 1):
Domain: 0, Range: 2, Symbols: 0, Locals: 0
5 constraints
 0	0	0	= 0
 0	0	0	= 0
 1	0	0	= 0
 0	-1	25	>= 0
 0	1	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 1, Symbols: 0, Locals: 0
3 constraints
 0	0	= 0
 0	0	= 0
 1	0	= 0

FM input (eliminate pos 1):
Domain: 0, Range: 2, Symbols: 0, Locals: 0
5 constraints
 0	0	0	= 0
 0	0	0	= 0
 1	0	0	= 0
 0	-1	25	>= 0
 0	1	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 1, Symbols: 0, Locals: 0
3 constraints
 0	0	= 0
 0	0	= 0
 1	0	= 0

FM input (eliminate pos 1):
Domain: 0, Range: 2, Symbols: 0, Locals: 0
5 constraints
 0	0	0	= 0
 0	0	0	= 0
 1	0	0	= 0
 0	-1	25	>= 0
 0	1	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 1, Symbols: 0, Locals: 0
3 constraints
 0	0	= 0
 0	0	= 0
 1	0	= 0

FM input (eliminate pos 1):
Domain: 0, Range: 2, Symbols: 0, Locals: 0
5 constraints
 0	0	0	= 0
 0	0	0	= 0
 1	0	0	= 0
 0	-1	25	>= 0
 0	1	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 1, Symbols: 0, Locals: 0
3 constraints
 0	0	= 0
 0	0	= 0
 1	0	= 0

FM input (eliminate pos 1):
Domain: 0, Range: 2, Symbols: 0, Locals: 0
5 constraints
 0	0	0	= 0
 0	0	0	= 0
 1	0	0	= 0
 0	-1	25	>= 0
 0	1	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 1, Symbols: 0, Locals: 0
3 constraints
 0	0	= 0
 0	0	= 0
 1	0	= 0

Dependence polyhedron:
Domain: 0, Range: 6, Symbols: 0, Locals: 0
9 constraints
(None	None	None	None	None	None	const)
 0	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	= 0
 1	0	0	0	0	0	0	= 0
 0	1	0	0	0	0	0	= 0
 0	0	1	0	0	0	0	= 0
 0	0	0	1	0	0	0	= 0
 0	0	0	0	1	0	0	= 0
 0	0	0	0	0	-1	25	>= 0
 0	0	0	0	0	1	-1	>= 0

Checking whether tiling legality violated for dependence at depth: 6 between:
mlir-asm-printer: Verifying operation: func.func
%2 = affine.load %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
affine.store %6, %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 6 between:
mlir-asm-printer: Verifying operation: func.func
affine.store %6, %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
%0 = affine.load %arg0[%arg6, %arg8] : memref<104x104xi8, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 6 between:
mlir-asm-printer: Verifying operation: func.func
affine.store %6, %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
%1 = affine.load %arg1[%arg8, %arg7] : memref<104x104xi8, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 6 between:
mlir-asm-printer: Verifying operation: func.func
affine.store %6, %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
%2 = affine.load %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
FM input (eliminate pos 0):
Domain: 0, Range: 4, Symbols: 0, Locals: 3
39 constraints
 0	0	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	-1	3	>= 0
 0	1	0	0	-8	0	0	0	>= 0
 0	-1	0	0	8	0	0	7	>= 0
 0	0	1	0	0	-8	0	0	>= 0
 0	0	-1	0	0	8	0	7	>= 0
 1	0	0	0	0	0	-26	0	>= 0
 -1	0	0	0	0	0	26	25	>= 0
 0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	-1	3	>= 0
 0	1	0	0	-8	0	0	0	>= 0
 0	-1	0	0	8	0	0	7	>= 0
 0	0	1	0	0	-8	0	0	>= 0
 0	0	-1	0	0	8	0	7	>= 0
 0	0	0	1	0	0	-26	0	>= 0
 0	0	0	-1	0	0	26	25	>= 0
 -1	0	0	1	0	0	0	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 3, Symbols: 0, Locals: 3
14 constraints
 0	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	= 0
 0	0	1	0	0	-26	-1	>= 0
 0	0	0	1	0	0	0	>= 0
 0	0	0	-1	0	0	12	>= 0
 0	0	0	0	1	0	0	>= 0
 0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	-1	3	>= 0
 1	0	0	-8	0	0	0	>= 0
 -1	0	0	8	0	0	7	>= 0
 0	1	0	0	-8	0	0	>= 0
 0	-1	0	0	8	0	7	>= 0
 0	0	-1	0	0	26	25	>= 0

FM input (eliminate pos 0):
Domain: 0, Range: 3, Symbols: 0, Locals: 3
14 constraints
 0	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	= 0
 0	0	1	0	0	-26	-1	>= 0
 0	0	0	1	0	0	0	>= 0
 0	0	0	-1	0	0	12	>= 0
 0	0	0	0	1	0	0	>= 0
 0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	-1	3	>= 0
 1	0	0	-8	0	0	0	>= 0
 -1	0	0	8	0	0	7	>= 0
 0	1	0	0	-8	0	0	>= 0
 0	-1	0	0	8	0	7	>= 0
 0	0	-1	0	0	26	25	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 2, Symbols: 0, Locals: 3
12 constraints
 0	0	0	0	0	0	= 0
 0	0	0	0	0	0	= 0
 0	1	0	0	-26	-1	>= 0
 0	0	1	0	0	0	>= 0
 0	0	-1	0	0	12	>= 0
 0	0	0	1	0	0	>= 0
 0	0	0	-1	0	12	>= 0
 0	0	0	0	1	0	>= 0
 0	0	0	0	-1	3	>= 0
 1	0	0	-8	0	0	>= 0
 -1	0	0	8	0	7	>= 0
 0	-1	0	0	26	25	>= 0

FM input (eliminate pos 0):
Domain: 0, Range: 2, Symbols: 0, Locals: 3
12 constraints
 0	0	0	0	0	0	= 0
 0	0	0	0	0	0	= 0
 0	1	0	0	-26	-1	>= 0
 0	0	1	0	0	0	>= 0
 0	0	-1	0	0	12	>= 0
 0	0	0	1	0	0	>= 0
 0	0	0	-1	0	12	>= 0
 0	0	0	0	1	0	>= 0
 0	0	0	0	-1	3	>= 0
 1	0	0	-8	0	0	>= 0
 -1	0	0	8	0	7	>= 0
 0	-1	0	0	26	25	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 1, Symbols: 0, Locals: 3
10 constraints
 0	0	0	0	0	= 0
 0	0	0	0	0	= 0
 1	0	0	-26	-1	>= 0
 0	1	0	0	0	>= 0
 0	-1	0	0	12	>= 0
 0	0	1	0	0	>= 0
 0	0	-1	0	12	>= 0
 0	0	0	1	0	>= 0
 0	0	0	-1	3	>= 0
 -1	0	0	26	25	>= 0

FM input (eliminate pos 0):
Domain: 0, Range: 1, Symbols: 0, Locals: 3
10 constraints
 0	0	0	0	0	= 0
 0	0	0	0	0	= 0
 1	0	0	-26	-1	>= 0
 0	1	0	0	0	>= 0
 0	-1	0	0	12	>= 0
 0	0	1	0	0	>= 0
 0	0	-1	0	12	>= 0
 0	0	0	1	0	>= 0
 0	0	0	-1	3	>= 0
 -1	0	0	26	25	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 0, Symbols: 0, Locals: 3
8 constraints
 0	0	0	0	= 0
 0	0	0	0	= 0
 1	0	0	0	>= 0
 -1	0	0	12	>= 0
 0	1	0	0	>= 0
 0	-1	0	12	>= 0
 0	0	1	0	>= 0
 0	0	-1	3	>= 0

FM input (eliminate pos 0):
Domain: 0, Range: 0, Symbols: 0, Locals: 3
8 constraints
 0	0	0	0	= 0
 0	0	0	0	= 0
 1	0	0	0	>= 0
 -1	0	0	12	>= 0
 0	1	0	0	>= 0
 0	-1	0	12	>= 0
 0	0	1	0	>= 0
 0	0	-1	3	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 0, Symbols: 0, Locals: 2
6 constraints
 0	0	0	= 0
 0	0	0	= 0
 1	0	0	>= 0
 -1	0	12	>= 0
 0	1	0	>= 0
 0	-1	3	>= 0

FM input (eliminate pos 0):
Domain: 0, Range: 0, Symbols: 0, Locals: 2
6 constraints
 0	0	0	= 0
 0	0	0	= 0
 1	0	0	>= 0
 -1	0	12	>= 0
 0	1	0	>= 0
 0	-1	3	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 0, Symbols: 0, Locals: 1
4 constraints
 0	0	= 0
 0	0	= 0
 1	0	>= 0
 -1	3	>= 0

FM input (eliminate pos 0):
Domain: 0, Range: 0, Symbols: 0, Locals: 1
4 constraints
 0	0	= 0
 0	0	= 0
 1	0	>= 0
 -1	3	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 0, Symbols: 0, Locals: 0
2 constraints
 0	= 0
 0	= 0

FM input (eliminate pos 6):
Domain: 0, Range: 9, Symbols: 0, Locals: 3
44 constraints
(None	None	None	None	None	None	Value	Value	Value	Local	Local	Local	const)
 0	0	0	0	0	0	0	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	0	0	0	0	0	0	= 0
 1	0	0	0	0	0	0	0	0	0	0	0	0	= 0
 0	1	0	0	0	0	0	0	0	0	0	0	0	= 0
 0	0	1	0	0	0	0	0	0	0	0	0	0	= 0
 0	0	0	1	0	0	0	0	0	0	0	0	0	= 0
 0	0	0	0	1	0	0	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	0	0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	0	0	0	0	-1	3	>= 0
 0	0	0	0	0	0	1	0	0	-8	0	0	0	>= 0
 0	0	0	0	0	0	-1	0	0	8	0	0	7	>= 0
 0	0	0	0	0	0	0	1	0	0	-8	0	0	>= 0
 0	0	0	0	0	0	0	-1	0	0	8	0	7	>= 0
 0	0	0	0	0	-1	0	0	1	0	0	-26	0	>= 0
 0	0	0	0	0	1	0	0	-1	0	0	26	25	>= 0
 0	0	0	0	0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	0	0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	0	0	0	0	-1	3	>= 0
 0	0	0	0	0	0	1	0	0	-8	0	0	0	>= 0
 0	0	0	0	0	0	-1	0	0	8	0	0	7	>= 0
 0	0	0	0	0	0	0	1	0	0	-8	0	0	>= 0
 0	0	0	0	0	0	0	-1	0	0	8	0	7	>= 0
 0	0	0	0	0	0	0	0	1	0	0	-26	0	>= 0
 0	0	0	0	0	0	0	0	-1	0	0	26	25	>= 0
 0	0	0	0	0	1	0	0	0	0	0	0	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 8, Symbols: 0, Locals: 3
20 constraints
(None	None	None	None	None	None	None	None	Local	Local	Local	const)
 0	0	0	0	0	0	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	0	0	0	0	0	= 0
 1	0	0	0	0	0	0	0	0	0	0	0	= 0
 0	1	0	0	0	0	0	0	0	0	0	0	= 0
 0	0	1	0	0	0	0	0	0	0	0	0	= 0
 0	0	0	1	0	0	0	0	0	0	0	0	= 0
 0	0	0	0	1	0	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	0	0	0	-1	3	>= 0
 0	0	0	0	0	0	1	0	0	-8	0	0	>= 0
 0	0	0	0	0	0	-1	0	0	8	0	7	>= 0
 0	0	0	0	0	-1	0	1	0	0	-26	0	>= 0
 0	0	0	0	0	1	0	-1	0	0	26	25	>= 0
 0	0	0	0	0	0	0	1	0	0	-26	0	>= 0
 0	0	0	0	0	0	0	-1	0	0	26	25	>= 0
 0	0	0	0	0	1	0	0	0	0	0	-1	>= 0

FM input (eliminate pos 6):
Domain: 0, Range: 8, Symbols: 0, Locals: 3
20 constraints
(None	None	None	None	None	None	Value	Value	Local	Local	Local	const)
 0	0	0	0	0	0	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	0	0	0	0	0	= 0
 1	0	0	0	0	0	0	0	0	0	0	0	= 0
 0	1	0	0	0	0	0	0	0	0	0	0	= 0
 0	0	1	0	0	0	0	0	0	0	0	0	= 0
 0	0	0	1	0	0	0	0	0	0	0	0	= 0
 0	0	0	0	1	0	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	0	0	0	-1	3	>= 0
 0	0	0	0	0	0	1	0	0	-8	0	0	>= 0
 0	0	0	0	0	0	-1	0	0	8	0	7	>= 0
 0	0	0	0	0	-1	0	1	0	0	-26	0	>= 0
 0	0	0	0	0	1	0	-1	0	0	26	25	>= 0
 0	0	0	0	0	0	0	1	0	0	-26	0	>= 0
 0	0	0	0	0	0	0	-1	0	0	26	25	>= 0
 0	0	0	0	0	1	0	0	0	0	0	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 7, Symbols: 0, Locals: 3
18 constraints
(None	None	None	None	None	None	None	Local	Local	Local	const)
 0	0	0	0	0	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	0	0	0	0	= 0
 1	0	0	0	0	0	0	0	0	0	0	= 0
 0	1	0	0	0	0	0	0	0	0	0	= 0
 0	0	1	0	0	0	0	0	0	0	0	= 0
 0	0	0	1	0	0	0	0	0	0	0	= 0
 0	0	0	0	1	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	0	0	-1	3	>= 0
 0	0	0	0	0	-1	1	0	0	-26	0	>= 0
 0	0	0	0	0	1	-1	0	0	26	25	>= 0
 0	0	0	0	0	0	1	0	0	-26	0	>= 0
 0	0	0	0	0	0	-1	0	0	26	25	>= 0
 0	0	0	0	0	1	0	0	0	0	-1	>= 0

FM input (eliminate pos 7):
Domain: 0, Range: 7, Symbols: 0, Locals: 3
18 constraints
(None	None	None	None	None	None	Value	Local	Local	Local	const)
 0	0	0	0	0	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	0	0	0	0	= 0
 1	0	0	0	0	0	0	0	0	0	0	= 0
 0	1	0	0	0	0	0	0	0	0	0	= 0
 0	0	1	0	0	0	0	0	0	0	0	= 0
 0	0	0	1	0	0	0	0	0	0	0	= 0
 0	0	0	0	1	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	0	0	-1	3	>= 0
 0	0	0	0	0	-1	1	0	0	-26	0	>= 0
 0	0	0	0	0	1	-1	0	0	26	25	>= 0
 0	0	0	0	0	0	1	0	0	-26	0	>= 0
 0	0	0	0	0	0	-1	0	0	26	25	>= 0
 0	0	0	0	0	1	0	0	0	0	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 7, Symbols: 0, Locals: 2
16 constraints
(None	None	None	None	None	None	None	Local	Local	const)
 0	0	0	0	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	0	0	0	= 0
 1	0	0	0	0	0	0	0	0	0	= 0
 0	1	0	0	0	0	0	0	0	0	= 0
 0	0	1	0	0	0	0	0	0	0	= 0
 0	0	0	1	0	0	0	0	0	0	= 0
 0	0	0	0	1	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	0	-1	3	>= 0
 0	0	0	0	0	-1	1	0	-26	0	>= 0
 0	0	0	0	0	1	-1	0	26	25	>= 0
 0	0	0	0	0	0	1	0	-26	0	>= 0
 0	0	0	0	0	0	-1	0	26	25	>= 0
 0	0	0	0	0	1	0	0	0	-1	>= 0

FM input (eliminate pos 7):
Domain: 0, Range: 7, Symbols: 0, Locals: 2
16 constraints
(None	None	None	None	None	None	Value	Local	Local	const)
 0	0	0	0	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	0	0	0	= 0
 1	0	0	0	0	0	0	0	0	0	= 0
 0	1	0	0	0	0	0	0	0	0	= 0
 0	0	1	0	0	0	0	0	0	0	= 0
 0	0	0	1	0	0	0	0	0	0	= 0
 0	0	0	0	1	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	0	-1	3	>= 0
 0	0	0	0	0	-1	1	0	-26	0	>= 0
 0	0	0	0	0	1	-1	0	26	25	>= 0
 0	0	0	0	0	0	1	0	-26	0	>= 0
 0	0	0	0	0	0	-1	0	26	25	>= 0
 0	0	0	0	0	1	0	0	0	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 7, Symbols: 0, Locals: 1
14 constraints
(None	None	None	None	None	None	None	Local	const)
 0	0	0	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	0	0	= 0
 1	0	0	0	0	0	0	0	0	= 0
 0	1	0	0	0	0	0	0	0	= 0
 0	0	1	0	0	0	0	0	0	= 0
 0	0	0	1	0	0	0	0	0	= 0
 0	0	0	0	1	0	0	0	0	= 0
 0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	-1	3	>= 0
 0	0	0	0	0	-1	1	-26	0	>= 0
 0	0	0	0	0	1	-1	26	25	>= 0
 0	0	0	0	0	0	1	-26	0	>= 0
 0	0	0	0	0	0	-1	26	25	>= 0
 0	0	0	0	0	1	0	0	-1	>= 0

FM input (eliminate pos 6):
Domain: 0, Range: 7, Symbols: 0, Locals: 1
14 constraints
(None	None	None	None	None	None	Value	Local	const)
 0	0	0	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	0	0	= 0
 1	0	0	0	0	0	0	0	0	= 0
 0	1	0	0	0	0	0	0	0	= 0
 0	0	1	0	0	0	0	0	0	= 0
 0	0	0	1	0	0	0	0	0	= 0
 0	0	0	0	1	0	0	0	0	= 0
 0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	-1	3	>= 0
 0	0	0	0	0	-1	1	-26	0	>= 0
 0	0	0	0	0	1	-1	26	25	>= 0
 0	0	0	0	0	0	1	-26	0	>= 0
 0	0	0	0	0	0	-1	26	25	>= 0
 0	0	0	0	0	1	0	0	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 6, Symbols: 0, Locals: 1
11 constraints
(None	None	None	None	None	None	Local	const)
 0	0	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	0	= 0
 1	0	0	0	0	0	0	0	= 0
 0	1	0	0	0	0	0	0	= 0
 0	0	1	0	0	0	0	0	= 0
 0	0	0	1	0	0	0	0	= 0
 0	0	0	0	1	0	0	0	= 0
 0	0	0	0	0	-1	0	25	>= 0
 0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	-1	3	>= 0
 0	0	0	0	0	1	0	-1	>= 0

FM input (eliminate pos 6):
Domain: 0, Range: 6, Symbols: 0, Locals: 1
11 constraints
(None	None	None	None	None	None	Local	const)
 0	0	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	0	= 0
 1	0	0	0	0	0	0	0	= 0
 0	1	0	0	0	0	0	0	= 0
 0	0	1	0	0	0	0	0	= 0
 0	0	0	1	0	0	0	0	= 0
 0	0	0	0	1	0	0	0	= 0
 0	0	0	0	0	-1	0	25	>= 0
 0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	-1	3	>= 0
 0	0	0	0	0	1	0	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 6, Symbols: 0, Locals: 0
9 constraints
(None	None	None	None	None	None	const)
 0	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	= 0
 1	0	0	0	0	0	0	= 0
 0	1	0	0	0	0	0	= 0
 0	0	1	0	0	0	0	= 0
 0	0	0	1	0	0	0	= 0
 0	0	0	0	1	0	0	= 0
 0	0	0	0	0	-1	25	>= 0
 0	0	0	0	0	1	-1	>= 0

FM input (eliminate pos 1):
Domain: 0, Range: 2, Symbols: 0, Locals: 0
5 constraints
 0	0	0	= 0
 0	0	0	= 0
 1	0	0	= 0
 0	-1	25	>= 0
 0	1	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 1, Symbols: 0, Locals: 0
3 constraints
 0	0	= 0
 0	0	= 0
 1	0	= 0

FM input (eliminate pos 1):
Domain: 0, Range: 2, Symbols: 0, Locals: 0
5 constraints
 0	0	0	= 0
 0	0	0	= 0
 1	0	0	= 0
 0	-1	25	>= 0
 0	1	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 1, Symbols: 0, Locals: 0
3 constraints
 0	0	= 0
 0	0	= 0
 1	0	= 0

FM input (eliminate pos 1):
Domain: 0, Range: 2, Symbols: 0, Locals: 0
5 constraints
 0	0	0	= 0
 0	0	0	= 0
 1	0	0	= 0
 0	-1	25	>= 0
 0	1	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 1, Symbols: 0, Locals: 0
3 constraints
 0	0	= 0
 0	0	= 0
 1	0	= 0

FM input (eliminate pos 1):
Domain: 0, Range: 2, Symbols: 0, Locals: 0
5 constraints
 0	0	0	= 0
 0	0	0	= 0
 1	0	0	= 0
 0	-1	25	>= 0
 0	1	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 1, Symbols: 0, Locals: 0
3 constraints
 0	0	= 0
 0	0	= 0
 1	0	= 0

FM input (eliminate pos 1):
Domain: 0, Range: 2, Symbols: 0, Locals: 0
5 constraints
 0	0	0	= 0
 0	0	0	= 0
 1	0	0	= 0
 0	-1	25	>= 0
 0	1	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 1, Symbols: 0, Locals: 0
3 constraints
 0	0	= 0
 0	0	= 0
 1	0	= 0

FM input (eliminate pos 1):
Domain: 0, Range: 2, Symbols: 0, Locals: 0
5 constraints
 0	0	0	= 0
 0	0	0	= 0
 1	0	0	= 0
 0	-1	25	>= 0
 0	1	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 1, Symbols: 0, Locals: 0
3 constraints
 0	0	= 0
 0	0	= 0
 1	0	= 0

FM input (eliminate pos 1):
Domain: 0, Range: 2, Symbols: 0, Locals: 0
5 constraints
 0	0	0	= 0
 0	0	0	= 0
 1	0	0	= 0
 0	-1	25	>= 0
 0	1	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 1, Symbols: 0, Locals: 0
3 constraints
 0	0	= 0
 0	0	= 0
 1	0	= 0

FM input (eliminate pos 1):
Domain: 0, Range: 2, Symbols: 0, Locals: 0
5 constraints
 0	0	0	= 0
 0	0	0	= 0
 1	0	0	= 0
 0	-1	25	>= 0
 0	1	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 1, Symbols: 0, Locals: 0
3 constraints
 0	0	= 0
 0	0	= 0
 1	0	= 0

FM input (eliminate pos 1):
Domain: 0, Range: 2, Symbols: 0, Locals: 0
5 constraints
 0	0	0	= 0
 0	0	0	= 0
 1	0	0	= 0
 0	-1	25	>= 0
 0	1	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 1, Symbols: 0, Locals: 0
3 constraints
 0	0	= 0
 0	0	= 0
 1	0	= 0

FM input (eliminate pos 1):
Domain: 0, Range: 2, Symbols: 0, Locals: 0
5 constraints
 0	0	0	= 0
 0	0	0	= 0
 1	0	0	= 0
 0	-1	25	>= 0
 0	1	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 1, Symbols: 0, Locals: 0
3 constraints
 0	0	= 0
 0	0	= 0
 1	0	= 0

Dependence polyhedron:
Domain: 0, Range: 6, Symbols: 0, Locals: 0
9 constraints
(None	None	None	None	None	None	const)
 0	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	= 0
 1	0	0	0	0	0	0	= 0
 0	1	0	0	0	0	0	= 0
 0	0	1	0	0	0	0	= 0
 0	0	0	1	0	0	0	= 0
 0	0	0	0	1	0	0	= 0
 0	0	0	0	0	-1	25	>= 0
 0	0	0	0	0	1	-1	>= 0

Checking whether tiling legality violated for dependence at depth: 6 between:
mlir-asm-printer: Verifying operation: func.func
affine.store %6, %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
%2 = affine.load %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 6 between:
mlir-asm-printer: Verifying operation: func.func
affine.store %6, %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
affine.store %6, %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
FM input (eliminate pos 0):
Domain: 0, Range: 4, Symbols: 0, Locals: 3
39 constraints
 0	0	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	-1	3	>= 0
 0	1	0	0	-8	0	0	0	>= 0
 0	-1	0	0	8	0	0	7	>= 0
 0	0	1	0	0	-8	0	0	>= 0
 0	0	-1	0	0	8	0	7	>= 0
 1	0	0	0	0	0	-26	0	>= 0
 -1	0	0	0	0	0	26	25	>= 0
 0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	-1	3	>= 0
 0	1	0	0	-8	0	0	0	>= 0
 0	-1	0	0	8	0	0	7	>= 0
 0	0	1	0	0	-8	0	0	>= 0
 0	0	-1	0	0	8	0	7	>= 0
 0	0	0	1	0	0	-26	0	>= 0
 0	0	0	-1	0	0	26	25	>= 0
 -1	0	0	1	0	0	0	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 3, Symbols: 0, Locals: 3
14 constraints
 0	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	= 0
 0	0	1	0	0	-26	-1	>= 0
 0	0	0	1	0	0	0	>= 0
 0	0	0	-1	0	0	12	>= 0
 0	0	0	0	1	0	0	>= 0
 0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	-1	3	>= 0
 1	0	0	-8	0	0	0	>= 0
 -1	0	0	8	0	0	7	>= 0
 0	1	0	0	-8	0	0	>= 0
 0	-1	0	0	8	0	7	>= 0
 0	0	-1	0	0	26	25	>= 0

FM input (eliminate pos 0):
Domain: 0, Range: 3, Symbols: 0, Locals: 3
14 constraints
 0	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	= 0
 0	0	1	0	0	-26	-1	>= 0
 0	0	0	1	0	0	0	>= 0
 0	0	0	-1	0	0	12	>= 0
 0	0	0	0	1	0	0	>= 0
 0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	-1	3	>= 0
 1	0	0	-8	0	0	0	>= 0
 -1	0	0	8	0	0	7	>= 0
 0	1	0	0	-8	0	0	>= 0
 0	-1	0	0	8	0	7	>= 0
 0	0	-1	0	0	26	25	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 2, Symbols: 0, Locals: 3
12 constraints
 0	0	0	0	0	0	= 0
 0	0	0	0	0	0	= 0
 0	1	0	0	-26	-1	>= 0
 0	0	1	0	0	0	>= 0
 0	0	-1	0	0	12	>= 0
 0	0	0	1	0	0	>= 0
 0	0	0	-1	0	12	>= 0
 0	0	0	0	1	0	>= 0
 0	0	0	0	-1	3	>= 0
 1	0	0	-8	0	0	>= 0
 -1	0	0	8	0	7	>= 0
 0	-1	0	0	26	25	>= 0

FM input (eliminate pos 0):
Domain: 0, Range: 2, Symbols: 0, Locals: 3
12 constraints
 0	0	0	0	0	0	= 0
 0	0	0	0	0	0	= 0
 0	1	0	0	-26	-1	>= 0
 0	0	1	0	0	0	>= 0
 0	0	-1	0	0	12	>= 0
 0	0	0	1	0	0	>= 0
 0	0	0	-1	0	12	>= 0
 0	0	0	0	1	0	>= 0
 0	0	0	0	-1	3	>= 0
 1	0	0	-8	0	0	>= 0
 -1	0	0	8	0	7	>= 0
 0	-1	0	0	26	25	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 1, Symbols: 0, Locals: 3
10 constraints
 0	0	0	0	0	= 0
 0	0	0	0	0	= 0
 1	0	0	-26	-1	>= 0
 0	1	0	0	0	>= 0
 0	-1	0	0	12	>= 0
 0	0	1	0	0	>= 0
 0	0	-1	0	12	>= 0
 0	0	0	1	0	>= 0
 0	0	0	-1	3	>= 0
 -1	0	0	26	25	>= 0

FM input (eliminate pos 0):
Domain: 0, Range: 1, Symbols: 0, Locals: 3
10 constraints
 0	0	0	0	0	= 0
 0	0	0	0	0	= 0
 1	0	0	-26	-1	>= 0
 0	1	0	0	0	>= 0
 0	-1	0	0	12	>= 0
 0	0	1	0	0	>= 0
 0	0	-1	0	12	>= 0
 0	0	0	1	0	>= 0
 0	0	0	-1	3	>= 0
 -1	0	0	26	25	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 0, Symbols: 0, Locals: 3
8 constraints
 0	0	0	0	= 0
 0	0	0	0	= 0
 1	0	0	0	>= 0
 -1	0	0	12	>= 0
 0	1	0	0	>= 0
 0	-1	0	12	>= 0
 0	0	1	0	>= 0
 0	0	-1	3	>= 0

FM input (eliminate pos 0):
Domain: 0, Range: 0, Symbols: 0, Locals: 3
8 constraints
 0	0	0	0	= 0
 0	0	0	0	= 0
 1	0	0	0	>= 0
 -1	0	0	12	>= 0
 0	1	0	0	>= 0
 0	-1	0	12	>= 0
 0	0	1	0	>= 0
 0	0	-1	3	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 0, Symbols: 0, Locals: 2
6 constraints
 0	0	0	= 0
 0	0	0	= 0
 1	0	0	>= 0
 -1	0	12	>= 0
 0	1	0	>= 0
 0	-1	3	>= 0

FM input (eliminate pos 0):
Domain: 0, Range: 0, Symbols: 0, Locals: 2
6 constraints
 0	0	0	= 0
 0	0	0	= 0
 1	0	0	>= 0
 -1	0	12	>= 0
 0	1	0	>= 0
 0	-1	3	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 0, Symbols: 0, Locals: 1
4 constraints
 0	0	= 0
 0	0	= 0
 1	0	>= 0
 -1	3	>= 0

FM input (eliminate pos 0):
Domain: 0, Range: 0, Symbols: 0, Locals: 1
4 constraints
 0	0	= 0
 0	0	= 0
 1	0	>= 0
 -1	3	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 0, Symbols: 0, Locals: 0
2 constraints
 0	= 0
 0	= 0

FM input (eliminate pos 6):
Domain: 0, Range: 9, Symbols: 0, Locals: 3
44 constraints
(None	None	None	None	None	None	Value	Value	Value	Local	Local	Local	const)
 0	0	0	0	0	0	0	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	0	0	0	0	0	0	= 0
 1	0	0	0	0	0	0	0	0	0	0	0	0	= 0
 0	1	0	0	0	0	0	0	0	0	0	0	0	= 0
 0	0	1	0	0	0	0	0	0	0	0	0	0	= 0
 0	0	0	1	0	0	0	0	0	0	0	0	0	= 0
 0	0	0	0	1	0	0	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	0	0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	0	0	0	0	-1	3	>= 0
 0	0	0	0	0	0	1	0	0	-8	0	0	0	>= 0
 0	0	0	0	0	0	-1	0	0	8	0	0	7	>= 0
 0	0	0	0	0	0	0	1	0	0	-8	0	0	>= 0
 0	0	0	0	0	0	0	-1	0	0	8	0	7	>= 0
 0	0	0	0	0	-1	0	0	1	0	0	-26	0	>= 0
 0	0	0	0	0	1	0	0	-1	0	0	26	25	>= 0
 0	0	0	0	0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	0	0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	0	0	0	0	-1	3	>= 0
 0	0	0	0	0	0	1	0	0	-8	0	0	0	>= 0
 0	0	0	0	0	0	-1	0	0	8	0	0	7	>= 0
 0	0	0	0	0	0	0	1	0	0	-8	0	0	>= 0
 0	0	0	0	0	0	0	-1	0	0	8	0	7	>= 0
 0	0	0	0	0	0	0	0	1	0	0	-26	0	>= 0
 0	0	0	0	0	0	0	0	-1	0	0	26	25	>= 0
 0	0	0	0	0	1	0	0	0	0	0	0	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 8, Symbols: 0, Locals: 3
20 constraints
(None	None	None	None	None	None	None	None	Local	Local	Local	const)
 0	0	0	0	0	0	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	0	0	0	0	0	= 0
 1	0	0	0	0	0	0	0	0	0	0	0	= 0
 0	1	0	0	0	0	0	0	0	0	0	0	= 0
 0	0	1	0	0	0	0	0	0	0	0	0	= 0
 0	0	0	1	0	0	0	0	0	0	0	0	= 0
 0	0	0	0	1	0	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	0	0	0	-1	3	>= 0
 0	0	0	0	0	0	1	0	0	-8	0	0	>= 0
 0	0	0	0	0	0	-1	0	0	8	0	7	>= 0
 0	0	0	0	0	-1	0	1	0	0	-26	0	>= 0
 0	0	0	0	0	1	0	-1	0	0	26	25	>= 0
 0	0	0	0	0	0	0	1	0	0	-26	0	>= 0
 0	0	0	0	0	0	0	-1	0	0	26	25	>= 0
 0	0	0	0	0	1	0	0	0	0	0	-1	>= 0

FM input (eliminate pos 6):
Domain: 0, Range: 8, Symbols: 0, Locals: 3
20 constraints
(None	None	None	None	None	None	Value	Value	Local	Local	Local	const)
 0	0	0	0	0	0	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	0	0	0	0	0	= 0
 1	0	0	0	0	0	0	0	0	0	0	0	= 0
 0	1	0	0	0	0	0	0	0	0	0	0	= 0
 0	0	1	0	0	0	0	0	0	0	0	0	= 0
 0	0	0	1	0	0	0	0	0	0	0	0	= 0
 0	0	0	0	1	0	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	0	0	0	-1	3	>= 0
 0	0	0	0	0	0	1	0	0	-8	0	0	>= 0
 0	0	0	0	0	0	-1	0	0	8	0	7	>= 0
 0	0	0	0	0	-1	0	1	0	0	-26	0	>= 0
 0	0	0	0	0	1	0	-1	0	0	26	25	>= 0
 0	0	0	0	0	0	0	1	0	0	-26	0	>= 0
 0	0	0	0	0	0	0	-1	0	0	26	25	>= 0
 0	0	0	0	0	1	0	0	0	0	0	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 7, Symbols: 0, Locals: 3
18 constraints
(None	None	None	None	None	None	None	Local	Local	Local	const)
 0	0	0	0	0	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	0	0	0	0	= 0
 1	0	0	0	0	0	0	0	0	0	0	= 0
 0	1	0	0	0	0	0	0	0	0	0	= 0
 0	0	1	0	0	0	0	0	0	0	0	= 0
 0	0	0	1	0	0	0	0	0	0	0	= 0
 0	0	0	0	1	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	0	0	-1	3	>= 0
 0	0	0	0	0	-1	1	0	0	-26	0	>= 0
 0	0	0	0	0	1	-1	0	0	26	25	>= 0
 0	0	0	0	0	0	1	0	0	-26	0	>= 0
 0	0	0	0	0	0	-1	0	0	26	25	>= 0
 0	0	0	0	0	1	0	0	0	0	-1	>= 0

FM input (eliminate pos 7):
Domain: 0, Range: 7, Symbols: 0, Locals: 3
18 constraints
(None	None	None	None	None	None	Value	Local	Local	Local	const)
 0	0	0	0	0	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	0	0	0	0	= 0
 1	0	0	0	0	0	0	0	0	0	0	= 0
 0	1	0	0	0	0	0	0	0	0	0	= 0
 0	0	1	0	0	0	0	0	0	0	0	= 0
 0	0	0	1	0	0	0	0	0	0	0	= 0
 0	0	0	0	1	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	0	0	-1	3	>= 0
 0	0	0	0	0	-1	1	0	0	-26	0	>= 0
 0	0	0	0	0	1	-1	0	0	26	25	>= 0
 0	0	0	0	0	0	1	0	0	-26	0	>= 0
 0	0	0	0	0	0	-1	0	0	26	25	>= 0
 0	0	0	0	0	1	0	0	0	0	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 7, Symbols: 0, Locals: 2
16 constraints
(None	None	None	None	None	None	None	Local	Local	const)
 0	0	0	0	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	0	0	0	= 0
 1	0	0	0	0	0	0	0	0	0	= 0
 0	1	0	0	0	0	0	0	0	0	= 0
 0	0	1	0	0	0	0	0	0	0	= 0
 0	0	0	1	0	0	0	0	0	0	= 0
 0	0	0	0	1	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	0	-1	3	>= 0
 0	0	0	0	0	-1	1	0	-26	0	>= 0
 0	0	0	0	0	1	-1	0	26	25	>= 0
 0	0	0	0	0	0	1	0	-26	0	>= 0
 0	0	0	0	0	0	-1	0	26	25	>= 0
 0	0	0	0	0	1	0	0	0	-1	>= 0

FM input (eliminate pos 7):
Domain: 0, Range: 7, Symbols: 0, Locals: 2
16 constraints
(None	None	None	None	None	None	Value	Local	Local	const)
 0	0	0	0	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	0	0	0	= 0
 1	0	0	0	0	0	0	0	0	0	= 0
 0	1	0	0	0	0	0	0	0	0	= 0
 0	0	1	0	0	0	0	0	0	0	= 0
 0	0	0	1	0	0	0	0	0	0	= 0
 0	0	0	0	1	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	0	-1	3	>= 0
 0	0	0	0	0	-1	1	0	-26	0	>= 0
 0	0	0	0	0	1	-1	0	26	25	>= 0
 0	0	0	0	0	0	1	0	-26	0	>= 0
 0	0	0	0	0	0	-1	0	26	25	>= 0
 0	0	0	0	0	1	0	0	0	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 7, Symbols: 0, Locals: 1
14 constraints
(None	None	None	None	None	None	None	Local	const)
 0	0	0	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	0	0	= 0
 1	0	0	0	0	0	0	0	0	= 0
 0	1	0	0	0	0	0	0	0	= 0
 0	0	1	0	0	0	0	0	0	= 0
 0	0	0	1	0	0	0	0	0	= 0
 0	0	0	0	1	0	0	0	0	= 0
 0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	-1	3	>= 0
 0	0	0	0	0	-1	1	-26	0	>= 0
 0	0	0	0	0	1	-1	26	25	>= 0
 0	0	0	0	0	0	1	-26	0	>= 0
 0	0	0	0	0	0	-1	26	25	>= 0
 0	0	0	0	0	1	0	0	-1	>= 0

FM input (eliminate pos 6):
Domain: 0, Range: 7, Symbols: 0, Locals: 1
14 constraints
(None	None	None	None	None	None	Value	Local	const)
 0	0	0	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	0	0	= 0
 1	0	0	0	0	0	0	0	0	= 0
 0	1	0	0	0	0	0	0	0	= 0
 0	0	1	0	0	0	0	0	0	= 0
 0	0	0	1	0	0	0	0	0	= 0
 0	0	0	0	1	0	0	0	0	= 0
 0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	-1	3	>= 0
 0	0	0	0	0	-1	1	-26	0	>= 0
 0	0	0	0	0	1	-1	26	25	>= 0
 0	0	0	0	0	0	1	-26	0	>= 0
 0	0	0	0	0	0	-1	26	25	>= 0
 0	0	0	0	0	1	0	0	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 6, Symbols: 0, Locals: 1
11 constraints
(None	None	None	None	None	None	Local	const)
 0	0	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	0	= 0
 1	0	0	0	0	0	0	0	= 0
 0	1	0	0	0	0	0	0	= 0
 0	0	1	0	0	0	0	0	= 0
 0	0	0	1	0	0	0	0	= 0
 0	0	0	0	1	0	0	0	= 0
 0	0	0	0	0	-1	0	25	>= 0
 0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	-1	3	>= 0
 0	0	0	0	0	1	0	-1	>= 0

FM input (eliminate pos 6):
Domain: 0, Range: 6, Symbols: 0, Locals: 1
11 constraints
(None	None	None	None	None	None	Local	const)
 0	0	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	0	= 0
 1	0	0	0	0	0	0	0	= 0
 0	1	0	0	0	0	0	0	= 0
 0	0	1	0	0	0	0	0	= 0
 0	0	0	1	0	0	0	0	= 0
 0	0	0	0	1	0	0	0	= 0
 0	0	0	0	0	-1	0	25	>= 0
 0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	-1	3	>= 0
 0	0	0	0	0	1	0	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 6, Symbols: 0, Locals: 0
9 constraints
(None	None	None	None	None	None	const)
 0	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	= 0
 1	0	0	0	0	0	0	= 0
 0	1	0	0	0	0	0	= 0
 0	0	1	0	0	0	0	= 0
 0	0	0	1	0	0	0	= 0
 0	0	0	0	1	0	0	= 0
 0	0	0	0	0	-1	25	>= 0
 0	0	0	0	0	1	-1	>= 0

FM input (eliminate pos 1):
Domain: 0, Range: 2, Symbols: 0, Locals: 0
5 constraints
 0	0	0	= 0
 0	0	0	= 0
 1	0	0	= 0
 0	-1	25	>= 0
 0	1	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 1, Symbols: 0, Locals: 0
3 constraints
 0	0	= 0
 0	0	= 0
 1	0	= 0

FM input (eliminate pos 1):
Domain: 0, Range: 2, Symbols: 0, Locals: 0
5 constraints
 0	0	0	= 0
 0	0	0	= 0
 1	0	0	= 0
 0	-1	25	>= 0
 0	1	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 1, Symbols: 0, Locals: 0
3 constraints
 0	0	= 0
 0	0	= 0
 1	0	= 0

FM input (eliminate pos 1):
Domain: 0, Range: 2, Symbols: 0, Locals: 0
5 constraints
 0	0	0	= 0
 0	0	0	= 0
 1	0	0	= 0
 0	-1	25	>= 0
 0	1	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 1, Symbols: 0, Locals: 0
3 constraints
 0	0	= 0
 0	0	= 0
 1	0	= 0

FM input (eliminate pos 1):
Domain: 0, Range: 2, Symbols: 0, Locals: 0
5 constraints
 0	0	0	= 0
 0	0	0	= 0
 1	0	0	= 0
 0	-1	25	>= 0
 0	1	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 1, Symbols: 0, Locals: 0
3 constraints
 0	0	= 0
 0	0	= 0
 1	0	= 0

FM input (eliminate pos 1):
Domain: 0, Range: 2, Symbols: 0, Locals: 0
5 constraints
 0	0	0	= 0
 0	0	0	= 0
 1	0	0	= 0
 0	-1	25	>= 0
 0	1	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 1, Symbols: 0, Locals: 0
3 constraints
 0	0	= 0
 0	0	= 0
 1	0	= 0

FM input (eliminate pos 1):
Domain: 0, Range: 2, Symbols: 0, Locals: 0
5 constraints
 0	0	0	= 0
 0	0	0	= 0
 1	0	0	= 0
 0	-1	25	>= 0
 0	1	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 1, Symbols: 0, Locals: 0
3 constraints
 0	0	= 0
 0	0	= 0
 1	0	= 0

FM input (eliminate pos 1):
Domain: 0, Range: 2, Symbols: 0, Locals: 0
5 constraints
 0	0	0	= 0
 0	0	0	= 0
 1	0	0	= 0
 0	-1	25	>= 0
 0	1	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 1, Symbols: 0, Locals: 0
3 constraints
 0	0	= 0
 0	0	= 0
 1	0	= 0

FM input (eliminate pos 1):
Domain: 0, Range: 2, Symbols: 0, Locals: 0
5 constraints
 0	0	0	= 0
 0	0	0	= 0
 1	0	0	= 0
 0	-1	25	>= 0
 0	1	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 1, Symbols: 0, Locals: 0
3 constraints
 0	0	= 0
 0	0	= 0
 1	0	= 0

FM input (eliminate pos 1):
Domain: 0, Range: 2, Symbols: 0, Locals: 0
5 constraints
 0	0	0	= 0
 0	0	0	= 0
 1	0	0	= 0
 0	-1	25	>= 0
 0	1	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 1, Symbols: 0, Locals: 0
3 constraints
 0	0	= 0
 0	0	= 0
 1	0	= 0

FM input (eliminate pos 1):
Domain: 0, Range: 2, Symbols: 0, Locals: 0
5 constraints
 0	0	0	= 0
 0	0	0	= 0
 1	0	0	= 0
 0	-1	25	>= 0
 0	1	-1	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 1, Symbols: 0, Locals: 0
3 constraints
 0	0	= 0
 0	0	= 0
 1	0	= 0

Dependence polyhedron:
Domain: 0, Range: 6, Symbols: 0, Locals: 0
9 constraints
(None	None	None	None	None	None	const)
 0	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	= 0
 1	0	0	0	0	0	0	= 0
 0	1	0	0	0	0	0	= 0
 0	0	1	0	0	0	0	= 0
 0	0	0	1	0	0	0	= 0
 0	0	0	0	1	0	0	= 0
 0	0	0	0	0	-1	25	>= 0
 0	0	0	0	0	1	-1	>= 0

Checking whether tiling legality violated for dependence at depth: 6 between:
mlir-asm-printer: Verifying operation: func.func
affine.store %6, %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
affine.store %6, %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 7 between:
mlir-asm-printer: Verifying operation: func.func
%0 = affine.load %arg0[%arg6, %arg8] : memref<104x104xi8, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
%0 = affine.load %arg0[%arg6, %arg8] : memref<104x104xi8, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 7 between:
mlir-asm-printer: Verifying operation: func.func
%0 = affine.load %arg0[%arg6, %arg8] : memref<104x104xi8, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
%1 = affine.load %arg1[%arg8, %arg7] : memref<104x104xi8, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 7 between:
mlir-asm-printer: Verifying operation: func.func
%0 = affine.load %arg0[%arg6, %arg8] : memref<104x104xi8, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
%2 = affine.load %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 7 between:
mlir-asm-printer: Verifying operation: func.func
%0 = affine.load %arg0[%arg6, %arg8] : memref<104x104xi8, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
affine.store %6, %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 7 between:
mlir-asm-printer: Verifying operation: func.func
%1 = affine.load %arg1[%arg8, %arg7] : memref<104x104xi8, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
%0 = affine.load %arg0[%arg6, %arg8] : memref<104x104xi8, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 7 between:
mlir-asm-printer: Verifying operation: func.func
%1 = affine.load %arg1[%arg8, %arg7] : memref<104x104xi8, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
%1 = affine.load %arg1[%arg8, %arg7] : memref<104x104xi8, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 7 between:
mlir-asm-printer: Verifying operation: func.func
%1 = affine.load %arg1[%arg8, %arg7] : memref<104x104xi8, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
%2 = affine.load %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 7 between:
mlir-asm-printer: Verifying operation: func.func
%1 = affine.load %arg1[%arg8, %arg7] : memref<104x104xi8, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
affine.store %6, %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 7 between:
mlir-asm-printer: Verifying operation: func.func
%2 = affine.load %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
%0 = affine.load %arg0[%arg6, %arg8] : memref<104x104xi8, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 7 between:
mlir-asm-printer: Verifying operation: func.func
%2 = affine.load %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
%1 = affine.load %arg1[%arg8, %arg7] : memref<104x104xi8, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 7 between:
mlir-asm-printer: Verifying operation: func.func
%2 = affine.load %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
%2 = affine.load %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 7 between:
mlir-asm-printer: Verifying operation: func.func
%2 = affine.load %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
affine.store %6, %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
FM input (eliminate pos 0):
Domain: 0, Range: 3, Symbols: 0, Locals: 3
38 constraints
 0	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	>= 0
 0	0	0	1	0	0	0	>= 0
 0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	>= 0
 0	0	0	0	1	0	0	>= 0
 0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	-1	3	>= 0
 1	0	0	-8	0	0	0	>= 0
 -1	0	0	8	0	0	7	>= 0
 0	1	0	0	-8	0	0	>= 0
 0	-1	0	0	8	0	7	>= 0
 0	0	1	0	0	-26	0	>= 0
 0	0	-1	0	0	26	25	>= 0
 0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	>= 0
 0	0	0	1	0	0	0	>= 0
 0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	>= 0
 0	0	0	0	1	0	0	>= 0
 0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	-1	3	>= 0
 1	0	0	-8	0	0	0	>= 0
 -1	0	0	8	0	0	7	>= 0
 0	1	0	0	-8	0	0	>= 0
 0	-1	0	0	8	0	7	>= 0
 0	0	1	0	0	-26	0	>= 0
 0	0	-1	0	0	26	25	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 2, Symbols: 0, Locals: 3
12 constraints
 0	0	0	0	0	0	= 0
 0	0	0	0	0	0	= 0
 0	0	1	0	0	0	>= 0
 0	0	-1	0	0	12	>= 0
 0	0	0	1	0	0	>= 0
 0	0	0	-1	0	12	>= 0
 0	0	0	0	1	0	>= 0
 0	0	0	0	-1	3	>= 0
 1	0	0	-8	0	0	>= 0
 -1	0	0	8	0	7	>= 0
 0	1	0	0	-26	0	>= 0
 0	-1	0	0	26	25	>= 0

FM input (eliminate pos 0):
Domain: 0, Range: 2, Symbols: 0, Locals: 3
12 constraints
 0	0	0	0	0	0	= 0
 0	0	0	0	0	0	= 0
 0	0	1	0	0	0	>= 0
 0	0	-1	0	0	12	>= 0
 0	0	0	1	0	0	>= 0
 0	0	0	-1	0	12	>= 0
 0	0	0	0	1	0	>= 0
 0	0	0	0	-1	3	>= 0
 1	0	0	-8	0	0	>= 0
 -1	0	0	8	0	7	>= 0
 0	1	0	0	-26	0	>= 0
 0	-1	0	0	26	25	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 1, Symbols: 0, Locals: 3
10 constraints
 0	0	0	0	0	= 0
 0	0	0	0	0	= 0
 0	1	0	0	0	>= 0
 0	-1	0	0	12	>= 0
 0	0	1	0	0	>= 0
 0	0	-1	0	12	>= 0
 0	0	0	1	0	>= 0
 0	0	0	-1	3	>= 0
 1	0	0	-26	0	>= 0
 -1	0	0	26	25	>= 0

FM input (eliminate pos 0):
Domain: 0, Range: 1, Symbols: 0, Locals: 3
10 constraints
 0	0	0	0	0	= 0
 0	0	0	0	0	= 0
 0	1	0	0	0	>= 0
 0	-1	0	0	12	>= 0
 0	0	1	0	0	>= 0
 0	0	-1	0	12	>= 0
 0	0	0	1	0	>= 0
 0	0	0	-1	3	>= 0
 1	0	0	-26	0	>= 0
 -1	0	0	26	25	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 0, Symbols: 0, Locals: 3
8 constraints
 0	0	0	0	= 0
 0	0	0	0	= 0
 1	0	0	0	>= 0
 -1	0	0	12	>= 0
 0	1	0	0	>= 0
 0	-1	0	12	>= 0
 0	0	1	0	>= 0
 0	0	-1	3	>= 0

FM input (eliminate pos 0):
Domain: 0, Range: 0, Symbols: 0, Locals: 3
8 constraints
 0	0	0	0	= 0
 0	0	0	0	= 0
 1	0	0	0	>= 0
 -1	0	0	12	>= 0
 0	1	0	0	>= 0
 0	-1	0	12	>= 0
 0	0	1	0	>= 0
 0	0	-1	3	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 0, Symbols: 0, Locals: 2
6 constraints
 0	0	0	= 0
 0	0	0	= 0
 1	0	0	>= 0
 -1	0	12	>= 0
 0	1	0	>= 0
 0	-1	3	>= 0

FM input (eliminate pos 0):
Domain: 0, Range: 0, Symbols: 0, Locals: 2
6 constraints
 0	0	0	= 0
 0	0	0	= 0
 1	0	0	>= 0
 -1	0	12	>= 0
 0	1	0	>= 0
 0	-1	3	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 0, Symbols: 0, Locals: 1
4 constraints
 0	0	= 0
 0	0	= 0
 1	0	>= 0
 -1	3	>= 0

FM input (eliminate pos 0):
Domain: 0, Range: 0, Symbols: 0, Locals: 1
4 constraints
 0	0	= 0
 0	0	= 0
 1	0	>= 0
 -1	3	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 0, Symbols: 0, Locals: 0
2 constraints
 0	= 0
 0	= 0

FM input (eliminate pos 6):
Domain: 0, Range: 9, Symbols: 0, Locals: 3
44 constraints
(None	None	None	None	None	None	Value	Value	Value	Local	Local	Local	const)
 0	0	0	0	0	0	0	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	0	0	0	0	0	0	= 0
 1	0	0	0	0	0	0	0	0	0	0	0	0	= 0
 0	1	0	0	0	0	0	0	0	0	0	0	0	= 0
 0	0	1	0	0	0	0	0	0	0	0	0	0	= 0
 0	0	0	1	0	0	0	0	0	0	0	0	0	= 0
 0	0	0	0	1	0	0	0	0	0	0	0	0	= 0
 0	0	0	0	0	1	0	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	0	0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	0	0	0	0	-1	3	>= 0
 0	0	0	0	0	0	1	0	0	-8	0	0	0	>= 0
 0	0	0	0	0	0	-1	0	0	8	0	0	7	>= 0
 0	0	0	0	0	0	0	1	0	0	-8	0	0	>= 0
 0	0	0	0	0	0	0	-1	0	0	8	0	7	>= 0
 0	0	0	0	0	0	0	0	1	0	0	-26	0	>= 0
 0	0	0	0	0	0	0	0	-1	0	0	26	25	>= 0
 0	0	0	0	0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	0	0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	0	0	0	0	0	1	>= 0
 0	0	0	0	0	0	0	0	0	0	0	0	0	>= 0
 0	0	0	0	0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	0	0	0	0	-1	3	>= 0
 0	0	0	0	0	0	1	0	0	-8	0	0	0	>= 0
 0	0	0	0	0	0	-1	0	0	8	0	0	7	>= 0
 0	0	0	0	0	0	0	1	0	0	-8	0	0	>= 0
 0	0	0	0	0	0	0	-1	0	0	8	0	7	>= 0
 0	0	0	0	0	0	0	0	1	0	0	-26	0	>= 0
 0	0	0	0	0	0	0	0	-1	0	0	26	25	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 8, Symbols: 0, Locals: 3
18 constraints
(None	None	None	None	None	None	None	None	Local	Local	Local	const)
 0	0	0	0	0	0	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	0	0	0	0	0	= 0
 1	0	0	0	0	0	0	0	0	0	0	0	= 0
 0	1	0	0	0	0	0	0	0	0	0	0	= 0
 0	0	1	0	0	0	0	0	0	0	0	0	= 0
 0	0	0	1	0	0	0	0	0	0	0	0	= 0
 0	0	0	0	1	0	0	0	0	0	0	0	= 0
 0	0	0	0	0	1	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	0	0	0	-1	3	>= 0
 0	0	0	0	0	0	1	0	0	-8	0	0	>= 0
 0	0	0	0	0	0	-1	0	0	8	0	7	>= 0
 0	0	0	0	0	0	0	1	0	0	-26	0	>= 0
 0	0	0	0	0	0	0	-1	0	0	26	25	>= 0

FM input (eliminate pos 6):
Domain: 0, Range: 8, Symbols: 0, Locals: 3
18 constraints
(None	None	None	None	None	None	Value	Value	Local	Local	Local	const)
 0	0	0	0	0	0	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	0	0	0	0	0	= 0
 1	0	0	0	0	0	0	0	0	0	0	0	= 0
 0	1	0	0	0	0	0	0	0	0	0	0	= 0
 0	0	1	0	0	0	0	0	0	0	0	0	= 0
 0	0	0	1	0	0	0	0	0	0	0	0	= 0
 0	0	0	0	1	0	0	0	0	0	0	0	= 0
 0	0	0	0	0	1	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	0	0	0	-1	3	>= 0
 0	0	0	0	0	0	1	0	0	-8	0	0	>= 0
 0	0	0	0	0	0	-1	0	0	8	0	7	>= 0
 0	0	0	0	0	0	0	1	0	0	-26	0	>= 0
 0	0	0	0	0	0	0	-1	0	0	26	25	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 7, Symbols: 0, Locals: 3
16 constraints
(None	None	None	None	None	None	None	Local	Local	Local	const)
 0	0	0	0	0	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	0	0	0	0	= 0
 1	0	0	0	0	0	0	0	0	0	0	= 0
 0	1	0	0	0	0	0	0	0	0	0	= 0
 0	0	1	0	0	0	0	0	0	0	0	= 0
 0	0	0	1	0	0	0	0	0	0	0	= 0
 0	0	0	0	1	0	0	0	0	0	0	= 0
 0	0	0	0	0	1	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	0	0	-1	3	>= 0
 0	0	0	0	0	0	1	0	0	-26	0	>= 0
 0	0	0	0	0	0	-1	0	0	26	25	>= 0

FM input (eliminate pos 6):
Domain: 0, Range: 7, Symbols: 0, Locals: 3
16 constraints
(None	None	None	None	None	None	Value	Local	Local	Local	const)
 0	0	0	0	0	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	0	0	0	0	= 0
 1	0	0	0	0	0	0	0	0	0	0	= 0
 0	1	0	0	0	0	0	0	0	0	0	= 0
 0	0	1	0	0	0	0	0	0	0	0	= 0
 0	0	0	1	0	0	0	0	0	0	0	= 0
 0	0	0	0	1	0	0	0	0	0	0	= 0
 0	0	0	0	0	1	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	0	0	-1	3	>= 0
 0	0	0	0	0	0	1	0	0	-26	0	>= 0
 0	0	0	0	0	0	-1	0	0	26	25	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 6, Symbols: 0, Locals: 3
14 constraints
(None	None	None	None	None	None	Local	Local	Local	const)
 0	0	0	0	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	0	0	0	= 0
 1	0	0	0	0	0	0	0	0	0	= 0
 0	1	0	0	0	0	0	0	0	0	= 0
 0	0	1	0	0	0	0	0	0	0	= 0
 0	0	0	1	0	0	0	0	0	0	= 0
 0	0	0	0	1	0	0	0	0	0	= 0
 0	0	0	0	0	1	0	0	0	0	= 0
 0	0	0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	0	-1	3	>= 0

FM input (eliminate pos 6):
Domain: 0, Range: 6, Symbols: 0, Locals: 3
14 constraints
(None	None	None	None	None	None	Local	Local	Local	const)
 0	0	0	0	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	0	0	0	= 0
 1	0	0	0	0	0	0	0	0	0	= 0
 0	1	0	0	0	0	0	0	0	0	= 0
 0	0	1	0	0	0	0	0	0	0	= 0
 0	0	0	1	0	0	0	0	0	0	= 0
 0	0	0	0	1	0	0	0	0	0	= 0
 0	0	0	0	0	1	0	0	0	0	= 0
 0	0	0	0	0	0	1	0	0	0	>= 0
 0	0	0	0	0	0	-1	0	0	12	>= 0
 0	0	0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	0	-1	3	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 6, Symbols: 0, Locals: 2
12 constraints
(None	None	None	None	None	None	Local	Local	const)
 0	0	0	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	0	0	= 0
 1	0	0	0	0	0	0	0	0	= 0
 0	1	0	0	0	0	0	0	0	= 0
 0	0	1	0	0	0	0	0	0	= 0
 0	0	0	1	0	0	0	0	0	= 0
 0	0	0	0	1	0	0	0	0	= 0
 0	0	0	0	0	1	0	0	0	= 0
 0	0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	-1	3	>= 0

FM input (eliminate pos 6):
Domain: 0, Range: 6, Symbols: 0, Locals: 2
12 constraints
(None	None	None	None	None	None	Local	Local	const)
 0	0	0	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	0	0	= 0
 1	0	0	0	0	0	0	0	0	= 0
 0	1	0	0	0	0	0	0	0	= 0
 0	0	1	0	0	0	0	0	0	= 0
 0	0	0	1	0	0	0	0	0	= 0
 0	0	0	0	1	0	0	0	0	= 0
 0	0	0	0	0	1	0	0	0	= 0
 0	0	0	0	0	0	1	0	0	>= 0
 0	0	0	0	0	0	-1	0	12	>= 0
 0	0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	0	-1	3	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 6, Symbols: 0, Locals: 1
10 constraints
(None	None	None	None	None	None	Local	const)
 0	0	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	0	= 0
 1	0	0	0	0	0	0	0	= 0
 0	1	0	0	0	0	0	0	= 0
 0	0	1	0	0	0	0	0	= 0
 0	0	0	1	0	0	0	0	= 0
 0	0	0	0	1	0	0	0	= 0
 0	0	0	0	0	1	0	0	= 0
 0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	-1	3	>= 0

FM input (eliminate pos 6):
Domain: 0, Range: 6, Symbols: 0, Locals: 1
10 constraints
(None	None	None	None	None	None	Local	const)
 0	0	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	0	= 0
 1	0	0	0	0	0	0	0	= 0
 0	1	0	0	0	0	0	0	= 0
 0	0	1	0	0	0	0	0	= 0
 0	0	0	1	0	0	0	0	= 0
 0	0	0	0	1	0	0	0	= 0
 0	0	0	0	0	1	0	0	= 0
 0	0	0	0	0	0	1	0	>= 0
 0	0	0	0	0	0	-1	3	>= 0

FM isResultIntegerExact: 1
FM output:
Domain: 0, Range: 6, Symbols: 0, Locals: 0
8 constraints
(None	None	None	None	None	None	const)
 0	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	= 0
 1	0	0	0	0	0	0	= 0
 0	1	0	0	0	0	0	= 0
 0	0	1	0	0	0	0	= 0
 0	0	0	1	0	0	0	= 0
 0	0	0	0	1	0	0	= 0
 0	0	0	0	0	1	0	= 0

Dependence polyhedron:
Domain: 0, Range: 6, Symbols: 0, Locals: 0
8 constraints
(None	None	None	None	None	None	const)
 0	0	0	0	0	0	0	= 0
 0	0	0	0	0	0	0	= 0
 1	0	0	0	0	0	0	= 0
 0	1	0	0	0	0	0	= 0
 0	0	1	0	0	0	0	= 0
 0	0	0	1	0	0	0	= 0
 0	0	0	0	1	0	0	= 0
 0	0	0	0	0	1	0	= 0

Checking whether tiling legality violated for dependence at depth: 7 between:
mlir-asm-printer: Verifying operation: func.func
%2 = affine.load %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
affine.store %6, %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 7 between:
mlir-asm-printer: Verifying operation: func.func
affine.store %6, %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
%0 = affine.load %arg0[%arg6, %arg8] : memref<104x104xi8, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 7 between:
mlir-asm-printer: Verifying operation: func.func
affine.store %6, %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
%1 = affine.load %arg1[%arg8, %arg7] : memref<104x104xi8, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 7 between:
mlir-asm-printer: Verifying operation: func.func
affine.store %6, %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
%2 = affine.load %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
Checking for dependence at depth: 7 between:
mlir-asm-printer: Verifying operation: func.func
affine.store %6, %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
affine.store %6, %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
mlir-asm-printer: Verifying operation: func.func
Non-hyperrectangular nests not supported for tiling!
mlir-asm-printer: Verifying operation: func.func
out/matmul104x104-tiled-once/tiling/matmul104x104-tiled-once-before-tiling.mlir:10:5: remark: using tile sizes [1 1 1 1 1 13 ]

    affine.for %arg3 = 0 to 104 step 8 {
    ^
out/matmul104x104-tiled-once/tiling/matmul104x104-tiled-once-before-tiling.mlir:10:5: note: see current operation: 
affine.for %arg3 = 0 to 104 step 8 {
  affine.for %arg4 = 0 to 104 step 8 {
    affine.for %arg5 = 0 to 104 step 26 {
      affine.for %arg6 = affine_map<(d0) -> (d0)>(%arg3) to affine_map<(d0) -> (d0 + 8)>(%arg3) {
        affine.for %arg7 = affine_map<(d0) -> (d0)>(%arg4) to affine_map<(d0) -> (d0 + 8)>(%arg4) {
          affine.for %arg8 = affine_map<(d0) -> (d0)>(%arg5) to affine_map<(d0) -> (d0 + 26)>(%arg5) {
            %0 = affine.load %arg0[%arg6, %arg8] : memref<104x104xi8, strided<[?, ?], offset: ?>>
            %1 = affine.load %arg1[%arg8, %arg7] : memref<104x104xi8, strided<[?, ?], offset: ?>>
            %2 = affine.load %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
            %3 = arith.extsi %0 : i8 to i32
            %4 = arith.extsi %1 : i8 to i32
            %5 = arith.muli %3, %4 : i32
            %6 = arith.addi %2, %5 : i32
            affine.store %6, %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
          }
        }
      }
    }
  }
}
out/matmul104x104-tiled-once/tiling/matmul104x104-tiled-once-before-tiling.mlir:10:5: remark: loop tiling failed!

    affine.for %arg3 = 0 to 104 step 8 {
    ^
out/matmul104x104-tiled-once/tiling/matmul104x104-tiled-once-before-tiling.mlir:10:5: note: see current operation: 
affine.for %arg3 = 0 to 104 step 8 {
  affine.for %arg4 = 0 to 104 step 8 {
    affine.for %arg5 = 0 to 104 step 26 {
      affine.for %arg6 = affine_map<(d0) -> (d0)>(%arg3) to affine_map<(d0) -> (d0 + 8)>(%arg3) {
        affine.for %arg7 = affine_map<(d0) -> (d0)>(%arg4) to affine_map<(d0) -> (d0 + 8)>(%arg4) {
          affine.for %arg8 = affine_map<(d0) -> (d0)>(%arg5) to affine_map<(d0) -> (d0 + 26)>(%arg5) {
            %0 = affine.load %arg0[%arg6, %arg8] : memref<104x104xi8, strided<[?, ?], offset: ?>>
            %1 = affine.load %arg1[%arg8, %arg7] : memref<104x104xi8, strided<[?, ?], offset: ?>>
            %2 = affine.load %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
            %3 = arith.extsi %0 : i8 to i32
            %4 = arith.extsi %1 : i8 to i32
            %5 = arith.muli %3, %4 : i32
            %6 = arith.addi %2, %5 : i32
            affine.store %6, %arg2[%arg6, %arg7] : memref<104x104xi32, strided<[?, ?], offset: ?>>
          }
        }
      }
    }
  }
}
mlir-asm-printer: Verifying operation: builtin.module
ImplicitTypeIDRegistry::lookupOrInsert(mlir::detail::StorageUserTrait::IsMutable<Empty>)
ImplicitTypeIDRegistry::lookupOrInsert(mlir::MemRefLayoutAttrInterface::Trait<Empty>)
